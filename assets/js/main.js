(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * Dexie.js - a minimalistic wrapper for IndexedDB
 * ===============================================
 *
 * By David Fahlander, david.fahlander@gmail.com
 *
 * Version 2.0.2, Thu Mar 01 2018
 *
 * http://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
 */

(function (global, factory) {
    (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Dexie = factory();
})(undefined, function () {
    'use strict';

    var keys = Object.keys;
    var isArray = Array.isArray;
    var _global = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : global;
    function extend(obj, extension) {
        if ((typeof extension === 'undefined' ? 'undefined' : _typeof(extension)) !== 'object') return obj;
        keys(extension).forEach(function (key) {
            obj[key] = extension[key];
        });
        return obj;
    }
    var getProto = Object.getPrototypeOf;
    var _hasOwn = {}.hasOwnProperty;
    function hasOwn(obj, prop) {
        return _hasOwn.call(obj, prop);
    }
    function props(proto, extension) {
        if (typeof extension === 'function') extension = extension(getProto(proto));
        keys(extension).forEach(function (key) {
            setProp(proto, key, extension[key]);
        });
    }
    var defineProperty = Object.defineProperty;
    function setProp(obj, prop, functionOrGetSet, options) {
        defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));
    }
    function derive(Child) {
        return {
            from: function from(Parent) {
                Child.prototype = Object.create(Parent.prototype);
                setProp(Child.prototype, "constructor", Child);
                return {
                    extend: props.bind(null, Child.prototype)
                };
            }
        };
    }
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    function getPropertyDescriptor(obj, prop) {
        var pd = getOwnPropertyDescriptor(obj, prop),
            proto;
        return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
    }
    var _slice = [].slice;
    function slice(args, start, end) {
        return _slice.call(args, start, end);
    }
    function override(origFunc, overridedFactory) {
        return overridedFactory(origFunc);
    }
    function assert(b) {
        if (!b) throw new Error("Assertion Failed");
    }
    function asap(fn) {
        if (_global.setImmediate) setImmediate(fn);else setTimeout(fn, 0);
    }

    /** Generate an object (hash map) based on given array.
     * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to
     *        instert on the resulting object for each item in the array. If this function returns a falsy value, the
     *        current item wont affect the resulting object.
     */
    function arrayToObject(array, extractor) {
        return array.reduce(function (result, item, i) {
            var nameAndValue = extractor(item, i);
            if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];
            return result;
        }, {});
    }
    function trycatcher(fn, reject) {
        return function () {
            try {
                fn.apply(this, arguments);
            } catch (e) {
                reject(e);
            }
        };
    }
    function tryCatch(fn, onerror, args) {
        try {
            fn.apply(null, args);
        } catch (ex) {
            onerror && onerror(ex);
        }
    }
    function getByKeyPath(obj, keyPath) {
        // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path
        if (hasOwn(obj, keyPath)) return obj[keyPath]; // This line is moved from last to first for optimization purpose.
        if (!keyPath) return obj;
        if (typeof keyPath !== 'string') {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                var val = getByKeyPath(obj, keyPath[i]);
                rv.push(val);
            }
            return rv;
        }
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
        }
        return undefined;
    }
    function setByKeyPath(obj, keyPath, value) {
        if (!obj || keyPath === undefined) return;
        if ('isFrozen' in Object && Object.isFrozen(obj)) return;
        if (typeof keyPath !== 'string' && 'length' in keyPath) {
            assert(typeof value !== 'string' && 'length' in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                setByKeyPath(obj, keyPath[i], value[i]);
            }
        } else {
            var period = keyPath.indexOf('.');
            if (period !== -1) {
                var currentKeyPath = keyPath.substr(0, period);
                var remainingKeyPath = keyPath.substr(period + 1);
                if (remainingKeyPath === "") {
                    if (value === undefined) delete obj[currentKeyPath];else obj[currentKeyPath] = value;
                } else {
                    var innerObj = obj[currentKeyPath];
                    if (!innerObj) innerObj = obj[currentKeyPath] = {};
                    setByKeyPath(innerObj, remainingKeyPath, value);
                }
            } else {
                if (value === undefined) delete obj[keyPath];else obj[keyPath] = value;
            }
        }
    }
    function delByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string') setByKeyPath(obj, keyPath, undefined);else if ('length' in keyPath) [].map.call(keyPath, function (kp) {
            setByKeyPath(obj, kp, undefined);
        });
    }
    function shallowClone(obj) {
        var rv = {};
        for (var m in obj) {
            if (hasOwn(obj, m)) rv[m] = obj[m];
        }
        return rv;
    }
    var concat = [].concat;
    function flatten(a) {
        return concat.apply([], a);
    }
    //https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
    var intrinsicTypes = "Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set".split(',').concat(flatten([8, 16, 32, 64].map(function (num) {
        return ["Int", "Uint", "Float"].map(function (t) {
            return t + num + "Array";
        });
    }))).filter(function (t) {
        return _global[t];
    }).map(function (t) {
        return _global[t];
    });
    function deepClone(any) {
        if (!any || (typeof any === 'undefined' ? 'undefined' : _typeof(any)) !== 'object') return any;
        var rv;
        if (isArray(any)) {
            rv = [];
            for (var i = 0, l = any.length; i < l; ++i) {
                rv.push(deepClone(any[i]));
            }
        } else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
            rv = any;
        } else {
            rv = any.constructor ? Object.create(any.constructor.prototype) : {};
            for (var prop in any) {
                if (hasOwn(any, prop)) {
                    rv[prop] = deepClone(any[prop]);
                }
            }
        }
        return rv;
    }
    function getObjectDiff(a, b, rv, prfx) {
        // Compares objects a and b and produces a diff object.
        rv = rv || {};
        prfx = prfx || '';
        keys(a).forEach(function (prop) {
            if (!hasOwn(b, prop)) rv[prfx + prop] = undefined; // Property removed
            else {
                    var ap = a[prop],
                        bp = b[prop];
                    if ((typeof ap === 'undefined' ? 'undefined' : _typeof(ap)) === 'object' && (typeof bp === 'undefined' ? 'undefined' : _typeof(bp)) === 'object' && ap && bp &&
                    // Now compare constructors are same (not equal because wont work in Safari)
                    '' + ap.constructor === '' + bp.constructor)
                        // Same type of object but its properties may have changed
                        getObjectDiff(ap, bp, rv, prfx + prop + ".");else if (ap !== bp) rv[prfx + prop] = b[prop]; // Primitive value changed
                }
        });
        keys(b).forEach(function (prop) {
            if (!hasOwn(a, prop)) {
                rv[prfx + prop] = b[prop]; // Property added
            }
        });
        return rv;
    }
    // If first argument is iterable or array-like, return it as an array
    var iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;
    var getIteratorOf = iteratorSymbol ? function (x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
    } : function () {
        return null;
    };
    var NO_CHAR_ARRAY = {};
    // Takes one or several arguments and returns an array based on the following criteras:
    // * If several arguments provided, return arguments converted to an array in a way that
    //   still allows javascript engine to optimize the code.
    // * If single argument is an array, return a clone of it.
    // * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special
    //   case to the two bullets below.
    // * If single argument is an iterable, convert it to an array and return the resulting array.
    // * If single argument is array-like (has length of type number), convert it to an array.
    function getArrayOf(arrayLike) {
        var i, a, x, it;
        if (arguments.length === 1) {
            if (isArray(arrayLike)) return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string') return [arrayLike];
            if (it = getIteratorOf(arrayLike)) {
                a = [];
                while (x = it.next(), !x.done) {
                    a.push(x.value);
                }return a;
            }
            if (arrayLike == null) return [arrayLike];
            i = arrayLike.length;
            if (typeof i === 'number') {
                a = new Array(i);
                while (i--) {
                    a[i] = arrayLike[i];
                }return a;
            }
            return [arrayLike];
        }
        i = arguments.length;
        a = new Array(i);
        while (i--) {
            a[i] = arguments[i];
        }return a;
    }

    // By default, debug will be true only if platform is a web platform and its page is served from localhost.
    // When debug = true, error's stacks will contain asyncronic long stacks.
    var debug = typeof location !== 'undefined' &&
    // By default, use debug mode if served from localhost.
    /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
    function setDebug(value, filter) {
        debug = value;
        libraryFilter = filter;
    }
    var libraryFilter = function libraryFilter() {
        return true;
    };
    var NEEDS_THROW_FOR_STACK = !new Error("").stack;
    function getErrorWithStack() {
        "use strict";

        if (NEEDS_THROW_FOR_STACK) try {
            // Doing something naughty in strict mode here to trigger a specific error
            // that can be explicitely ignored in debugger's exception settings.
            // If we'd just throw new Error() here, IE's debugger's exception settings
            // will just consider it as "exception thrown by javascript code" which is
            // something you wouldn't want it to ignore.
            getErrorWithStack.arguments;
            throw new Error(); // Fallback if above line don't throw.
        } catch (e) {
            return e;
        }
        return new Error();
    }
    function prettyStack(exception, numIgnoredFrames) {
        var stack = exception.stack;
        if (!stack) return "";
        numIgnoredFrames = numIgnoredFrames || 0;
        if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split('\n').length;
        return stack.split('\n').slice(numIgnoredFrames).filter(libraryFilter).map(function (frame) {
            return "\n" + frame;
        }).join('');
    }
    function deprecated(what, fn) {
        return function () {
            console.warn(what + " is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. " + prettyStack(getErrorWithStack(), 1));
            return fn.apply(this, arguments);
        };
    }

    var dexieErrorNames = ['Modify', 'Bulk', 'OpenFailed', 'VersionChange', 'Schema', 'Upgrade', 'InvalidTable', 'MissingAPI', 'NoSuchDatabase', 'InvalidArgument', 'SubTransaction', 'Unsupported', 'Internal', 'DatabaseClosed', 'PrematureCommit', 'ForeignAwait'];
    var idbDomErrorNames = ['Unknown', 'Constraint', 'Data', 'TransactionInactive', 'ReadOnly', 'Version', 'NotFound', 'InvalidState', 'InvalidAccess', 'Abort', 'Timeout', 'QuotaExceeded', 'Syntax', 'DataClone'];
    var errorList = dexieErrorNames.concat(idbDomErrorNames);
    var defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed"
    };
    //
    // DexieError - base class of all out exceptions.
    //
    function DexieError(name, msg) {
        // Reason we don't use ES6 classes is because:
        // 1. It bloats transpiled code and increases size of minified code.
        // 2. It doesn't give us much in this case.
        // 3. It would require sub classes to call super(), which
        //    is not needed when deriving from Error.
        this._e = getErrorWithStack();
        this.name = name;
        this.message = msg;
    }
    derive(DexieError).from(Error).extend({
        stack: {
            get: function get() {
                return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
            }
        },
        toString: function toString() {
            return this.name + ": " + this.message;
        }
    });
    function getMultiErrorMessage(msg, failures) {
        return msg + ". Errors: " + failures.map(function (f) {
            return f.toString();
        }).filter(function (v, i, s) {
            return s.indexOf(v) === i;
        }) // Only unique error strings
        .join('\n');
    }
    //
    // ModifyError - thrown in Collection.modify()
    // Specific constructor because it contains members failures and failedKeys.
    //
    function ModifyError(msg, failures, successCount, failedKeys) {
        this._e = getErrorWithStack();
        this.failures = failures;
        this.failedKeys = failedKeys;
        this.successCount = successCount;
    }
    derive(ModifyError).from(DexieError);
    function BulkError(msg, failures) {
        this._e = getErrorWithStack();
        this.name = "BulkError";
        this.failures = failures;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(BulkError).from(DexieError);
    //
    //
    // Dynamically generate error names and exception classes based
    // on the names in errorList.
    //
    //
    // Map of {ErrorName -> ErrorName + "Error"}
    var errnames = errorList.reduce(function (obj, name) {
        return obj[name] = name + "Error", obj;
    }, {});
    // Need an alias for DexieError because we're gonna create subclasses with the same name.
    var BaseException = DexieError;
    // Map of {ErrorName -> exception constructor}
    var exceptions = errorList.reduce(function (obj, name) {
        // Let the name be "DexieError" because this name may
        // be shown in call stack and when debugging. DexieError is
        // the most true name because it derives from DexieError,
        // and we cannot change Function.name programatically without
        // dynamically create a Function object, which would be considered
        // 'eval-evil'.
        var fullName = name + "Error";
        function DexieError(msgOrInner, inner) {
            this._e = getErrorWithStack();
            this.name = fullName;
            if (!msgOrInner) {
                this.message = defaultTexts[name] || fullName;
                this.inner = null;
            } else if (typeof msgOrInner === 'string') {
                this.message = msgOrInner;
                this.inner = inner || null;
            } else if ((typeof msgOrInner === 'undefined' ? 'undefined' : _typeof(msgOrInner)) === 'object') {
                this.message = msgOrInner.name + " " + msgOrInner.message;
                this.inner = msgOrInner;
            }
        }
        derive(DexieError).from(BaseException);
        obj[name] = DexieError;
        return obj;
    }, {});
    // Use ECMASCRIPT standard exceptions where applicable:
    exceptions.Syntax = SyntaxError;
    exceptions.Type = TypeError;
    exceptions.Range = RangeError;
    var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
        obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    function mapError(domError, message) {
        if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name]) return domError;
        var rv = new exceptionMap[domError.name](message || domError.message, domError);
        if ("stack" in domError) {
            // Derive stack from inner exception if it has a stack
            setProp(rv, "stack", { get: function get() {
                    return this.inner.stack;
                } });
        }
        return rv;
    }
    var fullNameExceptions = errorList.reduce(function (obj, name) {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1) obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    fullNameExceptions.ModifyError = ModifyError;
    fullNameExceptions.DexieError = DexieError;
    fullNameExceptions.BulkError = BulkError;

    function nop() {}
    function mirror(val) {
        return val;
    }
    function pureFunctionChain(f1, f2) {
        // Enables chained events that takes ONE argument and returns it to the next function in chain.
        // This pattern is used in the hook("reading") event.
        if (f1 == null || f1 === mirror) return f2;
        return function (val) {
            return f2(f1(val));
        };
    }
    function callBoth(on1, on2) {
        return function () {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
        };
    }
    function hookCreatingChain(f1, f2) {
        // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.
        // This pattern is used in the hook("creating") event.
        if (f1 === nop) return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res !== undefined) arguments[0] = res;
            var onsuccess = this.onsuccess,
                // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== undefined ? res2 : res;
        };
    }
    function hookDeletingChain(f1, f2) {
        if (f1 === nop) return f2;
        return function () {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess,
                // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        };
    }
    function hookUpdatingChain(f1, f2) {
        if (f1 === nop) return f2;
        return function (modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.
            var onsuccess = this.onsuccess,
                // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === undefined ? res2 === undefined ? undefined : res2 : extend(res, res2);
        };
    }
    function reverseStoppableEventChain(f1, f2) {
        if (f1 === nop) return f2;
        return function () {
            if (f2.apply(this, arguments) === false) return false;
            return f1.apply(this, arguments);
        };
    }

    function promisableChain(f1, f2) {
        if (f1 === nop) return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === 'function') {
                var thiz = this,
                    i = arguments.length,
                    args = new Array(i);
                while (i--) {
                    args[i] = arguments[i];
                }return res.then(function () {
                    return f2.apply(thiz, args);
                });
            }
            return f2.apply(this, arguments);
        };
    }

    /*
     * Copyright (c) 2014-2017 David Fahlander
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
     */
    //
    // Promise and Zone (PSD) for Dexie library
    //
    // I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by
    // https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.
    //
    // In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another
    // tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use
    // another strategy now that simplifies everything a lot: to always execute callbacks in a new micro-task, but have an own micro-task
    // engine that is indexedDB compliant across all browsers.
    // Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.
    // Also with inspiration from bluebird, asyncronic stacks in debug mode.
    //
    // Specific non-standard features of this Promise class:
    // * Custom zone support (a.k.a. PSD) with ability to keep zones also when using native promises as well as
    //   native async / await.
    // * Promise.follow() method built upon the custom zone engine, that allows user to track all promises created from current stack frame
    //   and below + all promises that those promises creates or awaits.
    // * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). 
    //
    // David Fahlander, https://github.com/dfahlander
    //
    // Just a pointer that only this module knows about.
    // Used in Promise constructor to emulate a private constructor.
    var INTERNAL = {};
    // Async stacks (long stacks) must not grow infinitely.
    var LONG_STACKS_CLIP_LIMIT = 100;
    var MAX_LONG_STACKS = 20;
    var ZONE_ECHO_LIMIT = 7;
    var nativePromiseInstanceAndProto = function () {
        try {
            // Be able to patch native async functions
            return new Function("let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];")();
        } catch (e) {
            var P = _global.Promise;
            return P ? [P.resolve(), P.prototype, P.resolve()] : [];
        }
    }();
    var resolvedNativePromise = nativePromiseInstanceAndProto[0];
    var nativePromiseProto = nativePromiseInstanceAndProto[1];
    var resolvedGlobalPromise = nativePromiseInstanceAndProto[2];
    var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
    var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
    var AsyncFunction = nativePromiseInstanceAndProto[3];
    var patchGlobalPromise = !!resolvedGlobalPromise;
    var stack_being_generated = false;
    /* The default function used only for the very first promise in a promise chain.
       As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks
       emulated in this module. For indexedDB compatibility, this means that every method needs to
       execute at least one promise before doing an indexedDB operation. Dexie will always call
       db.ready().then() for every operation to make sure the indexedDB event is started in an
       indexedDB-compatible emulated micro task loop.
    */
    var schedulePhysicalTick = resolvedGlobalPromise ? function () {
        resolvedGlobalPromise.then(physicalTick);
    } : _global.setImmediate ?
    // setImmediate supported. Those modern platforms also supports Function.bind().
    setImmediate.bind(null, physicalTick) : _global.MutationObserver ?
    // MutationObserver supported
    function () {
        var hiddenDiv = document.createElement("div");
        new MutationObserver(function () {
            physicalTick();
            hiddenDiv = null;
        }).observe(hiddenDiv, { attributes: true });
        hiddenDiv.setAttribute('i', '1');
    } :
    // No support for setImmediate or MutationObserver. No worry, setTimeout is only called
    // once time. Every tick that follows will be our emulated micro tick.
    // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug 
    function () {
        setTimeout(physicalTick, 0);
    };
    // Configurable through Promise.scheduler.
    // Don't export because it would be unsafe to let unknown
    // code call it unless they do try..catch within their callback.
    // This function can be retrieved through getter of Promise.scheduler though,
    // but users must not do Promise.scheduler = myFuncThatThrowsException
    var asap$1 = function asap$1(callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
        }
    };
    var isOutsideMicroTick = true;
    var needsNewPhysicalTick = true;
    var unhandledErrors = [];
    var rejectingErrors = [];
    var currentFulfiller = null;
    var rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions
    var globalPSD = {
        id: 'global',
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: globalError,
        pgp: false,
        env: {},
        finalize: function finalize() {
            this.unhandleds.forEach(function (uh) {
                try {
                    globalError(uh[0], uh[1]);
                } catch (e) {}
            });
        }
    };
    var PSD = globalPSD;
    var microtickQueue = []; // Callbacks to call in this or next physical tick.
    var numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.
    var tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.
    function Promise(fn) {
        if (_typeof(this) !== 'object') throw new TypeError('Promises must be constructed via new');
        this._listeners = [];
        this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.
        // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()
        // execute the microtask engine implicitely within the call to resolve() or reject().
        // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack
        // only contains library code when calling resolve() or reject().
        // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from
        // global scope (event handler, timer etc)!
        this._lib = false;
        // Current async scope
        var psd = this._PSD = PSD;
        if (debug) {
            this._stackHolder = getErrorWithStack();
            this._prev = null;
            this._numPrev = 0; // Number of previous promises (for long stacks)
        }
        if (typeof fn !== 'function') {
            if (fn !== INTERNAL) throw new TypeError('Not a function');
            // Private constructor (INTERNAL, state, value).
            // Used internally by Promise.resolve() and Promise.reject().
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false) handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().
            return;
        }
        this._state = null; // null (=pending), false (=rejected) or true (=resolved)
        this._value = null; // error or result
        ++psd.ref; // Refcounting current scope
        executePromiseTask(this, fn);
    }
    // Prepare a property descriptor to put onto Promise.prototype.then
    var thenProp = {
        get: function get() {
            var psd = PSD,
                microTaskId = totalEchoes;
            function then(onFulfilled, onRejected) {
                var _this = this;
                var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
                if (possibleAwait) decrementExpectedAwaits();
                var rv = new Promise(function (resolve, reject) {
                    propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));
                });
                debug && linkToPreviousPromise(rv, this);
                return rv;
            }
            then.prototype = INTERNAL; // For idempotense, see setter below.
            return then;
        },
        // Be idempotent and allow another framework (such as zone.js or another instance of a Dexie.Promise module) to replace Promise.prototype.then
        // and when that framework wants to restore the original property, we must identify that and restore the original property descriptor.
        set: function set(value) {
            setProp(this, 'then', value && value.prototype === INTERNAL ? thenProp : // Restore to original property descriptor.
            {
                get: function get() {
                    return value; // Getter returning provided value (behaves like value is just changed)
                },
                set: thenProp.set // Keep a setter that is prepared to restore original.
            });
        }
    };
    props(Promise.prototype, {
        then: thenProp,
        _then: function _then(onFulfilled, onRejected) {
            // A little tinier version of then() that don't have to create a resulting promise.
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
        },
        catch: function _catch(onRejected) {
            if (arguments.length === 1) return this.then(null, onRejected);
            // First argument is the Error type to catch
            var type = arguments[0],
                handler = arguments[1];
            return typeof type === 'function' ? this.then(null, function (err) {
                // Catching errors by its constructor type (similar to java / c++ / c#)
                // Sample: promise.catch(TypeError, function (e) { ... });
                return err instanceof type ? handler(err) : PromiseReject(err);
            }) : this.then(null, function (err) {
                // Catching errors by the error.name property. Makes sense for indexedDB where error type
                // is always DOMError but where e.name tells the actual error type.
                // Sample: promise.catch('ConstraintError', function (e) { ... });
                return err && err.name === type ? handler(err) : PromiseReject(err);
            });
        },
        finally: function _finally(onFinally) {
            return this.then(function (value) {
                onFinally();
                return value;
            }, function (err) {
                onFinally();
                return PromiseReject(err);
            });
        },
        stack: {
            get: function get() {
                if (this._stack) return this._stack;
                try {
                    stack_being_generated = true;
                    var stacks = getStack(this, [], MAX_LONG_STACKS);
                    var stack = stacks.join("\nFrom previous: ");
                    if (this._state !== null) this._stack = stack; // Stack may be updated on reject.
                    return stack;
                } finally {
                    stack_being_generated = false;
                }
            }
        },
        timeout: function timeout(ms, msg) {
            var _this = this;
            return ms < Infinity ? new Promise(function (resolve, reject) {
                var handle = setTimeout(function () {
                    return reject(new exceptions.Timeout(msg));
                }, ms);
                _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
            }) : this;
        }
    });
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) setProp(Promise.prototype, Symbol.toStringTag, 'Promise');
    // Now that Promise.prototype is defined, we have all it takes to set globalPSD.env.
    // Environment globals snapshotted on leaving global zone
    globalPSD.env = snapShot();
    function Listener(onFulfilled, onRejected, resolve, reject, zone) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.resolve = resolve;
        this.reject = reject;
        this.psd = zone;
    }
    // Promise Static Properties
    props(Promise, {
        all: function all() {
            var values = getArrayOf.apply(null, arguments) // Supports iterables, implicit arguments and array-like.
            .map(onPossibleParallellAsync); // Handle parallell async/awaits 
            return new Promise(function (resolve, reject) {
                if (values.length === 0) resolve([]);
                var remaining = values.length;
                values.forEach(function (a, i) {
                    return Promise.resolve(a).then(function (x) {
                        values[i] = x;
                        if (! --remaining) resolve(values);
                    }, reject);
                });
            });
        },
        resolve: function resolve(value) {
            if (value instanceof Promise) return value;
            if (value && typeof value.then === 'function') return new Promise(function (resolve, reject) {
                value.then(resolve, reject);
            });
            var rv = new Promise(INTERNAL, true, value);
            linkToPreviousPromise(rv, currentFulfiller);
            return rv;
        },
        reject: PromiseReject,
        race: function race() {
            var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new Promise(function (resolve, reject) {
                values.map(function (value) {
                    return Promise.resolve(value).then(resolve, reject);
                });
            });
        },
        PSD: {
            get: function get() {
                return PSD;
            },
            set: function set(value) {
                return PSD = value;
            }
        },
        //totalEchoes: {get: ()=>totalEchoes},
        //task: {get: ()=>task},
        newPSD: newScope,
        usePSD: usePSD,
        scheduler: {
            get: function get() {
                return asap$1;
            },
            set: function set(value) {
                asap$1 = value;
            }
        },
        rejectionMapper: {
            get: function get() {
                return rejectionMapper;
            },
            set: function set(value) {
                rejectionMapper = value;
            } // Map reject failures
        },
        follow: function follow(fn, zoneProps) {
            return new Promise(function (resolve, reject) {
                return newScope(function (resolve, reject) {
                    var psd = PSD;
                    psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()
                    psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.
                    psd.finalize = callBoth(function () {
                        var _this = this;
                        // Unhandled standard or 3rd part promises are put in PSD.unhandleds and
                        // examined upon scope completion while unhandled rejections in this Promise
                        // will trigger directly through psd.onunhandled
                        run_at_end_of_this_or_next_physical_tick(function () {
                            _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                        });
                    }, psd.finalize);
                    fn();
                }, zoneProps, resolve, reject);
            });
        }
    });
    /**
    * Take a potentially misbehaving resolver function and make sure
    * onFulfilled and onRejected are only called once.
    *
    * Makes no guarantees about asynchrony.
    */
    function executePromiseTask(promise, fn) {
        // Promise Resolution Procedure:
        // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
        try {
            fn(function (value) {
                if (promise._state !== null) return; // Already settled
                if (value === promise) throw new TypeError('A promise cannot be resolved with itself.');
                var shouldExecuteTick = promise._lib && beginMicroTickScope();
                if (value && typeof value.then === 'function') {
                    executePromiseTask(promise, function (resolve, reject) {
                        value instanceof Promise ? value._then(resolve, reject) : value.then(resolve, reject);
                    });
                } else {
                    promise._state = true;
                    promise._value = value;
                    propagateAllListeners(promise);
                }
                if (shouldExecuteTick) endMicroTickScope();
            }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below
        } catch (ex) {
            handleRejection(promise, ex);
        }
    }
    function handleRejection(promise, reason) {
        rejectingErrors.push(reason);
        if (promise._state !== null) return;
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        reason = rejectionMapper(reason);
        promise._state = false;
        promise._value = reason;
        debug && reason !== null && (typeof reason === 'undefined' ? 'undefined' : _typeof(reason)) === 'object' && !reason._promise && tryCatch(function () {
            var origProp = getPropertyDescriptor(reason, "stack");
            reason._promise = promise;
            setProp(reason, "stack", {
                get: function get() {
                    return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
                }
            });
        });
        // Add the failure to a list of possibly uncaught errors
        addPossiblyUnhandledError(promise);
        propagateAllListeners(promise);
        if (shouldExecuteTick) endMicroTickScope();
    }
    function propagateAllListeners(promise) {
        //debug && linkToPreviousPromise(promise);
        var listeners = promise._listeners;
        promise._listeners = [];
        for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
        }
        var psd = promise._PSD;
        --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();
        if (numScheduledCalls === 0) {
            // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,
            // and that no deferreds where listening to this rejection or success.
            // Since there is a risk that our stack can contain application code that may
            // do stuff after this code is finished that may generate new calls, we cannot
            // call finalizers here.
            ++numScheduledCalls;
            asap$1(function () {
                if (--numScheduledCalls === 0) finalizePhysicalTick(); // Will detect unhandled errors
            }, []);
        }
    }
    function propagateToListener(promise, listener) {
        if (promise._state === null) {
            promise._listeners.push(listener);
            return;
        }
        var cb = promise._state ? listener.onFulfilled : listener.onRejected;
        if (cb === null) {
            // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
        }
        ++listener.psd.ref;
        ++numScheduledCalls;
        asap$1(callListener, [cb, promise, listener]);
    }
    function callListener(cb, promise, listener) {
        try {
            // Set static variable currentFulfiller to the promise that is being fullfilled,
            // so that we connect the chain of promises (for long stacks support)
            currentFulfiller = promise;
            // Call callback and resolve our listener with it's return value.
            var ret,
                value = promise._value;
            if (promise._state) {
                // cb is onResolved
                ret = cb(value);
            } else {
                // cb is onRejected
                if (rejectingErrors.length) rejectingErrors = [];
                ret = cb(value);
                if (rejectingErrors.indexOf(value) === -1) markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.
            }
            listener.resolve(ret);
        } catch (e) {
            // Exception thrown in callback. Reject our listener.
            listener.reject(e);
        } finally {
            // Restore env and currentFulfiller.
            currentFulfiller = null;
            if (--numScheduledCalls === 0) finalizePhysicalTick();
            --listener.psd.ref || listener.psd.finalize();
        }
    }
    function getStack(promise, stacks, limit) {
        if (stacks.length === limit) return stacks;
        var stack = "";
        if (promise._state === false) {
            var failure = promise._value,
                errorName,
                message;
            if (failure != null) {
                errorName = failure.name || "Error";
                message = failure.message || failure;
                stack = prettyStack(failure, 0);
            } else {
                errorName = failure; // If error is undefined or null, show that.
                message = "";
            }
            stacks.push(errorName + (message ? ": " + message : "") + stack);
        }
        if (debug) {
            stack = prettyStack(promise._stackHolder, 2);
            if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);
            if (promise._prev) getStack(promise._prev, stacks, limit);
        }
        return stacks;
    }
    function linkToPreviousPromise(promise, prev) {
        // Support long stacks by linking to previous completed promise.
        var numPrev = prev ? prev._numPrev + 1 : 0;
        if (numPrev < LONG_STACKS_CLIP_LIMIT) {
            promise._prev = prev;
            promise._numPrev = numPrev;
        }
    }
    /* The callback to schedule with setImmediate() or setTimeout().
       It runs a virtual microtick and executes any callback registered in microtickQueue.
     */
    function physicalTick() {
        beginMicroTickScope() && endMicroTickScope();
    }
    function beginMicroTickScope() {
        var wasRootExec = isOutsideMicroTick;
        isOutsideMicroTick = false;
        needsNewPhysicalTick = false;
        return wasRootExec;
    }
    /* Executes micro-ticks without doing try..catch.
       This can be possible because we only use this internally and
       the registered functions are exception-safe (they do try..catch
       internally before calling any external method). If registering
       functions in the microtickQueue that are not exception-safe, this
       would destroy the framework and make it instable. So we don't export
       our asap method.
    */
    function endMicroTickScope() {
        var callbacks, i, l;
        do {
            while (microtickQueue.length > 0) {
                callbacks = microtickQueue;
                microtickQueue = [];
                l = callbacks.length;
                for (i = 0; i < l; ++i) {
                    var item = callbacks[i];
                    item[0].apply(null, item[1]);
                }
            }
        } while (microtickQueue.length > 0);
        isOutsideMicroTick = true;
        needsNewPhysicalTick = true;
    }
    function finalizePhysicalTick() {
        var unhandledErrs = unhandledErrors;
        unhandledErrors = [];
        unhandledErrs.forEach(function (p) {
            p._PSD.onunhandled.call(null, p._value, p);
        });
        var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.
        var i = finalizers.length;
        while (i) {
            finalizers[--i]();
        }
    }
    function run_at_end_of_this_or_next_physical_tick(fn) {
        function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
        }
        tickFinalizers.push(finalizer);
        ++numScheduledCalls;
        asap$1(function () {
            if (--numScheduledCalls === 0) finalizePhysicalTick();
        }, []);
    }
    function addPossiblyUnhandledError(promise) {
        // Only add to unhandledErrors if not already there. The first one to add to this list
        // will be upon the first rejection so that the root cause (first promise in the
        // rejection chain) is the one listed.
        if (!unhandledErrors.some(function (p) {
            return p._value === promise._value;
        })) unhandledErrors.push(promise);
    }
    function markErrorAsHandled(promise) {
        // Called when a reject handled is actually being called.
        // Search in unhandledErrors for any promise whos _value is this promise_value (list
        // contains only rejected promises, and only one item per error)
        var i = unhandledErrors.length;
        while (i) {
            if (unhandledErrors[--i]._value === promise._value) {
                // Found a promise that failed with this same error object pointer,
                // Remove that since there is a listener that actually takes care of it.
                unhandledErrors.splice(i, 1);
                return;
            }
        }
    }
    function PromiseReject(reason) {
        return new Promise(INTERNAL, false, reason);
    }
    function wrap(fn, errorCatcher) {
        var psd = PSD;
        return function () {
            var wasRootExec = beginMicroTickScope(),
                outerScope = PSD;
            try {
                switchToZone(psd, true);
                return fn.apply(this, arguments);
            } catch (e) {
                errorCatcher && errorCatcher(e);
            } finally {
                switchToZone(outerScope, false);
                if (wasRootExec) endMicroTickScope();
            }
        };
    }
    //
    // variables used for native await support
    //
    var task = { awaits: 0, echoes: 0, id: 0 }; // The ongoing macro-task when using zone-echoing.
    var taskCounter = 0; // ID counter for macro tasks.
    var zoneStack = []; // Stack of left zones to restore asynchronically.
    var zoneEchoes = 0; // zoneEchoes is a must in order to persist zones between native await expressions.
    var totalEchoes = 0; // ID counter for micro-tasks. Used to detect possible native await in our Promise.prototype.then.
    var zone_id_counter = 0;
    function newScope(fn, props$$1, a1, a2) {
        var parent = PSD,
            psd = Object.create(parent);
        psd.parent = parent;
        psd.ref = 0;
        psd.global = false;
        psd.id = ++zone_id_counter;
        // Prepare for promise patching (done in usePSD):
        var globalEnv = globalPSD.env;
        psd.env = patchGlobalPromise ? {
            Promise: Promise,
            PromiseProp: { value: Promise, configurable: true, writable: true },
            all: Promise.all,
            race: Promise.race,
            resolve: Promise.resolve,
            reject: Promise.reject,
            nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
            gthen: getPatchedPromiseThen(globalEnv.gthen, psd) // global then
        } : {};
        if (props$$1) extend(psd, props$$1);
        // unhandleds and onunhandled should not be specifically set here.
        // Leave them on parent prototype.
        // unhandleds.push(err) will push to parent's prototype
        // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)
        ++parent.ref;
        psd.finalize = function () {
            --this.parent.ref || this.parent.finalize();
        };
        var rv = usePSD(psd, fn, a1, a2);
        if (psd.ref === 0) psd.finalize();
        return rv;
    }
    // Function to call if scopeFunc returns NativePromise
    // Also for each NativePromise in the arguments to Promise.all()
    function incrementExpectedAwaits() {
        if (!task.id) task.id = ++taskCounter;
        ++task.awaits;
        task.echoes += ZONE_ECHO_LIMIT;
        return task.id;
    }
    // Function to call when 'then' calls back on a native promise where onAwaitExpected() had been called.
    // Also call this when a native await calls then method on a promise. In that case, don't supply
    // sourceTaskId because we already know it refers to current task.
    function decrementExpectedAwaits(sourceTaskId) {
        if (!task.awaits || sourceTaskId && sourceTaskId !== task.id) return;
        if (--task.awaits === 0) task.id = 0;
        task.echoes = task.awaits * ZONE_ECHO_LIMIT; // Will reset echoes to 0 if awaits is 0.
    }
    // Call from Promise.all() and Promise.race()
    function onPossibleParallellAsync(possiblePromise) {
        if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
            incrementExpectedAwaits();
            return possiblePromise.then(function (x) {
                decrementExpectedAwaits();
                return x;
            }, function (e) {
                decrementExpectedAwaits();
                return rejection(e);
            });
        }
        return possiblePromise;
    }
    function zoneEnterEcho(targetZone) {
        ++totalEchoes;
        if (!task.echoes || --task.echoes === 0) {
            task.echoes = task.id = 0; // Cancel zone echoing.
        }
        zoneStack.push(PSD);
        switchToZone(targetZone, true);
    }
    function zoneLeaveEcho() {
        var zone = zoneStack[zoneStack.length - 1];
        zoneStack.pop();
        switchToZone(zone, false);
    }
    function switchToZone(targetZone, bEnteringZone) {
        var currentZone = PSD;
        if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (! --zoneEchoes || targetZone !== PSD)) {
            // Enter or leave zone asynchronically as well, so that tasks initiated during current tick
            // will be surrounded by the zone when they are invoked.
            enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
        }
        if (targetZone === PSD) return;
        PSD = targetZone; // The actual zone switch occurs at this line.
        // Snapshot on every leave from global zone.
        if (currentZone === globalPSD) globalPSD.env = snapShot();
        if (patchGlobalPromise) {
            // Let's patch the global and native Promises (may be same or may be different)
            var GlobalPromise = globalPSD.env.Promise;
            // Swich environments (may be PSD-zone or the global zone. Both apply.)
            var targetEnv = targetZone.env;
            // Change Promise.prototype.then for native and global Promise (they MAY differ on polyfilled environments, but both can be accessed)
            // Must be done on each zone change because the patched method contains targetZone in its closure.
            nativePromiseProto.then = targetEnv.nthen;
            GlobalPromise.prototype.then = targetEnv.gthen;
            if (currentZone.global || targetZone.global) {
                // Leaving or entering global zone. It's time to patch / restore global Promise.
                // Set this Promise to window.Promise so that transiled async functions will work on Firefox, Safari and IE, as well as with Zonejs and angular.
                Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
                // Support Promise.all() etc to work indexedDB-safe also when people are including es6-promise as a module (they might
                // not be accessing global.Promise but a local reference to it)
                GlobalPromise.all = targetEnv.all;
                GlobalPromise.race = targetEnv.race;
                GlobalPromise.resolve = targetEnv.resolve;
                GlobalPromise.reject = targetEnv.reject;
            }
        }
    }
    function snapShot() {
        var GlobalPromise = _global.Promise;
        return patchGlobalPromise ? {
            Promise: GlobalPromise,
            PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
            all: GlobalPromise.all,
            race: GlobalPromise.race,
            resolve: GlobalPromise.resolve,
            reject: GlobalPromise.reject,
            nthen: nativePromiseProto.then,
            gthen: GlobalPromise.prototype.then
        } : {};
    }
    function usePSD(psd, fn, a1, a2, a3) {
        var outerScope = PSD;
        try {
            switchToZone(psd, true);
            return fn(a1, a2, a3);
        } finally {
            switchToZone(outerScope, false);
        }
    }
    function enqueueNativeMicroTask(job) {
        //
        // Precondition: nativePromiseThen !== undefined
        //
        nativePromiseThen.call(resolvedNativePromise, job);
    }
    function nativeAwaitCompatibleWrap(fn, zone, possibleAwait) {
        return typeof fn !== 'function' ? fn : function () {
            var outerZone = PSD;
            if (possibleAwait) incrementExpectedAwaits();
            switchToZone(zone, true);
            try {
                return fn.apply(this, arguments);
            } finally {
                switchToZone(outerZone, false);
            }
        };
    }
    function getPatchedPromiseThen(origThen, zone) {
        return function (onResolved, onRejected) {
            return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));
        };
    }
    var UNHANDLEDREJECTION = "unhandledrejection";
    function globalError(err, promise) {
        var rv;
        try {
            rv = promise.onuncatched(err);
        } catch (e) {}
        if (rv !== false) try {
            var event,
                eventData = { promise: promise, reason: err };
            if (_global.document && document.createEvent) {
                event = document.createEvent('Event');
                event.initEvent(UNHANDLEDREJECTION, true, true);
                extend(event, eventData);
            } else if (_global.CustomEvent) {
                event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
                extend(event, eventData);
            }
            if (event && _global.dispatchEvent) {
                dispatchEvent(event);
                if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
                    // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.
                    try {
                        _global.onunhandledrejection(event);
                    } catch (_) {}
            }
            if (!event.defaultPrevented) {
                console.warn("Unhandled rejection: " + (err.stack || err));
            }
        } catch (e) {}
    }
    var rejection = Promise.reject;

    function Events(ctx) {
        var evs = {};
        var rv = function rv(eventName, subscriber) {
            if (subscriber) {
                // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.
                var i = arguments.length,
                    args = new Array(i - 1);
                while (--i) {
                    args[i - 1] = arguments[i];
                }evs[eventName].subscribe.apply(null, args);
                return ctx;
            } else if (typeof eventName === 'string') {
                // Return interface allowing to fire or unsubscribe from event
                return evs[eventName];
            }
        };
        rv.addEventType = add;
        for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
        }
        return rv;
        function add(eventName, chainFunction, defaultFunction) {
            if ((typeof eventName === 'undefined' ? 'undefined' : _typeof(eventName)) === 'object') return addConfiguredEvents(eventName);
            if (!chainFunction) chainFunction = reverseStoppableEventChain;
            if (!defaultFunction) defaultFunction = nop;
            var context = {
                subscribers: [],
                fire: defaultFunction,
                subscribe: function subscribe(cb) {
                    if (context.subscribers.indexOf(cb) === -1) {
                        context.subscribers.push(cb);
                        context.fire = chainFunction(context.fire, cb);
                    }
                },
                unsubscribe: function unsubscribe(cb) {
                    context.subscribers = context.subscribers.filter(function (fn) {
                        return fn !== cb;
                    });
                    context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
                }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
        }
        function addConfiguredEvents(cfg) {
            // events(this, {reading: [functionChain, nop]});
            keys(cfg).forEach(function (eventName) {
                var args = cfg[eventName];
                if (isArray(args)) {
                    add(eventName, cfg[eventName][0], cfg[eventName][1]);
                } else if (args === 'asap') {
                    // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack
                    // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.
                    var context = add(eventName, mirror, function fire() {
                        // Optimazation-safe cloning of arguments into args.
                        var i = arguments.length,
                            args = new Array(i);
                        while (i--) {
                            args[i] = arguments[i];
                        } // All each subscriber:
                        context.subscribers.forEach(function (fn) {
                            asap(function fireEvent() {
                                fn.apply(null, args);
                            });
                        });
                    });
                } else throw new exceptions.InvalidArgument("Invalid event config");
            });
        }
    }

    /*
     * Dexie.js - a minimalistic wrapper for IndexedDB
     * ===============================================
     *
     * Copyright (c) 2014-2017 David Fahlander
     *
     * Version 2.0.2, Thu Mar 01 2018
     *
     * http://dexie.org
     *
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0
     *
     */
    var DEXIE_VERSION = '2.0.2';
    var maxString = String.fromCharCode(65535);
    var maxKey = function () {
        try {
            IDBKeyRange.only([[]]);
            return [[]];
        } catch (e) {
            return maxString;
        }
    }();
    var minKey = -Infinity;
    var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
    var STRING_EXPECTED = "String expected.";
    var connections = [];
    var isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
    var hasIEDeleteObjectStoreBug = isIEOrEdge;
    var hangsOnDeleteLargeKeyRange = isIEOrEdge;
    var dexieStackFrameFilter = function dexieStackFrameFilter(frame) {
        return !/(dexie\.js|dexie\.min\.js)/.test(frame);
    };
    var dbNamesDB; // Global database for backing Dexie.getDatabaseNames() on browser without indexedDB.webkitGetDatabaseNames() 
    // Init debug
    setDebug(debug, dexieStackFrameFilter);
    function Dexie(dbName, options) {
        /// <param name="options" type="Object" optional="true">Specify only if you wich to control which addons that should run on this instance</param>
        var deps = Dexie.dependencies;
        var opts = extend({
            // Default Options
            addons: Dexie.addons,
            autoOpen: true,
            indexedDB: deps.indexedDB,
            IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to browser env.
        }, options);
        var addons = opts.addons,
            autoOpen = opts.autoOpen,
            indexedDB = opts.indexedDB,
            IDBKeyRange = opts.IDBKeyRange;
        var globalSchema = this._dbSchema = {};
        var versions = [];
        var dbStoreNames = [];
        var allTables = {};
        ///<var type="IDBDatabase" />
        var idbdb = null; // Instance of IDBDatabase
        var dbOpenError = null;
        var isBeingOpened = false;
        var onReadyBeingFired = null;
        var openComplete = false;
        var READONLY = "readonly",
            READWRITE = "readwrite";
        var db = this;
        var dbReadyResolve,
            dbReadyPromise = new Promise(function (resolve) {
            dbReadyResolve = resolve;
        }),
            cancelOpen,
            openCanceller = new Promise(function (_, reject) {
            cancelOpen = reject;
        });
        var autoSchema = true;
        var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB),
            hasGetAll;
        function init() {
            // Default subscribers to "versionchange" and "blocked".
            // Can be overridden by custom handlers. If custom handlers return false, these default
            // behaviours will be prevented.
            db.on("versionchange", function (ev) {
                // Default behavior for versionchange event is to close database connection.
                // Caller can override this behavior by doing db.on("versionchange", function(){ return false; });
                // Let's not block the other window from making it's delete() or open() call.
                // NOTE! This event is never fired in IE,Edge or Safari.
                if (ev.newVersion > 0) console.warn("Another connection wants to upgrade database '" + db.name + "'. Closing db now to resume the upgrade.");else console.warn("Another connection wants to delete database '" + db.name + "'. Closing db now to resume the delete request.");
                db.close();
                // In many web applications, it would be recommended to force window.reload()
                // when this event occurs. To do that, subscribe to the versionchange event
                // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)
                // The reason for this is that your current web app obviously has old schema code that needs
                // to be updated. Another window got a newer version of the app and needs to upgrade DB but
                // your window is blocking it unless we close it here.
            });
            db.on("blocked", function (ev) {
                if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn("Dexie.delete('" + db.name + "') was blocked");else console.warn("Upgrade '" + db.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
            });
        }
        //
        //
        //
        // ------------------------- Versioning Framework---------------------------
        //
        //
        //
        this.version = function (versionNumber) {
            /// <param name="versionNumber" type="Number"></param>
            /// <returns type="Version"></returns>
            if (idbdb || isBeingOpened) throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            var versionInstance = versions.filter(function (v) {
                return v._cfg.version === versionNumber;
            })[0];
            if (versionInstance) return versionInstance;
            versionInstance = new Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            // Disable autoschema mode, as at least one version is specified.
            autoSchema = false;
            return versionInstance;
        };
        function Version(versionNumber) {
            this._cfg = {
                version: versionNumber,
                storesSource: null,
                dbschema: {},
                tables: {},
                contentUpgrade: null
            };
            this.stores({}); // Derive earlier schemas by default.
        }
        extend(Version.prototype, {
            stores: function stores(_stores) {
                /// <summary>
                ///   Defines the schema for a particular version
                /// </summary>
                /// <param name="stores" type="Object">
                /// Example: <br/>
                ///   {users: "id++,first,last,&amp;username,*email", <br/>
                ///   passwords: "id++,&amp;username"}<br/>
                /// <br/>
                /// Syntax: {Table: "[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,..."}<br/><br/>
                /// Special characters:<br/>
                ///  "&amp;"  means unique key, <br/>
                ///  "*"  means value is multiEntry, <br/>
                ///  "++" means auto-increment and only applicable for primary key <br/>
                /// </param>
                this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, _stores) : _stores;
                // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.
                var storesSpec = {};
                versions.forEach(function (version) {
                    extend(storesSpec, version._cfg.storesSource);
                });
                var dbschema = this._cfg.dbschema = {};
                this._parseStoresSpec(storesSpec, dbschema);
                // Update the latest schema to this version
                // Update API
                globalSchema = db._dbSchema = dbschema;
                removeTablesApi([allTables, db, Transaction.prototype]); // Keep Transaction.prototype even though it should be depr.
                setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
                dbStoreNames = keys(dbschema);
                return this;
            },
            upgrade: function upgrade(upgradeFunction) {
                /// <param name="upgradeFunction" optional="true">Function that performs upgrading actions.</param>
                var self = this;
                this._cfg.contentUpgrade = upgradeFunction;
                return this;
            },
            _parseStoresSpec: function _parseStoresSpec(stores, outSchema) {
                keys(stores).forEach(function (tableName) {
                    if (stores[tableName] !== null) {
                        var instanceTemplate = {};
                        var indexes = parseIndexSyntax(stores[tableName]);
                        var primKey = indexes.shift();
                        if (primKey.multi) throw new exceptions.Schema("Primary key cannot be multi-valued");
                        if (primKey.keyPath) setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);
                        indexes.forEach(function (idx) {
                            if (idx.auto) throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                            if (!idx.keyPath) throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                            setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () {
                                return "";
                            }) : "");
                        });
                        outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);
                    }
                });
            }
        });
        function runUpgraders(oldVersion, idbtrans, reject) {
            var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);
            trans.create(idbtrans);
            trans._completion.catch(reject);
            var rejectTransaction = trans._reject.bind(trans);
            newScope(function () {
                PSD.trans = trans;
                if (oldVersion === 0) {
                    // Create tables:
                    keys(globalSchema).forEach(function (tableName) {
                        createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                    });
                    Promise.follow(function () {
                        return db.on.populate.fire(trans);
                    }).catch(rejectTransaction);
                } else updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);
            });
        }
        function updateTablesAndIndexes(oldVersion, trans, idbtrans) {
            // Upgrade version to version, step-by-step from oldest to newest version.
            // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)
            var queue = [];
            var oldVersionStruct = versions.filter(function (version) {
                return version._cfg.version === oldVersion;
            })[0];
            if (!oldVersionStruct) throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");
            globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;
            var anyContentUpgraderHasRun = false;
            var versToRun = versions.filter(function (v) {
                return v._cfg.version > oldVersion;
            });
            versToRun.forEach(function (version) {
                /// <param name="version" type="Version"></param>
                queue.push(function () {
                    var oldSchema = globalSchema;
                    var newSchema = version._cfg.dbschema;
                    adjustToExistingIndexNames(oldSchema, idbtrans);
                    adjustToExistingIndexNames(newSchema, idbtrans);
                    globalSchema = db._dbSchema = newSchema;
                    var diff = getSchemaDiff(oldSchema, newSchema);
                    // Add tables           
                    diff.add.forEach(function (tuple) {
                        createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                    });
                    // Change tables
                    diff.change.forEach(function (change) {
                        if (change.recreate) {
                            throw new exceptions.Upgrade("Not yet support for changing primary key");
                        } else {
                            var store = idbtrans.objectStore(change.name);
                            // Add indexes
                            change.add.forEach(function (idx) {
                                addIndex(store, idx);
                            });
                            // Update indexes
                            change.change.forEach(function (idx) {
                                store.deleteIndex(idx.name);
                                addIndex(store, idx);
                            });
                            // Delete indexes
                            change.del.forEach(function (idxName) {
                                store.deleteIndex(idxName);
                            });
                        }
                    });
                    if (version._cfg.contentUpgrade) {
                        anyContentUpgraderHasRun = true;
                        return Promise.follow(function () {
                            version._cfg.contentUpgrade(trans);
                        });
                    }
                });
                queue.push(function (idbtrans) {
                    if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
                        var newSchema = version._cfg.dbschema;
                        // Delete old tables
                        deleteRemovedTables(newSchema, idbtrans);
                    }
                });
            });
            // Now, create a queue execution engine
            function runQueue() {
                return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : Promise.resolve();
            }
            return runQueue().then(function () {
                createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)
            });
        }
        function getSchemaDiff(oldSchema, newSchema) {
            var diff = {
                del: [],
                add: [],
                change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}
            };
            for (var table in oldSchema) {
                if (!newSchema[table]) diff.del.push(table);
            }
            for (table in newSchema) {
                var oldDef = oldSchema[table],
                    newDef = newSchema[table];
                if (!oldDef) {
                    diff.add.push([table, newDef]);
                } else {
                    var change = {
                        name: table,
                        def: newDef,
                        recreate: false,
                        del: [],
                        add: [],
                        change: []
                    };
                    if (oldDef.primKey.src !== newDef.primKey.src) {
                        // Primary key has changed. Remove and re-add table.
                        change.recreate = true;
                        diff.change.push(change);
                    } else {
                        // Same primary key. Just find out what differs:
                        var oldIndexes = oldDef.idxByName;
                        var newIndexes = newDef.idxByName;
                        for (var idxName in oldIndexes) {
                            if (!newIndexes[idxName]) change.del.push(idxName);
                        }
                        for (idxName in newIndexes) {
                            var oldIdx = oldIndexes[idxName],
                                newIdx = newIndexes[idxName];
                            if (!oldIdx) change.add.push(newIdx);else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);
                        }
                        if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                            diff.change.push(change);
                        }
                    }
                }
            }
            return diff;
        }
        function createTable(idbtrans, tableName, primKey, indexes) {
            /// <param name="idbtrans" type="IDBTransaction"></param>
            var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
            indexes.forEach(function (idx) {
                addIndex(store, idx);
            });
            return store;
        }
        function createMissingTables(newSchema, idbtrans) {
            keys(newSchema).forEach(function (tableName) {
                if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                    createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
                }
            });
        }
        function deleteRemovedTables(newSchema, idbtrans) {
            for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
                var storeName = idbtrans.db.objectStoreNames[i];
                if (newSchema[storeName] == null) {
                    idbtrans.db.deleteObjectStore(storeName);
                }
            }
        }
        function addIndex(store, idx) {
            store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
        }
        //
        //
        //      Dexie Protected API
        //
        //
        this._allTables = allTables;
        this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {
            return new Transaction(mode, storeNames, dbschema, parentTransaction);
        };
        /* Generate a temporary transaction when db operations are done outside a transaction scope.
        */
        function tempTransaction(mode, storeNames, fn) {
            if (!openComplete && !PSD.letThrough) {
                if (!isBeingOpened) {
                    if (!autoOpen) return rejection(new exceptions.DatabaseClosed());
                    db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
                }
                return dbReadyPromise.then(function () {
                    return tempTransaction(mode, storeNames, fn);
                });
            } else {
                var trans = db._createTransaction(mode, storeNames, globalSchema);
                try {
                    trans.create();
                } catch (ex) {
                    return rejection(ex);
                }
                return trans._promise(mode, function (resolve, reject) {
                    return newScope(function () {
                        PSD.trans = trans;
                        return fn(resolve, reject, trans);
                    });
                }).then(function (result) {
                    // Instead of resolving value directly, wait with resolving it until transaction has completed.
                    // Otherwise the data would not be in the DB if requesting it in the then() operation.
                    // Specifically, to ensure that the following expression will work:
                    //
                    //   db.friends.put({name: "Arne"}).then(function () {
                    //       db.friends.where("name").equals("Arne").count(function(count) {
                    //           assert (count === 1);
                    //       });
                    //   });
                    //
                    return trans._completion.then(function () {
                        return result;
                    });
                }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.
                    trans._reject(err);
                    return rejection(err);
                    });*/
            }
        }
        this._whenReady = function (fn) {
            return openComplete || PSD.letThrough ? fn() : new Promise(function (resolve, reject) {
                if (!isBeingOpened) {
                    if (!autoOpen) {
                        reject(new exceptions.DatabaseClosed());
                        return;
                    }
                    db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
                }
                dbReadyPromise.then(resolve, reject);
            }).then(fn);
        };
        //
        //
        //
        //
        //      Dexie API
        //
        //
        //
        this.verno = 0;
        this.open = function () {
            if (isBeingOpened || idbdb) return dbReadyPromise.then(function () {
                return dbOpenError ? rejection(dbOpenError) : db;
            });
            debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.
            isBeingOpened = true;
            dbOpenError = null;
            openComplete = false;
            // Function pointers to call when the core opening process completes.
            var resolveDbReady = dbReadyResolve,

            // upgradeTransaction to abort on failure.
            upgradeTransaction = null;
            return Promise.race([openCanceller, new Promise(function (resolve, reject) {
                // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:
                // IE fails when deleting objectStore after reading from it.
                // A future version of Dexie.js will stopover an intermediate version to workaround this.
                // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.
                // If no API, throw!
                if (!indexedDB) throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " + "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");
                var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));
                if (!req) throw new exceptions.MissingAPI("IndexedDB API not available"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134
                req.onerror = eventRejectHandler(reject);
                req.onblocked = wrap(fireOnBlocked);
                req.onupgradeneeded = wrap(function (e) {
                    upgradeTransaction = req.transaction;
                    if (autoSchema && !db._allowEmptyDB) {
                        // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.
                        // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we
                        // do not create a new database by accident here.
                        req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!
                        upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)
                        // Close database and delete it.
                        req.result.close();
                        var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!
                        delreq.onsuccess = delreq.onerror = wrap(function () {
                            reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
                        });
                    } else {
                        upgradeTransaction.onerror = eventRejectHandler(reject);
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.
                        runUpgraders(oldVer / 10, upgradeTransaction, reject, req);
                    }
                }, reject);
                req.onsuccess = wrap(function () {
                    // Core opening procedure complete. Now let's just record some stuff.
                    upgradeTransaction = null;
                    idbdb = req.result;
                    connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.
                    if (autoSchema) readGlobalSchema();else if (idbdb.objectStoreNames.length > 0) {
                        try {
                            adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));
                        } catch (e) {
                            // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.
                        }
                    }
                    idbdb.onversionchange = wrap(function (ev) {
                        db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)
                        db.on("versionchange").fire(ev);
                    });
                    if (!hasNativeGetDatabaseNames && dbName !== '__dbnames') {
                        dbNamesDB.dbnames.put({ name: dbName }).catch(nop);
                    }
                    resolve();
                }, reject);
            })]).then(function () {
                // Before finally resolving the dbReadyPromise and this promise,
                // call and await all on('ready') subscribers:
                // Dexie.vip() makes subscribers able to use the database while being opened.
                // This is a must since these subscribers take part of the opening procedure.
                onReadyBeingFired = [];
                return Promise.resolve(Dexie.vip(db.on.ready.fire)).then(function fireRemainders() {
                    if (onReadyBeingFired.length > 0) {
                        // In case additional subscribers to db.on('ready') were added during the time db.on.ready.fire was executed.
                        var remainders = onReadyBeingFired.reduce(promisableChain, nop);
                        onReadyBeingFired = [];
                        return Promise.resolve(Dexie.vip(remainders)).then(fireRemainders);
                    }
                });
            }).finally(function () {
                onReadyBeingFired = null;
            }).then(function () {
                // Resolve the db.open() with the db instance.
                isBeingOpened = false;
                return db;
            }).catch(function (err) {
                try {
                    // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.
                    upgradeTransaction && upgradeTransaction.abort();
                } catch (e) {}
                isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).
                db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.
                // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.
                dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.
                return rejection(dbOpenError);
            }).finally(function () {
                openComplete = true;
                resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.
            });
        };
        this.close = function () {
            var idx = connections.indexOf(db);
            if (idx >= 0) connections.splice(idx, 1);
            if (idbdb) {
                try {
                    idbdb.close();
                } catch (e) {}
                idbdb = null;
            }
            autoOpen = false;
            dbOpenError = new exceptions.DatabaseClosed();
            if (isBeingOpened) cancelOpen(dbOpenError);
            // Reset dbReadyPromise promise:
            dbReadyPromise = new Promise(function (resolve) {
                dbReadyResolve = resolve;
            });
            openCanceller = new Promise(function (_, reject) {
                cancelOpen = reject;
            });
        };
        this.delete = function () {
            var hasArguments = arguments.length > 0;
            return new Promise(function (resolve, reject) {
                if (hasArguments) throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
                if (isBeingOpened) {
                    dbReadyPromise.then(doDelete);
                } else {
                    doDelete();
                }
                function doDelete() {
                    db.close();
                    var req = indexedDB.deleteDatabase(dbName);
                    req.onsuccess = wrap(function () {
                        if (!hasNativeGetDatabaseNames) {
                            dbNamesDB.dbnames.delete(dbName).catch(nop);
                        }
                        resolve();
                    });
                    req.onerror = eventRejectHandler(reject);
                    req.onblocked = fireOnBlocked;
                }
            });
        };
        this.backendDB = function () {
            return idbdb;
        };
        this.isOpen = function () {
            return idbdb !== null;
        };
        this.hasBeenClosed = function () {
            return dbOpenError && dbOpenError instanceof exceptions.DatabaseClosed;
        };
        this.hasFailed = function () {
            return dbOpenError !== null;
        };
        this.dynamicallyOpened = function () {
            return autoSchema;
        };
        //
        // Properties
        //
        this.name = dbName;
        // db.tables - an array of all Table instances.
        props(this, {
            tables: {
                get: function get() {
                    /// <returns type="Array" elementType="Table" />
                    return keys(allTables).map(function (name) {
                        return allTables[name];
                    });
                }
            }
        });
        //
        // Events
        //
        this.on = Events(this, "populate", "blocked", "versionchange", { ready: [promisableChain, nop] });
        this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
            return function (subscriber, bSticky) {
                Dexie.vip(function () {
                    if (openComplete) {
                        // Database already open. Call subscriber asap.
                        if (!dbOpenError) Promise.resolve().then(subscriber);
                        // bSticky: Also subscribe to future open sucesses (after close / reopen) 
                        if (bSticky) subscribe(subscriber);
                    } else if (onReadyBeingFired) {
                        // db.on('ready') subscribers are currently being executed and have not yet resolved or rejected
                        onReadyBeingFired.push(subscriber);
                        if (bSticky) subscribe(subscriber);
                    } else {
                        // Database not yet open. Subscribe to it.
                        subscribe(subscriber);
                        // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.
                        if (!bSticky) subscribe(function unsubscribe() {
                            db.on.ready.unsubscribe(subscriber);
                            db.on.ready.unsubscribe(unsubscribe);
                        });
                    }
                });
            };
        });
        this.transaction = function () {
            /// <summary>
            ///
            /// </summary>
            /// <param name="mode" type="String">"r" for readonly, or "rw" for readwrite</param>
            /// <param name="tableInstances">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>
            /// <param name="scopeFunc" type="Function">Function to execute with transaction</param>
            var args = extractTransactionArgs.apply(this, arguments);
            return this._transaction.apply(this, args);
        };
        function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
            // Let table arguments be all arguments between mode and last argument.
            var i = arguments.length;
            if (i < 2) throw new exceptions.InvalidArgument("Too few arguments");
            // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)
            // and clone arguments except the first one into local var 'args'.
            var args = new Array(i - 1);
            while (--i) {
                args[i - 1] = arguments[i];
            } // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.
            scopeFunc = args.pop();
            var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.
            return [mode, tables, scopeFunc];
        }
        this._transaction = function (mode, tables, scopeFunc) {
            var parentTransaction = PSD.trans;
            // Check if parent transactions is bound to this db instance, and if caller wants to reuse it
            if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1) parentTransaction = null;
            var onlyIfCompatible = mode.indexOf('?') !== -1;
            mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.
            try {
                //
                // Get storeNames from arguments. Either through given table instances, or through given table names.
                //
                var storeNames = tables.map(function (table) {
                    var storeName = table instanceof Table ? table.name : table;
                    if (typeof storeName !== 'string') throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                    return storeName;
                });
                //
                // Resolve mode. Allow shortcuts "r" and "rw".
                //
                if (mode == "r" || mode == READONLY) mode = READONLY;else if (mode == "rw" || mode == READWRITE) mode = READWRITE;else throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
                if (parentTransaction) {
                    // Basic checks
                    if (parentTransaction.mode === READONLY && mode === READWRITE) {
                        if (onlyIfCompatible) {
                            // Spawn new transaction instead.
                            parentTransaction = null;
                        } else throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                    }
                    if (parentTransaction) {
                        storeNames.forEach(function (storeName) {
                            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                                if (onlyIfCompatible) {
                                    // Spawn new transaction instead.
                                    parentTransaction = null;
                                } else throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
                            }
                        });
                    }
                    if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                        // '?' mode should not keep using an inactive transaction.
                        parentTransaction = null;
                    }
                }
            } catch (e) {
                return parentTransaction ? parentTransaction._promise(null, function (_, reject) {
                    reject(e);
                }) : rejection(e);
            }
            // If this is a sub-transaction, lock the parent and then launch the sub-transaction.
            return parentTransaction ? parentTransaction._promise(mode, enterTransactionScope, "lock") : PSD.trans ?
            // no parent transaction despite PSD.trans exists. Make sure also
            // that the zone we create is not a sub-zone of current, because
            // Promise.follow() should not wait for it if so.
            usePSD(PSD.transless, function () {
                return db._whenReady(enterTransactionScope);
            }) : db._whenReady(enterTransactionScope);
            function enterTransactionScope() {
                return Promise.resolve().then(function () {
                    // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().
                    var transless = PSD.transless || PSD;
                    // Our transaction.
                    //return new Promise((resolve, reject) => {
                    var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);
                    // Let the transaction instance be part of a Promise-specific data (PSD) value.
                    var zoneProps = {
                        trans: trans,
                        transless: transless
                    };
                    if (parentTransaction) {
                        // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)
                        trans.idbtrans = parentTransaction.idbtrans;
                    } else {
                        trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.
                    }
                    // Support for native async await.
                    if (scopeFunc.constructor === AsyncFunction) {
                        incrementExpectedAwaits();
                    }
                    var returnValue;
                    var promiseFollowed = Promise.follow(function () {
                        // Finally, call the scope function with our table and transaction arguments.
                        returnValue = scopeFunc.call(trans, trans);
                        if (returnValue) {
                            if (returnValue.constructor === NativePromise) {
                                var decrementor = decrementExpectedAwaits.bind(null, null);
                                returnValue.then(decrementor, decrementor);
                            } else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                                // scopeFunc returned an iterator with throw-support. Handle yield as await.
                                returnValue = awaitIterator(returnValue);
                            }
                        }
                    }, zoneProps);
                    return (returnValue && typeof returnValue.then === 'function' ?
                    // Promise returned. User uses promise-style transactions.
                    Promise.resolve(returnValue).then(function (x) {
                        return trans.active ? x // Transaction still active. Continue.
                        : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
                    })
                    // No promise returned. Wait for all outstanding promises before continuing. 
                    : promiseFollowed.then(function () {
                        return returnValue;
                    })).then(function (x) {
                        // sub transactions don't react to idbtrans.oncomplete. We must trigger a completion:
                        if (parentTransaction) trans._resolve();
                        // wait for trans._completion
                        // (if root transaction, this means 'complete' event. If sub-transaction, we've just fired it ourselves)
                        return trans._completion.then(function () {
                            return x;
                        });
                    }).catch(function (e) {
                        trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!
                        return rejection(e);
                    });
                });
            }
        };
        this.table = function (tableName) {
            /// <returns type="Table"></returns>
            if (!hasOwn(allTables, tableName)) {
                throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
            }
            return allTables[tableName];
        };
        //
        //
        //
        // Table Class
        //
        //
        //
        function Table(name, tableSchema, optionalTrans) {
            /// <param name="name" type="String"></param>
            this.name = name;
            this.schema = tableSchema;
            this._tx = optionalTrans;
            this.hook = allTables[name] ? allTables[name].hook : Events(null, {
                "creating": [hookCreatingChain, nop],
                "reading": [pureFunctionChain, mirror],
                "updating": [hookUpdatingChain, nop],
                "deleting": [hookDeletingChain, nop]
            });
        }
        function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {
            return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {
                errorList.push(e);
                done && done();
            });
        }
        function _bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {
            // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],
            // else keysOrTuples must be just an array of keys: [key1, key2, ...].
            return new Promise(function (resolve, reject) {
                var len = keysOrTuples.length,
                    lastItem = len - 1;
                if (len === 0) return resolve();
                if (!hasDeleteHook) {
                    for (var i = 0; i < len; ++i) {
                        var req = idbstore.delete(keysOrTuples[i]);
                        req.onerror = eventRejectHandler(reject);
                        if (i === lastItem) req.onsuccess = wrap(function () {
                            return resolve();
                        });
                    }
                } else {
                    var hookCtx,
                        errorHandler = hookedEventRejectHandler(reject),
                        successHandler = hookedEventSuccessHandler(null);
                    tryCatch(function () {
                        for (var i = 0; i < len; ++i) {
                            hookCtx = { onsuccess: null, onerror: null };
                            var tuple = keysOrTuples[i];
                            deletingHook.call(hookCtx, tuple[0], tuple[1], trans);
                            var req = idbstore.delete(tuple[0]);
                            req._hookCtx = hookCtx;
                            req.onerror = errorHandler;
                            if (i === lastItem) req.onsuccess = hookedEventSuccessHandler(resolve);else req.onsuccess = successHandler;
                        }
                    }, function (err) {
                        hookCtx.onerror && hookCtx.onerror(err);
                        throw err;
                    });
                }
            });
        }
        props(Table.prototype, {
            //
            // Table Protected Methods
            //
            _trans: function getTransaction(mode, fn, writeLocked) {
                var trans = this._tx || PSD.trans;
                return trans && trans.db === db ? trans === PSD.trans ? trans._promise(mode, fn, writeLocked) : newScope(function () {
                    return trans._promise(mode, fn, writeLocked);
                }, { trans: trans, transless: PSD.transless || PSD }) : tempTransaction(mode, [this.name], fn);
            },
            _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {
                var tableName = this.name;
                function supplyIdbStore(resolve, reject, trans) {
                    if (trans.storeNames.indexOf(tableName) === -1) throw new exceptions.NotFound("Table" + tableName + " not part of transaction");
                    return fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);
                }
                return this._trans(mode, supplyIdbStore, writeLocked);
            },
            //
            // Table Public Methods
            //
            get: function get(keyOrCrit, cb) {
                if (keyOrCrit && keyOrCrit.constructor === Object) return this.where(keyOrCrit).first(cb);
                var self = this;
                return this._idbstore(READONLY, function (resolve, reject, idbstore) {
                    var req = idbstore.get(keyOrCrit);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function () {
                        resolve(self.hook.reading.fire(req.result));
                    }, reject);
                }).then(cb);
            },
            where: function where(indexOrCrit) {
                if (typeof indexOrCrit === 'string') return new WhereClause(this, indexOrCrit);
                if (isArray(indexOrCrit)) return new WhereClause(this, "[" + indexOrCrit.join('+') + "]");
                // indexOrCrit is an object map of {[keyPath]:value} 
                var keyPaths = keys(indexOrCrit);
                if (keyPaths.length === 1)
                    // Only one critera. This was the easy case:
                    return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
                // Multiple criterias.
                // Let's try finding a compound index that matches all keyPaths in
                // arbritary order:
                var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {
                    return ix.compound && keyPaths.every(function (keyPath) {
                        return ix.keyPath.indexOf(keyPath) >= 0;
                    }) && ix.keyPath.every(function (keyPath) {
                        return keyPaths.indexOf(keyPath) >= 0;
                    });
                })[0];
                if (compoundIndex && maxKey !== maxString)
                    // Cool! We found such compound index
                    // and this browser supports compound indexes (maxKey !== maxString)!
                    return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map(function (kp) {
                        return indexOrCrit[kp];
                    }));
                if (!compoundIndex) console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " + ("compound index [" + keyPaths.join('+') + "]"));
                // Ok, now let's fallback to finding at least one matching index
                // and filter the rest.
                var idxByName = this.schema.idxByName;
                var simpleIndex = keyPaths.reduce(function (r, keyPath) {
                    return [r[0] || idxByName[keyPath], r[0] || !idxByName[keyPath] ? combine(r[1], function (x) {
                        return '' + getByKeyPath(x, keyPath) == '' + indexOrCrit[keyPath];
                    }) : r[1]];
                }, [null, null]);
                var idx = simpleIndex[0];
                return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(simpleIndex[1]) : compoundIndex ? this.filter(simpleIndex[1]) : // Has compound but browser bad. Allow filter.
                this.where(keyPaths).equals(''); // No index at all. Fail lazily.
            },
            count: function count(cb) {
                return this.toCollection().count(cb);
            },
            offset: function offset(_offset) {
                return this.toCollection().offset(_offset);
            },
            limit: function limit(numRows) {
                return this.toCollection().limit(numRows);
            },
            reverse: function reverse() {
                return this.toCollection().reverse();
            },
            filter: function filter(filterFunction) {
                return this.toCollection().and(filterFunction);
            },
            each: function each(fn) {
                return this.toCollection().each(fn);
            },
            toArray: function toArray(cb) {
                return this.toCollection().toArray(cb);
            },
            orderBy: function orderBy(index) {
                return new Collection(new WhereClause(this, isArray(index) ? "[" + index.join('+') + "]" : index));
            },
            toCollection: function toCollection() {
                return new Collection(new WhereClause(this));
            },
            mapToClass: function mapToClass(constructor, structure) {
                /// <summary>
                ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making
                ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.
                /// </summary>
                /// <param name="constructor">Constructor function representing the class.</param>
                /// <param name="structure" optional="true">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
                /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>
                this.schema.mappedClass = constructor;
                var instanceTemplate = Object.create(constructor.prototype);
                if (structure) {
                    // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.
                    applyStructure(instanceTemplate, structure);
                }
                this.schema.instanceTemplate = instanceTemplate;
                // Now, subscribe to the when("reading") event to make all objects that come out from this table inherit from given class
                // no matter which method to use for reading (Table.get() or Table.where(...)... )
                var readHook = function readHook(obj) {
                    if (!obj) return obj; // No valid object. (Value is null). Return as is.
                    // Create a new object that derives from constructor:
                    var res = Object.create(constructor.prototype);
                    // Clone members:
                    for (var m in obj) {
                        if (hasOwn(obj, m)) try {
                            res[m] = obj[m];
                        } catch (_) {}
                    }return res;
                };
                if (this.schema.readHook) {
                    this.hook.reading.unsubscribe(this.schema.readHook);
                }
                this.schema.readHook = readHook;
                this.hook("reading", readHook);
                return constructor;
            },
            defineClass: function defineClass(structure) {
                /// <summary>
                ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database
                ///     as well as making it possible to extend the prototype of the returned constructor function.
                /// </summary>
                /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
                /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>
                return this.mapToClass(Dexie.defineClass(structure), structure);
            },
            bulkDelete: function bulkDelete(keys$$1) {
                if (this.hook.deleting.fire === nop) {
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                        resolve(_bulkDelete(idbstore, trans, keys$$1, false, nop));
                    });
                } else {
                    return this.where(':id').anyOf(keys$$1).delete().then(function () {}); // Resolve with undefined.
                }
            },
            bulkPut: function bulkPut(objects, keys$$1) {
                var _this = this;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                    if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");
                    if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                    if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                    if (objects.length === 0) return resolve(); // Caller provided empty list.
                    var done = function done(result) {
                        if (errorList.length === 0) resolve(result);else reject(new BulkError(_this.name + ".bulkPut(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
                    };
                    var req,
                        errorList = [],
                        errorHandler,
                        numObjs = objects.length,
                        table = _this;
                    if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {
                        //
                        // Standard Bulk (no 'creating' or 'updating' hooks to care about)
                        //
                        errorHandler = BulkErrorHandlerCatchAll(errorList);
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);
                            req.onerror = errorHandler;
                        }
                        // Only need to catch success or error on the last operation
                        // according to the IDB spec.
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                        req.onsuccess = eventSuccessHandler(done);
                    } else {
                        var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) {
                            return getByKeyPath(o, idbstore.keyPath);
                        });
                        // Generate map of {[key]: object}
                        var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) {
                            return key != null && [key, objects[i]];
                        });
                        var promise = !effectiveKeys ?
                        // Auto-incremented key-less objects only without any keys argument.
                        table.bulkAdd(objects) :
                        // Keys provided. Either as inbound in provided objects, or as a keys argument.
                        // Begin with updating those that exists in DB:
                        table.where(':id').anyOf(effectiveKeys.filter(function (key) {
                            return key != null;
                        })).modify(function () {
                            this.value = objectLookup[this.primKey];
                            objectLookup[this.primKey] = null; // Mark as "don't add this"
                        }).catch(ModifyError, function (e) {
                            errorList = e.failures; // No need to concat here. These are the first errors added.
                        }).then(function () {
                            // Now, let's examine which items didnt exist so we can add them:
                            var objsToAdd = [],
                                keysToAdd = keys$$1 && [];
                            // Iterate backwards. Why? Because if same key was used twice, just add the last one.
                            for (var i = effectiveKeys.length - 1; i >= 0; --i) {
                                var key = effectiveKeys[i];
                                if (key == null || objectLookup[key]) {
                                    objsToAdd.push(objects[i]);
                                    keys$$1 && keysToAdd.push(key);
                                    if (key != null) objectLookup[key] = null; // Mark as "dont add again"
                                }
                            }
                            // The items are in reverse order so reverse them before adding.
                            // Could be important in order to get auto-incremented keys the way the caller
                            // would expect. Could have used unshift instead of push()/reverse(),
                            // but: http://jsperf.com/unshift-vs-reverse
                            objsToAdd.reverse();
                            keys$$1 && keysToAdd.reverse();
                            return table.bulkAdd(objsToAdd, keysToAdd);
                        }).then(function (lastAddedKey) {
                            // Resolve with key of the last object in given arguments to bulkPut():
                            var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.
                            return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;
                        });
                        promise.then(done).catch(BulkError, function (e) {
                            // Concat failure from ModifyError and reject using our 'done' method.
                            errorList = errorList.concat(e.failures);
                            done();
                        }).catch(reject);
                    }
                }, "locked"); // If called from transaction scope, lock transaction til all steps are done.
            },
            bulkAdd: function bulkAdd(objects, keys$$1) {
                var self = this,
                    creatingHook = this.hook.creating.fire;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1) throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");
                    if (idbstore.keyPath && keys$$1) throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                    if (keys$$1 && keys$$1.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                    if (objects.length === 0) return resolve(); // Caller provided empty list.
                    function done(result) {
                        if (errorList.length === 0) resolve(result);else reject(new BulkError(self.name + ".bulkAdd(): " + errorList.length + " of " + numObjs + " operations failed", errorList));
                    }
                    var req,
                        errorList = [],
                        errorHandler,
                        successHandler,
                        numObjs = objects.length;
                    if (creatingHook !== nop) {
                        //
                        // There are subscribers to hook('creating')
                        // Must behave as documented.
                        //
                        var keyPath = idbstore.keyPath,
                            hookCtx;
                        errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);
                        successHandler = hookedEventSuccessHandler(null);
                        tryCatch(function () {
                            for (var i = 0, l = objects.length; i < l; ++i) {
                                hookCtx = { onerror: null, onsuccess: null };
                                var key = keys$$1 && keys$$1[i];
                                var obj = objects[i],
                                    effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined,
                                    keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);
                                if (effectiveKey == null && keyToUse != null) {
                                    if (keyPath) {
                                        obj = deepClone(obj);
                                        setByKeyPath(obj, keyPath, keyToUse);
                                    } else {
                                        key = keyToUse;
                                    }
                                }
                                req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                                req._hookCtx = hookCtx;
                                if (i < l - 1) {
                                    req.onerror = errorHandler;
                                    if (hookCtx.onsuccess) req.onsuccess = successHandler;
                                }
                            }
                        }, function (err) {
                            hookCtx.onerror && hookCtx.onerror(err);
                            throw err;
                        });
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);
                        req.onsuccess = hookedEventSuccessHandler(done);
                    } else {
                        //
                        // Standard Bulk (no 'creating' hook to care about)
                        //
                        errorHandler = BulkErrorHandlerCatchAll(errorList);
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);
                            req.onerror = errorHandler;
                        }
                        // Only need to catch success or error on the last operation
                        // according to the IDB spec.
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                        req.onsuccess = eventSuccessHandler(done);
                    }
                });
            },
            add: function add(obj, key) {
                /// <summary>
                ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.
                /// </summary>
                /// <param name="obj" type="Object">A javascript object to insert</param>
                /// <param name="key" optional="true">Primary key</param>
                var creatingHook = this.hook.creating.fire;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    var hookCtx = { onsuccess: null, onerror: null };
                    if (creatingHook !== nop) {
                        var effectiveKey = key != null ? key : idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined;
                        var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when("creating") to generate the key.
                        if (effectiveKey == null && keyToUse != null) {
                            if (idbstore.keyPath) setByKeyPath(obj, idbstore.keyPath, keyToUse);else key = keyToUse;
                        }
                    }
                    try {
                        var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                        req._hookCtx = hookCtx;
                        req.onerror = hookedEventRejectHandler(reject);
                        req.onsuccess = hookedEventSuccessHandler(function (result) {
                            // TODO: Remove these two lines in next major release (2.0?)
                            // It's no good practice to have side effects on provided parameters
                            var keyPath = idbstore.keyPath;
                            if (keyPath) setByKeyPath(obj, keyPath, result);
                            resolve(result);
                        });
                    } catch (e) {
                        if (hookCtx.onerror) hookCtx.onerror(e);
                        throw e;
                    }
                });
            },
            put: function put(obj, key) {
                var _this = this;
                /// <summary>
                ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.
                /// </summary>
                /// <param name="obj" type="Object">A javascript object to insert or update</param>
                /// <param name="key" optional="true">Primary key</param>
                var creatingHook = this.hook.creating.fire,
                    updatingHook = this.hook.updating.fire;
                if (creatingHook !== nop || updatingHook !== nop) {
                    //
                    // People listens to when("creating") or when("updating") events!
                    // We must know whether the put operation results in an CREATE or UPDATE.
                    //
                    var keyPath = this.schema.primKey.keyPath;
                    var effectiveKey = key !== undefined ? key : keyPath && getByKeyPath(obj, keyPath);
                    if (effectiveKey == null) return this.add(obj);
                    // Since key is optional, make sure we get it from obj if not provided
                    // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().
                    // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.
                    obj = deepClone(obj);
                    return this._trans(READWRITE, function () {
                        return _this.where(":id").equals(effectiveKey).modify(function () {
                            // Replace extisting value with our object
                            // CRUD event firing handled in Collection.modify()
                            this.value = obj;
                        }).then(function (count) {
                            return count === 0 ? _this.add(obj, key) : effectiveKey;
                        });
                    }, "locked"); // Lock needed because operation is splitted into modify() and add().
                } else {
                    // Use the standard IDB put() method.
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = wrap(function (ev) {
                            var keyPath = idbstore.keyPath;
                            if (keyPath) setByKeyPath(obj, keyPath, ev.target.result);
                            resolve(req.result);
                        });
                    });
                }
            },
            'delete': function _delete(key) {
                /// <param name="key">Primary key of the object to delete</param>
                if (this.hook.deleting.subscribers.length) {
                    // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
                    // call the CRUD event. Only Collection.delete() will know whether an object was actually deleted.
                    return this.where(":id").equals(key).delete();
                } else {
                    // No one listens. Use standard IDB delete() method.
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = idbstore.delete(key);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = wrap(function () {
                            resolve(req.result);
                        });
                    });
                }
            },
            clear: function clear() {
                if (this.hook.deleting.subscribers.length) {
                    // People listens to when("deleting") event. Must implement delete using Collection.delete() that will
                    // call the CRUD event. Only Collection.delete() will knows which objects that are actually deleted.
                    return this.toCollection().delete();
                } else {
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = idbstore.clear();
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = wrap(function () {
                            resolve(req.result);
                        });
                    });
                }
            },
            update: function update(keyOrObject, modifications) {
                if ((typeof modifications === 'undefined' ? 'undefined' : _typeof(modifications)) !== 'object' || isArray(modifications)) throw new exceptions.InvalidArgument("Modifications must be an object.");
                if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && !isArray(keyOrObject)) {
                    // object to modify. Also modify given object with the modifications:
                    keys(modifications).forEach(function (keyPath) {
                        setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                    });
                    var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                    if (key === undefined) return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
                    return this.where(":id").equals(key).modify(modifications);
                } else {
                    // key to modify
                    return this.where(":id").equals(keyOrObject).modify(modifications);
                }
            }
        });
        //
        //
        //
        // Transaction Class
        //
        //
        //
        function Transaction(mode, storeNames, dbschema, parent) {
            var _this = this;
            /// <summary>
            ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.
            /// </summary>
            /// <param name="mode" type="String">Any of "readwrite" or "readonly"</param>
            /// <param name="storeNames" type="Array">Array of table names to operate on</param>
            this.db = db;
            this.mode = mode;
            this.storeNames = storeNames;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._resolve = null;
            this._reject = null;
            this._waitingFor = null;
            this._waitingQueue = null;
            this._spinCount = 0; // Just for debugging waitFor()
            this._completion = new Promise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
            });
            this._completion.then(function () {
                _this.active = false;
                _this.on.complete.fire();
            }, function (e) {
                var wasActive = _this.active;
                _this.active = false;
                _this.on.error.fire(e);
                _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
                return rejection(e); // Indicate we actually DO NOT catch this error.
            });
        }
        props(Transaction.prototype, {
            //
            // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)
            //
            _lock: function _lock() {
                assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
                // Temporary set all requests into a pending queue if they are called before database is ready.
                ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)
                if (this._reculock === 1 && !PSD.global) PSD.lockOwnerFor = this;
                return this;
            },
            _unlock: function _unlock() {
                assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
                if (--this._reculock === 0) {
                    if (!PSD.global) PSD.lockOwnerFor = null;
                    while (this._blockedFuncs.length > 0 && !this._locked()) {
                        var fnAndPSD = this._blockedFuncs.shift();
                        try {
                            usePSD(fnAndPSD[1], fnAndPSD[0]);
                        } catch (e) {}
                    }
                }
                return this;
            },
            _locked: function _locked() {
                // Checks if any write-lock is applied on this transaction.
                // To simplify the Dexie API for extension implementations, we support recursive locks.
                // This is accomplished by using "Promise Specific Data" (PSD).
                // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).
                // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():
                //         * callback given to the Promise() constructor  (function (resolve, reject){...})
                //         * callbacks given to then()/catch()/finally() methods (function (value){...})
                // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.
                // Derivation is done so that the inner PSD __proto__ points to the outer PSD.
                // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.
                return this._reculock && PSD.lockOwnerFor !== this;
            },
            create: function create(idbtrans) {
                var _this = this;
                if (!this.mode) return this;
                assert(!this.idbtrans);
                if (!idbtrans && !idbdb) {
                    switch (dbOpenError && dbOpenError.name) {
                        case "DatabaseClosedError":
                            // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                            throw new exceptions.DatabaseClosed(dbOpenError);
                        case "MissingAPIError":
                            // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                            throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                        default:
                            // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!
                            throw new exceptions.OpenFailed(dbOpenError);
                    }
                }
                if (!this.active) throw new exceptions.TransactionInactive();
                assert(this._completion._state === null);
                idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
                idbtrans.onerror = wrap(function (ev) {
                    preventDefault(ev); // Prohibit default bubbling to window.error
                    _this._reject(idbtrans.error);
                });
                idbtrans.onabort = wrap(function (ev) {
                    preventDefault(ev);
                    _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
                    _this.active = false;
                    _this.on("abort").fire(ev);
                });
                idbtrans.oncomplete = wrap(function () {
                    _this.active = false;
                    _this._resolve();
                });
                return this;
            },
            _promise: function _promise(mode, fn, bWriteLock) {
                var _this = this;
                if (mode === READWRITE && this.mode !== READWRITE) return rejection(new exceptions.ReadOnly("Transaction is readonly"));
                if (!this.active) return rejection(new exceptions.TransactionInactive());
                if (this._locked()) {
                    return new Promise(function (resolve, reject) {
                        _this._blockedFuncs.push([function () {
                            _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                        }, PSD]);
                    });
                } else if (bWriteLock) {
                    return newScope(function () {
                        var p = new Promise(function (resolve, reject) {
                            _this._lock();
                            var rv = fn(resolve, reject, _this);
                            if (rv && rv.then) rv.then(resolve, reject);
                        });
                        p.finally(function () {
                            return _this._unlock();
                        });
                        p._lib = true;
                        return p;
                    });
                } else {
                    var p = new Promise(function (resolve, reject) {
                        var rv = fn(resolve, reject, _this);
                        if (rv && rv.then) rv.then(resolve, reject);
                    });
                    p._lib = true;
                    return p;
                }
            },
            _root: function _root() {
                return this.parent ? this.parent._root() : this;
            },
            waitFor: function waitFor(promise) {
                // Always operate on the root transaction (in case this is a sub stransaction)
                var root = this._root();
                // For stability reasons, convert parameter to promise no matter what type is passed to waitFor().
                // (We must be able to call .then() on it.)
                promise = Promise.resolve(promise);
                if (root._waitingFor) {
                    // Already called waitFor(). Wait for both to complete.
                    root._waitingFor = root._waitingFor.then(function () {
                        return promise;
                    });
                } else {
                    // We're not in waiting state. Start waiting state.
                    root._waitingFor = promise;
                    root._waitingQueue = [];
                    // Start interacting with indexedDB until promise completes:
                    var store = root.idbtrans.objectStore(root.storeNames[0]);
                    (function spin() {
                        ++root._spinCount; // For debugging only
                        while (root._waitingQueue.length) {
                            root._waitingQueue.shift()();
                        }if (root._waitingFor) store.get(-Infinity).onsuccess = spin;
                    })();
                }
                var currentWaitPromise = root._waitingFor;
                return new Promise(function (resolve, reject) {
                    promise.then(function (res) {
                        return root._waitingQueue.push(wrap(resolve.bind(null, res)));
                    }, function (err) {
                        return root._waitingQueue.push(wrap(reject.bind(null, err)));
                    }).finally(function () {
                        if (root._waitingFor === currentWaitPromise) {
                            // No one added a wait after us. Safe to stop the spinning.
                            root._waitingFor = null;
                        }
                    });
                });
            },
            //
            // Transaction Public Properties and Methods
            //
            abort: function abort() {
                this.active && this._reject(new exceptions.Abort());
                this.active = false;
            },
            tables: {
                get: deprecated("Transaction.tables", function () {
                    return allTables;
                })
            },
            table: function table(name) {
                var table = db.table(name); // Don't check that table is part of transaction. It must fail lazily!
                return new Table(name, table.schema, this);
            }
        });
        //
        //
        //
        // WhereClause
        //
        //
        //
        function WhereClause(table, index, orCollection) {
            /// <param name="table" type="Table"></param>
            /// <param name="index" type="String" optional="true"></param>
            /// <param name="orCollection" type="Collection" optional="true"></param>
            this._ctx = {
                table: table,
                index: index === ":id" ? null : index,
                or: orCollection
            };
        }
        props(WhereClause.prototype, function () {
            // WhereClause private methods
            function fail(collectionOrWhereClause, err, T) {
                var collection = collectionOrWhereClause instanceof WhereClause ? new Collection(collectionOrWhereClause) : collectionOrWhereClause;
                collection._ctx.error = T ? new T(err) : new TypeError(err);
                return collection;
            }
            function emptyCollection(whereClause) {
                return new Collection(whereClause, function () {
                    return IDBKeyRange.only("");
                }).limit(0);
            }
            function upperFactory(dir) {
                return dir === "next" ? function (s) {
                    return s.toUpperCase();
                } : function (s) {
                    return s.toLowerCase();
                };
            }
            function lowerFactory(dir) {
                return dir === "next" ? function (s) {
                    return s.toLowerCase();
                } : function (s) {
                    return s.toUpperCase();
                };
            }
            function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
                var length = Math.min(key.length, lowerNeedle.length);
                var llp = -1;
                for (var i = 0; i < length; ++i) {
                    var lwrKeyChar = lowerKey[i];
                    if (lwrKeyChar !== lowerNeedle[i]) {
                        if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                        if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                        if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                        return null;
                    }
                    if (cmp(key[i], lwrKeyChar) < 0) llp = i;
                }
                if (length < lowerNeedle.length && dir === "next") return key + upperNeedle.substr(key.length);
                if (length < key.length && dir === "prev") return key.substr(0, upperNeedle.length);
                return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
            }
            function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
                /// <param name="needles" type="Array" elementType="String"></param>
                var upper,
                    lower,
                    compare,
                    upperNeedles,
                    lowerNeedles,
                    direction,
                    nextKeySuffix,
                    needlesLen = needles.length;
                if (!needles.every(function (s) {
                    return typeof s === 'string';
                })) {
                    return fail(whereClause, STRING_EXPECTED);
                }
                function initDirection(dir) {
                    upper = upperFactory(dir);
                    lower = lowerFactory(dir);
                    compare = dir === "next" ? simpleCompare : simpleCompareReverse;
                    var needleBounds = needles.map(function (needle) {
                        return { lower: lower(needle), upper: upper(needle) };
                    }).sort(function (a, b) {
                        return compare(a.lower, b.lower);
                    });
                    upperNeedles = needleBounds.map(function (nb) {
                        return nb.upper;
                    });
                    lowerNeedles = needleBounds.map(function (nb) {
                        return nb.lower;
                    });
                    direction = dir;
                    nextKeySuffix = dir === "next" ? "" : suffix;
                }
                initDirection("next");
                var c = new Collection(whereClause, function () {
                    return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
                });
                c._ondirectionchange = function (direction) {
                    // This event onlys occur before filter is called the first time.
                    initDirection(direction);
                };
                var firstPossibleNeedle = 0;
                c._addAlgorithm(function (cursor, advance, resolve) {
                    /// <param name="cursor" type="IDBCursor"></param>
                    /// <param name="advance" type="Function"></param>
                    /// <param name="resolve" type="Function"></param>
                    var key = cursor.key;
                    if (typeof key !== 'string') return false;
                    var lowerKey = lower(key);
                    if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                        return true;
                    } else {
                        var lowestPossibleCasing = null;
                        for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                            var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                            if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1;else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                                lowestPossibleCasing = casing;
                            }
                        }
                        if (lowestPossibleCasing !== null) {
                            advance(function () {
                                cursor.continue(lowestPossibleCasing + nextKeySuffix);
                            });
                        } else {
                            advance(resolve);
                        }
                        return false;
                    }
                });
                return c;
            }
            //
            // WhereClause public methods
            //
            return {
                between: function between(lower, upper, includeLower, includeUpper) {
                    /// <summary>
                    ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.
                    /// </summary>
                    /// <param name="lower"></param>
                    /// <param name="upper"></param>
                    /// <param name="includeLower" optional="true">Whether items that equals lower should be included. Default true.</param>
                    /// <param name="includeUpper" optional="true">Whether items that equals upper should be included. Default false.</param>
                    /// <returns type="Collection"></returns>
                    includeLower = includeLower !== false; // Default to true
                    includeUpper = includeUpper === true; // Default to false
                    try {
                        if (cmp(lower, upper) > 0 || cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.
                        return new Collection(this, function () {
                            return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper);
                        });
                    } catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                },
                equals: function equals(value) {
                    return new Collection(this, function () {
                        return IDBKeyRange.only(value);
                    });
                },
                above: function above(value) {
                    return new Collection(this, function () {
                        return IDBKeyRange.lowerBound(value, true);
                    });
                },
                aboveOrEqual: function aboveOrEqual(value) {
                    return new Collection(this, function () {
                        return IDBKeyRange.lowerBound(value);
                    });
                },
                below: function below(value) {
                    return new Collection(this, function () {
                        return IDBKeyRange.upperBound(value, true);
                    });
                },
                belowOrEqual: function belowOrEqual(value) {
                    return new Collection(this, function () {
                        return IDBKeyRange.upperBound(value);
                    });
                },
                startsWith: function startsWith(str) {
                    /// <param name="str" type="String"></param>
                    if (typeof str !== 'string') return fail(this, STRING_EXPECTED);
                    return this.between(str, str + maxString, true, true);
                },
                startsWithIgnoreCase: function startsWithIgnoreCase(str) {
                    /// <param name="str" type="String"></param>
                    if (str === "") return this.startsWith(str);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return x.indexOf(a[0]) === 0;
                    }, [str], maxString);
                },
                equalsIgnoreCase: function equalsIgnoreCase(str) {
                    /// <param name="str" type="String"></param>
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return x === a[0];
                    }, [str], "");
                },
                anyOfIgnoreCase: function anyOfIgnoreCase() {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0) return emptyCollection(this);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return a.indexOf(x) !== -1;
                    }, set, "");
                },
                startsWithAnyOfIgnoreCase: function startsWithAnyOfIgnoreCase() {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0) return emptyCollection(this);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return a.some(function (n) {
                            return x.indexOf(n) === 0;
                        });
                    }, set, maxString);
                },
                anyOf: function anyOf() {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    var compare = ascending;
                    try {
                        set.sort(compare);
                    } catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    if (set.length === 0) return emptyCollection(this);
                    var c = new Collection(this, function () {
                        return IDBKeyRange.bound(set[0], set[set.length - 1]);
                    });
                    c._ondirectionchange = function (direction) {
                        compare = direction === "next" ? ascending : descending;
                        set.sort(compare);
                    };
                    var i = 0;
                    c._addAlgorithm(function (cursor, advance, resolve) {
                        var key = cursor.key;
                        while (compare(key, set[i]) > 0) {
                            // The cursor has passed beyond this key. Check next.
                            ++i;
                            if (i === set.length) {
                                // There is no next. Stop searching.
                                advance(resolve);
                                return false;
                            }
                        }
                        if (compare(key, set[i]) === 0) {
                            // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                            return true;
                        } else {
                            // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                            advance(function () {
                                cursor.continue(set[i]);
                            });
                            return false;
                        }
                    });
                    return c;
                },
                notEqual: function notEqual(value) {
                    return this.inAnyRange([[minKey, value], [value, maxKey]], { includeLowers: false, includeUppers: false });
                },
                noneOf: function noneOf() {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0) return new Collection(this); // Return entire collection.
                    try {
                        set.sort(ascending);
                    } catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    // Transform ["a","b","c"] to a set of ranges for between/above/below: [[minKey,"a"], ["a","b"], ["b","c"], ["c",maxKey]]
                    var ranges = set.reduce(function (res, val) {
                        return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]];
                    }, null);
                    ranges.push([set[set.length - 1], maxKey]);
                    return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
                },
                /** Filter out values withing given set of ranges.
                * Example, give children and elders a rebate of 50%:
                *
                *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});
                *
                * @param {(string|number|Date|Array)[][]} ranges
                * @param {{includeLowers: boolean, includeUppers: boolean}} options
                */
                inAnyRange: function inAnyRange(ranges, options) {
                    if (ranges.length === 0) return emptyCollection(this);
                    if (!ranges.every(function (range) {
                        return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;
                    })) {
                        return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
                    }
                    var includeLowers = !options || options.includeLowers !== false; // Default to true
                    var includeUppers = options && options.includeUppers === true; // Default to false
                    function addRange(ranges, newRange) {
                        for (var i = 0, l = ranges.length; i < l; ++i) {
                            var range = ranges[i];
                            if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                                range[0] = min(range[0], newRange[0]);
                                range[1] = max(range[1], newRange[1]);
                                break;
                            }
                        }
                        if (i === l) ranges.push(newRange);
                        return ranges;
                    }
                    var sortDirection = ascending;
                    function rangeSorter(a, b) {
                        return sortDirection(a[0], b[0]);
                    }
                    // Join overlapping ranges
                    var set;
                    try {
                        set = ranges.reduce(addRange, []);
                        set.sort(rangeSorter);
                    } catch (ex) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    var i = 0;
                    var keyIsBeyondCurrentEntry = includeUppers ? function (key) {
                        return ascending(key, set[i][1]) > 0;
                    } : function (key) {
                        return ascending(key, set[i][1]) >= 0;
                    };
                    var keyIsBeforeCurrentEntry = includeLowers ? function (key) {
                        return descending(key, set[i][0]) > 0;
                    } : function (key) {
                        return descending(key, set[i][0]) >= 0;
                    };
                    function keyWithinCurrentRange(key) {
                        return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
                    }
                    var checkKey = keyIsBeyondCurrentEntry;
                    var c = new Collection(this, function () {
                        return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
                    });
                    c._ondirectionchange = function (direction) {
                        if (direction === "next") {
                            checkKey = keyIsBeyondCurrentEntry;
                            sortDirection = ascending;
                        } else {
                            checkKey = keyIsBeforeCurrentEntry;
                            sortDirection = descending;
                        }
                        set.sort(rangeSorter);
                    };
                    c._addAlgorithm(function (cursor, advance, resolve) {
                        var key = cursor.key;
                        while (checkKey(key)) {
                            // The cursor has passed beyond this key. Check next.
                            ++i;
                            if (i === set.length) {
                                // There is no next. Stop searching.
                                advance(resolve);
                                return false;
                            }
                        }
                        if (keyWithinCurrentRange(key)) {
                            // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                            return true;
                        } else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {
                            // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.
                            // Continue to next key but don't include this one.
                            return false;
                        } else {
                            // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                            advance(function () {
                                if (sortDirection === ascending) cursor.continue(set[i][0]);else cursor.continue(set[i][1]);
                            });
                            return false;
                        }
                    });
                    return c;
                },
                startsWithAnyOf: function startsWithAnyOf() {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (!set.every(function (s) {
                        return typeof s === 'string';
                    })) {
                        return fail(this, "startsWithAnyOf() only works with strings");
                    }
                    if (set.length === 0) return emptyCollection(this);
                    return this.inAnyRange(set.map(function (str) {
                        return [str, str + maxString];
                    }));
                }
            };
        });
        //
        //
        //
        // Collection Class
        //
        //
        //
        function Collection(whereClause, keyRangeGenerator) {
            /// <summary>
            ///
            /// </summary>
            /// <param name="whereClause" type="WhereClause">Where clause instance</param>
            /// <param name="keyRangeGenerator" value="function(){ return IDBKeyRange.bound(0,1);}" optional="true"></param>
            var keyRange = null,
                error = null;
            if (keyRangeGenerator) try {
                keyRange = keyRangeGenerator();
            } catch (ex) {
                error = ex;
            }
            var whereCtx = whereClause._ctx,
                table = whereCtx.table;
            this._ctx = {
                table: table,
                index: whereCtx.index,
                isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
                range: keyRange,
                keysOnly: false,
                dir: "next",
                unique: "",
                algorithm: null,
                filter: null,
                replayFilter: null,
                justLimit: true,
                isMatch: null,
                offset: 0,
                limit: Infinity,
                error: error,
                or: whereCtx.or,
                valueMapper: table.hook.reading.fire
            };
        }
        function isPlainKeyRange(ctx, ignoreLimitFilter) {
            return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
        }
        props(Collection.prototype, function () {
            //
            // Collection Private Functions
            //
            function addFilter(ctx, fn) {
                ctx.filter = combine(ctx.filter, fn);
            }
            function addReplayFilter(ctx, factory, isLimitFilter) {
                var curr = ctx.replayFilter;
                ctx.replayFilter = curr ? function () {
                    return combine(curr(), factory());
                } : factory;
                ctx.justLimit = isLimitFilter && !curr;
            }
            function addMatchFilter(ctx, fn) {
                ctx.isMatch = combine(ctx.isMatch, fn);
            }
            /** @param ctx {
             *      isPrimKey: boolean,
             *      table: Table,
             *      index: string
             * }
             * @param store IDBObjectStore
             **/
            function getIndexOrStore(ctx, store) {
                if (ctx.isPrimKey) return store;
                var indexSpec = ctx.table.schema.idxByName[ctx.index];
                if (!indexSpec) throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + store.name + " is not indexed");
                return store.index(indexSpec.name);
            }
            /** @param ctx {
             *      isPrimKey: boolean,
             *      table: Table,
             *      index: string,
             *      keysOnly: boolean,
             *      range?: IDBKeyRange,
             *      dir: "next" | "prev"
             * }
             */
            function openCursor(ctx, store) {
                var idxOrStore = getIndexOrStore(ctx, store);
                return ctx.keysOnly && 'openKeyCursor' in idxOrStore ? idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) : idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);
            }
            function iter(ctx, fn, resolve, reject, idbstore) {
                var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
                if (!ctx.or) {
                    iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);
                } else (function () {
                    var set = {};
                    var resolved = 0;
                    function resolveboth() {
                        if (++resolved === 2) resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.
                    }
                    function union(item, cursor, advance) {
                        if (!filter || filter(cursor, advance, resolveboth, reject)) {
                            var primaryKey = cursor.primaryKey;
                            var key = '' + primaryKey;
                            if (key === '[object ArrayBuffer]') key = '' + new Uint8Array(primaryKey);
                            if (!hasOwn(set, key)) {
                                set[key] = true;
                                fn(item, cursor, advance);
                            }
                        }
                    }
                    ctx.or._iterate(union, resolveboth, reject, idbstore);
                    iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);
                })();
            }
            return {
                //
                // Collection Protected Functions
                //
                _read: function _read(fn, cb) {
                    var ctx = this._ctx;
                    return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._idbstore(READONLY, fn).then(cb);
                },
                _write: function _write(fn) {
                    var ctx = this._ctx;
                    return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._idbstore(READWRITE, fn, "locked"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.
                },
                _addAlgorithm: function _addAlgorithm(fn) {
                    var ctx = this._ctx;
                    ctx.algorithm = combine(ctx.algorithm, fn);
                },
                _iterate: function _iterate(fn, resolve, reject, idbstore) {
                    return iter(this._ctx, fn, resolve, reject, idbstore);
                },
                clone: function clone(props$$1) {
                    var rv = Object.create(this.constructor.prototype),
                        ctx = Object.create(this._ctx);
                    if (props$$1) extend(ctx, props$$1);
                    rv._ctx = ctx;
                    return rv;
                },
                raw: function raw() {
                    this._ctx.valueMapper = null;
                    return this;
                },
                //
                // Collection Public methods
                //
                each: function each(fn) {
                    var ctx = this._ctx;
                    return this._read(function (resolve, reject, idbstore) {
                        iter(ctx, fn, resolve, reject, idbstore);
                    });
                },
                count: function count(cb) {
                    var ctx = this._ctx;
                    if (isPlainKeyRange(ctx, true)) {
                        // This is a plain key range. We can use the count() method if the index.
                        return this._read(function (resolve, reject, idbstore) {
                            var idx = getIndexOrStore(ctx, idbstore);
                            var req = ctx.range ? idx.count(ctx.range) : idx.count();
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = function (e) {
                                resolve(Math.min(e.target.result, ctx.limit));
                            };
                        }, cb);
                    } else {
                        // Algorithms, filters or expressions are applied. Need to count manually.
                        var count = 0;
                        return this._read(function (resolve, reject, idbstore) {
                            iter(ctx, function () {
                                ++count;return false;
                            }, function () {
                                resolve(count);
                            }, reject, idbstore);
                        }, cb);
                    }
                },
                sortBy: function sortBy(keyPath, cb) {
                    /// <param name="keyPath" type="String"></param>
                    var parts = keyPath.split('.').reverse(),
                        lastPart = parts[0],
                        lastIndex = parts.length - 1;
                    function getval(obj, i) {
                        if (i) return getval(obj[parts[i]], i - 1);
                        return obj[lastPart];
                    }
                    var order = this._ctx.dir === "next" ? 1 : -1;
                    function sorter(a, b) {
                        var aVal = getval(a, lastIndex),
                            bVal = getval(b, lastIndex);
                        return aVal < bVal ? -order : aVal > bVal ? order : 0;
                    }
                    return this.toArray(function (a) {
                        return a.sort(sorter);
                    }).then(cb);
                },
                toArray: function toArray(cb) {
                    var ctx = this._ctx;
                    return this._read(function (resolve, reject, idbstore) {
                        if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                            // Special optimation if we could use IDBObjectStore.getAll() or
                            // IDBKeyRange.getAll():
                            var readingHook = ctx.table.hook.reading.fire;
                            var idxOrStore = getIndexOrStore(ctx, idbstore);
                            var req = ctx.limit < Infinity ? idxOrStore.getAll(ctx.range, ctx.limit) : idxOrStore.getAll(ctx.range);
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = readingHook === mirror ? eventSuccessHandler(resolve) : eventSuccessHandler(function (res) {
                                try {
                                    resolve(res.map(readingHook));
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        } else {
                            // Getting array through a cursor.
                            var a = [];
                            iter(ctx, function (item) {
                                a.push(item);
                            }, function arrayComplete() {
                                resolve(a);
                            }, reject, idbstore);
                        }
                    }, cb);
                },
                offset: function offset(_offset2) {
                    var ctx = this._ctx;
                    if (_offset2 <= 0) return this;
                    ctx.offset += _offset2; // For count()
                    if (isPlainKeyRange(ctx)) {
                        addReplayFilter(ctx, function () {
                            var offsetLeft = _offset2;
                            return function (cursor, advance) {
                                if (offsetLeft === 0) return true;
                                if (offsetLeft === 1) {
                                    --offsetLeft;
                                    return false;
                                }
                                advance(function () {
                                    cursor.advance(offsetLeft);
                                    offsetLeft = 0;
                                });
                                return false;
                            };
                        });
                    } else {
                        addReplayFilter(ctx, function () {
                            var offsetLeft = _offset2;
                            return function () {
                                return --offsetLeft < 0;
                            };
                        });
                    }
                    return this;
                },
                limit: function limit(numRows) {
                    this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()
                    addReplayFilter(this._ctx, function () {
                        var rowsLeft = numRows;
                        return function (cursor, advance, resolve) {
                            if (--rowsLeft <= 0) advance(resolve); // Stop after this item has been included
                            return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.
                        };
                    }, true);
                    return this;
                },
                until: function until(filterFunction, bIncludeStopEntry) {
                    var ctx = this._ctx;
                    addFilter(this._ctx, function (cursor, advance, resolve) {
                        if (filterFunction(cursor.value)) {
                            advance(resolve);
                            return bIncludeStopEntry;
                        } else {
                            return true;
                        }
                    });
                    return this;
                },
                first: function first(cb) {
                    return this.limit(1).toArray(function (a) {
                        return a[0];
                    }).then(cb);
                },
                last: function last(cb) {
                    return this.reverse().first(cb);
                },
                filter: function filter(filterFunction) {
                    /// <param name="jsFunctionFilter" type="Function">function(val){return true/false}</param>
                    addFilter(this._ctx, function (cursor) {
                        return filterFunction(cursor.value);
                    });
                    // match filters not used in Dexie.js but can be used by 3rd part libraries to test a
                    // collection for a match without querying DB. Used by Dexie.Observable.
                    addMatchFilter(this._ctx, filterFunction);
                    return this;
                },
                and: function and(filterFunction) {
                    return this.filter(filterFunction);
                },
                or: function or(indexName) {
                    return new WhereClause(this._ctx.table, indexName, this);
                },
                reverse: function reverse() {
                    this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
                    if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);
                    return this;
                },
                desc: function desc() {
                    return this.reverse();
                },
                eachKey: function eachKey(cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    return this.each(function (val, cursor) {
                        cb(cursor.key, cursor);
                    });
                },
                eachUniqueKey: function eachUniqueKey(cb) {
                    this._ctx.unique = "unique";
                    return this.eachKey(cb);
                },
                eachPrimaryKey: function eachPrimaryKey(cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    return this.each(function (val, cursor) {
                        cb(cursor.primaryKey, cursor);
                    });
                },
                keys: function keys(cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    var a = [];
                    return this.each(function (item, cursor) {
                        a.push(cursor.key);
                    }).then(function () {
                        return a;
                    }).then(cb);
                },
                primaryKeys: function primaryKeys(cb) {
                    var ctx = this._ctx;
                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                        // Special optimation if we could use IDBObjectStore.getAllKeys() or
                        // IDBKeyRange.getAllKeys():
                        return this._read(function (resolve, reject, idbstore) {
                            var idxOrStore = getIndexOrStore(ctx, idbstore);
                            var req = ctx.limit < Infinity ? idxOrStore.getAllKeys(ctx.range, ctx.limit) : idxOrStore.getAllKeys(ctx.range);
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = eventSuccessHandler(resolve);
                        }).then(cb);
                    }
                    ctx.keysOnly = !ctx.isMatch;
                    var a = [];
                    return this.each(function (item, cursor) {
                        a.push(cursor.primaryKey);
                    }).then(function () {
                        return a;
                    }).then(cb);
                },
                uniqueKeys: function uniqueKeys(cb) {
                    this._ctx.unique = "unique";
                    return this.keys(cb);
                },
                firstKey: function firstKey(cb) {
                    return this.limit(1).keys(function (a) {
                        return a[0];
                    }).then(cb);
                },
                lastKey: function lastKey(cb) {
                    return this.reverse().firstKey(cb);
                },
                distinct: function distinct() {
                    var ctx = this._ctx,
                        idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
                    if (!idx || !idx.multi) return this; // distinct() only makes differencies on multiEntry indexes.
                    var set = {};
                    addFilter(this._ctx, function (cursor) {
                        var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string
                        var found = hasOwn(set, strKey);
                        set[strKey] = true;
                        return !found;
                    });
                    return this;
                },
                //
                // Methods that mutate storage
                //
                modify: function modify(changes) {
                    var self = this,
                        ctx = this._ctx,
                        hook = ctx.table.hook,
                        updatingHook = hook.updating.fire,
                        deletingHook = hook.deleting.fire;
                    return this._write(function (resolve, reject, idbstore, trans) {
                        var modifyer;
                        if (typeof changes === 'function') {
                            // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)
                            if (updatingHook === nop && deletingHook === nop) {
                                // Noone cares about what is being changed. Just let the modifier function be the given argument as is.
                                modifyer = changes;
                            } else {
                                // People want to know exactly what is being modified or deleted.
                                // Let modifyer be a proxy function that finds out what changes the caller is actually doing
                                // and call the hooks accordingly!
                                modifyer = function modifyer(item) {
                                    var origItem = deepClone(item); // Clone the item first so we can compare laters.
                                    if (changes.call(this, item, this) === false) return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)
                                    if (!hasOwn(this, "value")) {
                                        // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.
                                        deletingHook.call(this, this.primKey, item, trans);
                                    } else {
                                        // No deletion. Check what was changed
                                        var objectDiff = getObjectDiff(origItem, this.value);
                                        var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);
                                        if (additionalChanges) {
                                            // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.
                                            item = this.value;
                                            keys(additionalChanges).forEach(function (keyPath) {
                                                setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                            });
                                        }
                                    }
                                };
                            }
                        } else if (updatingHook === nop) {
                            // changes is a set of {keyPath: value} and no one is listening to the updating hook.
                            var keyPaths = keys(changes);
                            var numKeys = keyPaths.length;
                            modifyer = function modifyer(item) {
                                var anythingModified = false;
                                for (var i = 0; i < numKeys; ++i) {
                                    var keyPath = keyPaths[i],
                                        val = changes[keyPath];
                                    if (getByKeyPath(item, keyPath) !== val) {
                                        setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                        anythingModified = true;
                                    }
                                }
                                return anythingModified;
                            };
                        } else {
                            // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and
                            // allow it to add additional modifications to make.
                            var origChanges = changes;
                            changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.
                            modifyer = function modifyer(item) {
                                var anythingModified = false;
                                var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);
                                if (additionalChanges) extend(changes, additionalChanges);
                                keys(changes).forEach(function (keyPath) {
                                    var val = changes[keyPath];
                                    if (getByKeyPath(item, keyPath) !== val) {
                                        setByKeyPath(item, keyPath, val);
                                        anythingModified = true;
                                    }
                                });
                                if (additionalChanges) changes = shallowClone(origChanges); // Restore original changes for next iteration
                                return anythingModified;
                            };
                        }
                        var count = 0;
                        var successCount = 0;
                        var iterationComplete = false;
                        var failures = [];
                        var failKeys = [];
                        var currentKey = null;
                        function modifyItem(item, cursor) {
                            currentKey = cursor.primaryKey;
                            var thisContext = {
                                primKey: cursor.primaryKey,
                                value: item,
                                onsuccess: null,
                                onerror: null
                            };
                            function onerror(e) {
                                failures.push(e);
                                failKeys.push(thisContext.primKey);
                                checkFinished();
                                return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction
                            }
                            if (modifyer.call(thisContext, item, thisContext) !== false) {
                                var bDelete = !hasOwn(thisContext, "value");
                                ++count;
                                tryCatch(function () {
                                    var req = bDelete ? cursor.delete() : cursor.update(thisContext.value);
                                    req._hookCtx = thisContext;
                                    req.onerror = hookedEventRejectHandler(onerror);
                                    req.onsuccess = hookedEventSuccessHandler(function () {
                                        ++successCount;
                                        checkFinished();
                                    });
                                }, onerror);
                            } else if (thisContext.onsuccess) {
                                // Hook will expect either onerror or onsuccess to always be called!
                                thisContext.onsuccess(thisContext.value);
                            }
                        }
                        function doReject(e) {
                            if (e) {
                                failures.push(e);
                                failKeys.push(currentKey);
                            }
                            return reject(new ModifyError("Error modifying one or more objects", failures, successCount, failKeys));
                        }
                        function checkFinished() {
                            if (iterationComplete && successCount + failures.length === count) {
                                if (failures.length > 0) doReject();else resolve(successCount);
                            }
                        }
                        self.clone().raw()._iterate(modifyItem, function () {
                            iterationComplete = true;
                            checkFinished();
                        }, doReject, idbstore);
                    });
                },
                'delete': function _delete() {
                    var _this = this;
                    var ctx = this._ctx,
                        range = ctx.range,
                        deletingHook = ctx.table.hook.deleting.fire,
                        hasDeleteHook = deletingHook !== nop;
                    if (!hasDeleteHook && isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || !range)) {
                        // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)
                        // For chromium, this is the way most optimized version.
                        // For IE/Edge, this could hang the indexedDB engine and make operating system instable
                        // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)
                        return this._write(function (resolve, reject, idbstore) {
                            // Our API contract is to return a count of deleted items, so we have to count() before delete().
                            var onerror = eventRejectHandler(reject),
                                countReq = range ? idbstore.count(range) : idbstore.count();
                            countReq.onerror = onerror;
                            countReq.onsuccess = function () {
                                var count = countReq.result;
                                tryCatch(function () {
                                    var delReq = range ? idbstore.delete(range) : idbstore.clear();
                                    delReq.onerror = onerror;
                                    delReq.onsuccess = function () {
                                        return resolve(count);
                                    };
                                }, function (err) {
                                    return reject(err);
                                });
                            };
                        });
                    }
                    // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.
                    // Divide into chunks to not starve RAM.
                    // If has delete hook, we will have to collect not just keys but also objects, so it will use
                    // more memory and need lower chunk size.
                    var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;
                    return this._write(function (resolve, reject, idbstore, trans) {
                        var totalCount = 0;
                        // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.
                        var collection = _this.clone({
                            keysOnly: !ctx.isMatch && !hasDeleteHook
                        }) // load just keys (unless filter() or and() or deleteHook has subscribers)
                        .distinct() // In case multiEntry is used, never delete same key twice because resulting count
                        .limit(CHUNKSIZE).raw(); // Don't filter through reading-hooks (like mapped classes etc)
                        var keysOrTuples = [];
                        // We're gonna do things on as many chunks that are needed.
                        // Use recursion of nextChunk function:
                        var nextChunk = function nextChunk() {
                            return collection.each(hasDeleteHook ? function (val, cursor) {
                                // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,
                                // so that the hook can be called with its values in bulkDelete().
                                keysOrTuples.push([cursor.primaryKey, cursor.value]);
                            } : function (val, cursor) {
                                // No one subscribes to hook('deleting'). Collect only primary keys:
                                keysOrTuples.push(cursor.primaryKey);
                            }).then(function () {
                                // Chromium deletes faster when doing it in sort order.
                                hasDeleteHook ? keysOrTuples.sort(function (a, b) {
                                    return ascending(a[0], b[0]);
                                }) : keysOrTuples.sort(ascending);
                                return _bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);
                            }).then(function () {
                                var count = keysOrTuples.length;
                                totalCount += count;
                                keysOrTuples = [];
                                return count < CHUNKSIZE ? totalCount : nextChunk();
                            });
                        };
                        resolve(nextChunk());
                    });
                }
            };
        });
        //
        //
        //
        // ------------------------- Help functions ---------------------------
        //
        //
        //
        function lowerVersionFirst(a, b) {
            return a._cfg.version - b._cfg.version;
        }
        function setApiOnPlace(objs, tableNames, dbschema) {
            tableNames.forEach(function (tableName) {
                var schema = dbschema[tableName];
                objs.forEach(function (obj) {
                    if (!(tableName in obj)) {
                        if (obj === Transaction.prototype || obj instanceof Transaction) {
                            // obj is a Transaction prototype (or prototype of a subclass to Transaction)
                            // Make the API a getter that returns this.table(tableName)
                            setProp(obj, tableName, { get: function get() {
                                    return this.table(tableName);
                                } });
                        } else {
                            // Table will not be bound to a transaction (will use Dexie.currentTransaction)
                            obj[tableName] = new Table(tableName, schema);
                        }
                    }
                });
            });
        }
        function removeTablesApi(objs) {
            objs.forEach(function (obj) {
                for (var key in obj) {
                    if (obj[key] instanceof Table) delete obj[key];
                }
            });
        }
        function iterate(req, filter, fn, resolve, reject, valueMapper) {
            // Apply valueMapper (hook('reading') or mappped class)
            var mappedFn = valueMapper ? function (x, c, a) {
                return fn(valueMapper(x), c, a);
            } : fn;
            // Wrap fn with PSD and microtick stuff from Promise.
            var wrappedFn = wrap(mappedFn, reject);
            if (!req.onerror) req.onerror = eventRejectHandler(reject);
            if (filter) {
                req.onsuccess = trycatcher(function filter_record() {
                    var cursor = req.result;
                    if (cursor) {
                        var c = function c() {
                            cursor.continue();
                        };
                        if (filter(cursor, function (advancer) {
                            c = advancer;
                        }, resolve, reject)) wrappedFn(cursor.value, cursor, function (advancer) {
                            c = advancer;
                        });
                        c();
                    } else {
                        resolve();
                    }
                }, reject);
            } else {
                req.onsuccess = trycatcher(function filter_record() {
                    var cursor = req.result;
                    if (cursor) {
                        var c = function c() {
                            cursor.continue();
                        };
                        wrappedFn(cursor.value, cursor, function (advancer) {
                            c = advancer;
                        });
                        c();
                    } else {
                        resolve();
                    }
                }, reject);
            }
        }
        function parseIndexSyntax(indexes) {
            /// <param name="indexes" type="String"></param>
            /// <returns type="Array" elementType="IndexSpec"></returns>
            var rv = [];
            indexes.split(',').forEach(function (index) {
                index = index.trim();
                var name = index.replace(/([&*]|\+\+)/g, ""); // Remove "&", "++" and "*"
                // Let keyPath of "[a+b]" be ["a","b"]:
                var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
                rv.push(new IndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), /\./.test(index)));
            });
            return rv;
        }
        function cmp(key1, key2) {
            return indexedDB.cmp(key1, key2);
        }
        function min(a, b) {
            return cmp(a, b) < 0 ? a : b;
        }
        function max(a, b) {
            return cmp(a, b) > 0 ? a : b;
        }
        function ascending(a, b) {
            return indexedDB.cmp(a, b);
        }
        function descending(a, b) {
            return indexedDB.cmp(b, a);
        }
        function simpleCompare(a, b) {
            return a < b ? -1 : a === b ? 0 : 1;
        }
        function simpleCompareReverse(a, b) {
            return a > b ? -1 : a === b ? 0 : 1;
        }
        function combine(filter1, filter2) {
            return filter1 ? filter2 ? function () {
                return filter1.apply(this, arguments) && filter2.apply(this, arguments);
            } : filter1 : filter2;
        }
        function readGlobalSchema() {
            db.verno = idbdb.version / 10;
            db._dbSchema = globalSchema = {};
            dbStoreNames = slice(idbdb.objectStoreNames, 0);
            if (dbStoreNames.length === 0) return; // Database contains no stores.
            var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');
            dbStoreNames.forEach(function (storeName) {
                var store = trans.objectStore(storeName),
                    keyPath = store.keyPath,
                    dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                var primKey = new IndexSpec(keyPath, keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);
                var indexes = [];
                for (var j = 0; j < store.indexNames.length; ++j) {
                    var idbindex = store.index(store.indexNames[j]);
                    keyPath = idbindex.keyPath;
                    dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                    var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);
                    indexes.push(index);
                }
                globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});
            });
            setApiOnPlace([allTables], keys(globalSchema), globalSchema);
        }
        function adjustToExistingIndexNames(schema, idbtrans) {
            /// <summary>
            /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db
            /// </summary>
            /// <param name="schema" type="Object">Map between name and TableSchema</param>
            /// <param name="idbtrans" type="IDBTransaction"></param>
            var storeNames = idbtrans.db.objectStoreNames;
            for (var i = 0; i < storeNames.length; ++i) {
                var storeName = storeNames[i];
                var store = idbtrans.objectStore(storeName);
                hasGetAll = 'getAll' in store;
                for (var j = 0; j < store.indexNames.length; ++j) {
                    var indexName = store.indexNames[j];
                    var keyPath = store.index(indexName).keyPath;
                    var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                    if (schema[storeName]) {
                        var indexSpec = schema[storeName].idxByName[dexieName];
                        if (indexSpec) indexSpec.name = indexName;
                    }
                }
            }
            // Bug with getAll() on Safari ver<604 on Workers only, see discussion following PR #579
            if (/Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
                hasGetAll = false;
            }
        }
        function fireOnBlocked(ev) {
            db.on("blocked").fire(ev);
            // Workaround (not fully*) for missing "versionchange" event in IE,Edge and Safari:
            connections.filter(function (c) {
                return c.name === db.name && c !== db && !c._vcFired;
            }).map(function (c) {
                return c.on("versionchange").fire(ev);
            });
        }
        extend(this, {
            Collection: Collection,
            Table: Table,
            Transaction: Transaction,
            Version: Version,
            WhereClause: WhereClause
        });
        init();
        addons.forEach(function (fn) {
            fn(db);
        });
    }
    function parseType(type) {
        if (typeof type === 'function') {
            return new type();
        } else if (isArray(type)) {
            return [parseType(type[0])];
        } else if (type && (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {
            var rv = {};
            applyStructure(rv, type);
            return rv;
        } else {
            return type;
        }
    }
    function applyStructure(obj, structure) {
        keys(structure).forEach(function (member) {
            var value = parseType(structure[member]);
            obj[member] = value;
        });
        return obj;
    }
    function hookedEventSuccessHandler(resolve) {
        // wrap() is needed when calling hooks because the rare scenario of:
        //  * hook does a db operation that fails immediately (IDB throws exception)
        //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.
        //    wrap() will also execute in a virtual tick.
        //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.
        //  * If this was the last event in the bulk, the promise will resolve after a physical tick
        //    and the transaction will have committed already.
        // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,
        // because it is always marked with _lib = true when created using Transaction._promise().
        return wrap(function (event) {
            var req = event.target,
                ctx = req._hookCtx,
                // Contains the hook error handler. Put here instead of closure to boost performance.
            result = ctx.value || req.result,
                // Pass the object value on updates. The result from IDB is the primary key.
            hookSuccessHandler = ctx && ctx.onsuccess;
            hookSuccessHandler && hookSuccessHandler(result);
            resolve && resolve(result);
        }, resolve);
    }
    function eventRejectHandler(reject) {
        return wrap(function (event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
        });
    }
    function eventSuccessHandler(resolve) {
        return wrap(function (event) {
            resolve(event.target.result);
        });
    }
    function hookedEventRejectHandler(reject) {
        return wrap(function (event) {
            // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.
            var req = event.target,
                err = req.error,
                ctx = req._hookCtx,
                // Contains the hook error handler. Put here instead of closure to boost performance.
            hookErrorHandler = ctx && ctx.onerror;
            hookErrorHandler && hookErrorHandler(err);
            preventDefault(event);
            reject(err);
            return false;
        });
    }
    function preventDefault(event) {
        if (event.stopPropagation) event.stopPropagation();
        if (event.preventDefault) event.preventDefault();
    }
    function awaitIterator(iterator) {
        var callNext = function callNext(result) {
            return iterator.next(result);
        },
            doThrow = function doThrow(error) {
            return iterator.throw(error);
        },
            onSuccess = step(callNext),
            onError = step(doThrow);
        function step(getNext) {
            return function (val) {
                var next = getNext(val),
                    value = next.value;
                return next.done ? value : !value || typeof value.then !== 'function' ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
            };
        }
        return step(callNext)();
    }
    //
    // IndexSpec struct
    //
    function IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {
        /// <param name="name" type="String"></param>
        /// <param name="keyPath" type="String"></param>
        /// <param name="unique" type="Boolean"></param>
        /// <param name="multi" type="Boolean"></param>
        /// <param name="auto" type="Boolean"></param>
        /// <param name="compound" type="Boolean"></param>
        /// <param name="dotted" type="Boolean"></param>
        this.name = name;
        this.keyPath = keyPath;
        this.unique = unique;
        this.multi = multi;
        this.auto = auto;
        this.compound = compound;
        this.dotted = dotted;
        var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && '[' + [].join.call(keyPath, '+') + ']';
        this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + keyPathSrc;
    }
    //
    // TableSchema struct
    //
    function TableSchema(name, primKey, indexes, instanceTemplate) {
        /// <param name="name" type="String"></param>
        /// <param name="primKey" type="IndexSpec"></param>
        /// <param name="indexes" type="Array" elementType="IndexSpec"></param>
        /// <param name="instanceTemplate" type="Object"></param>
        this.name = name;
        this.primKey = primKey || new IndexSpec();
        this.indexes = indexes || [new IndexSpec()];
        this.instanceTemplate = instanceTemplate;
        this.mappedClass = null;
        this.idxByName = arrayToObject(indexes, function (index) {
            return [index.name, index];
        });
    }
    function safariMultiStoreFix(storeNames) {
        return storeNames.length === 1 ? storeNames[0] : storeNames;
    }
    function getNativeGetDatabaseNamesFn(indexedDB) {
        var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);
        return fn && fn.bind(indexedDB);
    }
    // Export Error classes
    props(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};
    //
    // Static methods and properties
    // 
    props(Dexie, {
        //
        // Static delete() method.
        //
        delete: function _delete(databaseName) {
            var db = new Dexie(databaseName),
                promise = db.delete();
            promise.onblocked = function (fn) {
                db.on("blocked", fn);
                return this;
            };
            return promise;
        },
        //
        // Static exists() method.
        //
        exists: function exists(name) {
            return new Dexie(name).open().then(function (db) {
                db.close();
                return true;
            }).catch(Dexie.NoSuchDatabaseError, function () {
                return false;
            });
        },
        //
        // Static method for retrieving a list of all existing databases at current host.
        //
        getDatabaseNames: function getDatabaseNames(cb) {
            var getDatabaseNames = getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);
            return getDatabaseNames ? new Promise(function (resolve, reject) {
                var req = getDatabaseNames();
                req.onsuccess = function (event) {
                    resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>
                };
                req.onerror = eventRejectHandler(reject);
            }).then(cb) : dbNamesDB.dbnames.toCollection().primaryKeys(cb);
        },
        defineClass: function defineClass(structure) {
            /// <summary>
            ///     Create a javascript constructor based on given template for which properties to expect in the class.
            ///     Any property that is a constructor function will act as a type. So {name: String} will be equal to {name: new String()}.
            /// </summary>
            /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>
            // Default constructor able to copy given properties into this object.
            function Class(properties) {
                /// <param name="properties" type="Object" optional="true">Properties to initialize object with.
                /// </param>
                if (properties) extend(this, properties);
            }
            return Class;
        },
        applyStructure: applyStructure,
        ignoreTransaction: function ignoreTransaction(scopeFunc) {
            // In case caller is within a transaction but needs to create a separate transaction.
            // Example of usage:
            //
            // Let's say we have a logger function in our app. Other application-logic should be unaware of the
            // logger function and not need to include the 'logentries' table in all transaction it performs.
            // The logging should always be done in a separate transaction and not be dependant on the current
            // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.
            //
            //     Dexie.ignoreTransaction(function() {
            //         db.logentries.add(newLogEntry);
            //     });
            //
            // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction
            // in current Promise-scope.
            //
            // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an
            // API for this because
            //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().
            //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().
            //  3) setImmediate() is not supported in the ES standard.
            //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.
            return PSD.trans ? usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.
            scopeFunc(); // No need to change scope because there is no ongoing transaction.
        },
        vip: function vip(fn) {
            // To be used by subscribers to the on('ready') event.
            // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.
            // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD
            // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since
            // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.
            // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()
            // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by
            // the caller will not resolve until database is opened.
            return newScope(function () {
                PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.
                return fn();
            });
        },
        async: function async(generatorFn) {
            return function () {
                try {
                    var rv = awaitIterator(generatorFn.apply(this, arguments));
                    if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);
                    return rv;
                } catch (e) {
                    return rejection(e);
                }
            };
        },
        spawn: function spawn(generatorFn, args, thiz) {
            try {
                var rv = awaitIterator(generatorFn.apply(thiz, args || []));
                if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);
                return rv;
            } catch (e) {
                return rejection(e);
            }
        },
        // Dexie.currentTransaction property
        currentTransaction: {
            get: function get() {
                return PSD.trans || null;
            }
        },
        waitFor: function waitFor(promiseOrFunction, optionalTimeout) {
            // If a function is provided, invoke it and pass the returning value to Transaction.waitFor()
            var promise = Promise.resolve(typeof promiseOrFunction === 'function' ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 60000); // Default the timeout to one minute. Caller may specify Infinity if required.       
            // Run given promise on current transaction. If no current transaction, just return a Dexie promise based
            // on given value.
            return PSD.trans ? PSD.trans.waitFor(promise) : promise;
        },
        // Export our Promise implementation since it can be handy as a standalone Promise implementation
        Promise: Promise,
        // Dexie.debug proptery:
        // Dexie.debug = false
        // Dexie.debug = true
        // Dexie.debug = "dexie" - don't hide dexie's stack frames.
        debug: {
            get: function get() {
                return debug;
            },
            set: function set(value) {
                setDebug(value, value === 'dexie' ? function () {
                    return true;
                } : dexieStackFrameFilter);
            }
        },
        // Export our derive/extend/override methodology
        derive: derive,
        extend: extend,
        props: props,
        override: override,
        // Export our Events() function - can be handy as a toolkit
        Events: Events,
        // Utilities
        getByKeyPath: getByKeyPath,
        setByKeyPath: setByKeyPath,
        delByKeyPath: delByKeyPath,
        shallowClone: shallowClone,
        deepClone: deepClone,
        getObjectDiff: getObjectDiff,
        asap: asap,
        maxKey: maxKey,
        minKey: minKey,
        // Addon registry
        addons: [],
        // Global DB connection list
        connections: connections,
        MultiModifyError: exceptions.Modify,
        errnames: errnames,
        // Export other static classes
        IndexSpec: IndexSpec,
        TableSchema: TableSchema,
        //
        // Dependencies
        //
        // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.
        //
        // In node.js, however, these properties must be set "manually" before instansiating a new Dexie().
        // For node.js, you need to require indexeddb-js or similar and then set these deps.
        //
        dependencies: {
            // Required:
            indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
            IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
        },
        // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.
        semVer: DEXIE_VERSION,
        version: DEXIE_VERSION.split('.').map(function (n) {
            return parseInt(n);
        }).reduce(function (p, c, i) {
            return p + c / Math.pow(10, i * 2);
        }),
        // https://github.com/dfahlander/Dexie.js/issues/186
        // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return
        // x.default. Workaround: Set Dexie.default = Dexie.
        default: Dexie,
        // Make it possible to import {Dexie} (non-default import)
        // Reason 1: May switch to that in future.
        // Reason 2: We declare it both default and named exported in d.ts to make it possible
        // to let addons extend the Dexie interface with Typescript 2.1 (works only when explicitely
        // exporting the symbol, not just default exporting)
        Dexie: Dexie
    });
    // Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.
    Promise.rejectionMapper = mapError;
    // Initialize dbNamesDB (won't ever be opened on chromium browsers')
    dbNamesDB = new Dexie('__dbnames');
    dbNamesDB.version(1).stores({ dbnames: 'name' });
    (function () {
        // Migrate from Dexie 1.x database names stored in localStorage:
        var DBNAMES = 'Dexie.DatabaseNames';
        if ((typeof localStorage === 'undefined' ? 'undefined' : _typeof(localStorage)) !== undefined && _global.document !== undefined) try {
            // Have localStorage and is not executing in a worker. Lets migrate from Dexie 1.x.
            JSON.parse(localStorage.getItem(DBNAMES) || "[]").forEach(function (name) {
                return dbNamesDB.dbnames.put({ name: name }).catch(nop);
            });
            localStorage.removeItem(DBNAMES);
        } catch (_e) {}
    })();

    return Dexie;
});
//# sourceMappingURL=dexie.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('./Subscriber');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber);
exports.InnerSubscriber = InnerSubscriber;
//# sourceMappingURL=InnerSubscriber.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklubmVyU3Vic2NyaWJlci5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJTdWJzY3JpYmVyXzEiLCJyZXF1aXJlIiwiSW5uZXJTdWJzY3JpYmVyIiwiX3N1cGVyIiwicGFyZW50Iiwib3V0ZXJWYWx1ZSIsIm91dGVySW5kZXgiLCJjYWxsIiwiaW5kZXgiLCJfbmV4dCIsInZhbHVlIiwibm90aWZ5TmV4dCIsIl9lcnJvciIsImVycm9yIiwibm90aWZ5RXJyb3IiLCJ1bnN1YnNjcmliZSIsIl9jb21wbGV0ZSIsIm5vdGlmeUNvbXBsZXRlIiwiU3Vic2NyaWJlciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0EsSUFBSUssZUFBZUMsUUFBUSxjQUFSLENBQW5CO0FBQ0E7Ozs7O0FBS0EsSUFBSUMsa0JBQW1CLFVBQVVDLE1BQVYsRUFBa0I7QUFDckNiLGNBQVVZLGVBQVYsRUFBMkJDLE1BQTNCO0FBQ0EsYUFBU0QsZUFBVCxDQUF5QkUsTUFBekIsRUFBaUNDLFVBQWpDLEVBQTZDQyxVQUE3QyxFQUF5RDtBQUNyREgsZUFBT0ksSUFBUCxDQUFZLElBQVo7QUFDQSxhQUFLSCxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxhQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLGFBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsYUFBS0UsS0FBTCxHQUFhLENBQWI7QUFDSDtBQUNETixvQkFBZ0JMLFNBQWhCLENBQTBCWSxLQUExQixHQUFrQyxVQUFVQyxLQUFWLEVBQWlCO0FBQy9DLGFBQUtOLE1BQUwsQ0FBWU8sVUFBWixDQUF1QixLQUFLTixVQUE1QixFQUF3Q0ssS0FBeEMsRUFBK0MsS0FBS0osVUFBcEQsRUFBZ0UsS0FBS0UsS0FBTCxFQUFoRSxFQUE4RSxJQUE5RTtBQUNILEtBRkQ7QUFHQU4sb0JBQWdCTCxTQUFoQixDQUEwQmUsTUFBMUIsR0FBbUMsVUFBVUMsS0FBVixFQUFpQjtBQUNoRCxhQUFLVCxNQUFMLENBQVlVLFdBQVosQ0FBd0JELEtBQXhCLEVBQStCLElBQS9CO0FBQ0EsYUFBS0UsV0FBTDtBQUNILEtBSEQ7QUFJQWIsb0JBQWdCTCxTQUFoQixDQUEwQm1CLFNBQTFCLEdBQXNDLFlBQVk7QUFDOUMsYUFBS1osTUFBTCxDQUFZYSxjQUFaLENBQTJCLElBQTNCO0FBQ0EsYUFBS0YsV0FBTDtBQUNILEtBSEQ7QUFJQSxXQUFPYixlQUFQO0FBQ0gsQ0FyQnNCLENBcUJyQkYsYUFBYWtCLFVBckJRLENBQXZCO0FBc0JBQyxRQUFRakIsZUFBUixHQUEwQkEsZUFBMUI7QUFDQSIsImZpbGUiOiJJbm5lclN1YnNjcmliZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4vU3Vic2NyaWJlcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBJbm5lclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbm5lclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5uZXJTdWJzY3JpYmVyKHBhcmVudCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub3V0ZXJWYWx1ZSA9IG91dGVyVmFsdWU7XG4gICAgICAgIHRoaXMub3V0ZXJJbmRleCA9IG91dGVySW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzLmluZGV4KyssIHRoaXMpO1xuICAgIH07XG4gICAgSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbm5lclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLklubmVyU3Vic2NyaWJlciA9IElubmVyU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmVyU3Vic2NyaWJlci5qcy5tYXAiXX0=
},{"./Subscriber":9}],3:[function(require,module,exports){
"use strict";

var Observable_1 = require('./Observable');
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        } else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}();
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./Observable":4}],4:[function(require,module,exports){
"use strict";

var root_1 = require('./util/root');
var toSubscriber_1 = require('./util/toSubscriber');
var observable_1 = require('./symbol/observable');
var pipe_1 = require('./util/pipe');
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        } else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        } catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    } catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                } else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    /** @deprecated internal use only */Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i - 0] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) {
                return value = x;
            }, function (err) {
                return reject(err);
            }, function () {
                return resolve(value);
            });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}();
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./symbol/observable":37,"./util/pipe":50,"./util/root":51,"./util/toSubscriber":53}],5:[function(require,module,exports){
"use strict";

exports.empty = {
    closed: true,
    next: function next(value) {},
    error: function error(err) {
        throw err;
    },
    complete: function complete() {}
};
//# sourceMappingURL=Observer.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9ic2VydmVyLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJlbXB0eSIsImNsb3NlZCIsIm5leHQiLCJ2YWx1ZSIsImVycm9yIiwiZXJyIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxRQUFRQyxLQUFSLEdBQWdCO0FBQ1pDLFlBQVEsSUFESTtBQUVaQyxVQUFNLGNBQVVDLEtBQVYsRUFBaUIsQ0FBRyxDQUZkO0FBR1pDLFdBQU8sZUFBVUMsR0FBVixFQUFlO0FBQUUsY0FBTUEsR0FBTjtBQUFZLEtBSHhCO0FBSVpDLGNBQVUsb0JBQVksQ0FBRztBQUpiLENBQWhCO0FBTUEiLCJmaWxlIjoiT2JzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHRocm93IGVycjsgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2ZXIuanMubWFwIl19
},{}],6:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('./Subscriber');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber);
exports.OuterSubscriber = OuterSubscriber;
//# sourceMappingURL=OuterSubscriber.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk91dGVyU3Vic2NyaWJlci5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJTdWJzY3JpYmVyXzEiLCJyZXF1aXJlIiwiT3V0ZXJTdWJzY3JpYmVyIiwiX3N1cGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJub3RpZnlOZXh0Iiwib3V0ZXJWYWx1ZSIsImlubmVyVmFsdWUiLCJvdXRlckluZGV4IiwiaW5uZXJJbmRleCIsImlubmVyU3ViIiwiZGVzdGluYXRpb24iLCJuZXh0Iiwibm90aWZ5RXJyb3IiLCJlcnJvciIsIm5vdGlmeUNvbXBsZXRlIiwiY29tcGxldGUiLCJTdWJzY3JpYmVyIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsWUFBYSxhQUFRLFVBQUtBLFNBQWQsSUFBNEIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3hELFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUlBLEVBQUVFLGNBQUYsQ0FBaUJELENBQWpCLENBQUosRUFBeUJGLEVBQUVFLENBQUYsSUFBT0QsRUFBRUMsQ0FBRixDQUFQO0FBQTFDLEtBQ0EsU0FBU0UsRUFBVCxHQUFjO0FBQUUsYUFBS0MsV0FBTCxHQUFtQkwsQ0FBbkI7QUFBdUI7QUFDdkNBLE1BQUVNLFNBQUYsR0FBY0wsTUFBTSxJQUFOLEdBQWFNLE9BQU9DLE1BQVAsQ0FBY1AsQ0FBZCxDQUFiLElBQWlDRyxHQUFHRSxTQUFILEdBQWVMLEVBQUVLLFNBQWpCLEVBQTRCLElBQUlGLEVBQUosRUFBN0QsQ0FBZDtBQUNILENBSkQ7QUFLQSxJQUFJSyxlQUFlQyxRQUFRLGNBQVIsQ0FBbkI7QUFDQTs7Ozs7QUFLQSxJQUFJQyxrQkFBbUIsVUFBVUMsTUFBVixFQUFrQjtBQUNyQ2IsY0FBVVksZUFBVixFQUEyQkMsTUFBM0I7QUFDQSxhQUFTRCxlQUFULEdBQTJCO0FBQ3ZCQyxlQUFPQyxLQUFQLENBQWEsSUFBYixFQUFtQkMsU0FBbkI7QUFDSDtBQUNESCxvQkFBZ0JMLFNBQWhCLENBQTBCUyxVQUExQixHQUF1QyxVQUFVQyxVQUFWLEVBQXNCQyxVQUF0QixFQUFrQ0MsVUFBbEMsRUFBOENDLFVBQTlDLEVBQTBEQyxRQUExRCxFQUFvRTtBQUN2RyxhQUFLQyxXQUFMLENBQWlCQyxJQUFqQixDQUFzQkwsVUFBdEI7QUFDSCxLQUZEO0FBR0FOLG9CQUFnQkwsU0FBaEIsQ0FBMEJpQixXQUExQixHQUF3QyxVQUFVQyxLQUFWLEVBQWlCSixRQUFqQixFQUEyQjtBQUMvRCxhQUFLQyxXQUFMLENBQWlCRyxLQUFqQixDQUF1QkEsS0FBdkI7QUFDSCxLQUZEO0FBR0FiLG9CQUFnQkwsU0FBaEIsQ0FBMEJtQixjQUExQixHQUEyQyxVQUFVTCxRQUFWLEVBQW9CO0FBQzNELGFBQUtDLFdBQUwsQ0FBaUJLLFFBQWpCO0FBQ0gsS0FGRDtBQUdBLFdBQU9mLGVBQVA7QUFDSCxDQWZzQixDQWVyQkYsYUFBYWtCLFVBZlEsQ0FBdkI7QUFnQkFDLFFBQVFqQixlQUFSLEdBQTBCQSxlQUExQjtBQUNBIiwiZmlsZSI6Ik91dGVyU3Vic2NyaWJlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIE91dGVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE91dGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPdXRlclN1YnNjcmliZXIoKSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBPdXRlclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG5leHBvcnRzLk91dGVyU3Vic2NyaWJlciA9IE91dGVyU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU91dGVyU3Vic2NyaWJlci5qcy5tYXAiXX0=
},{"./Subscriber":9}],7:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('./Observable');
var Subscriber_1 = require('./Subscriber');
var Subscription_1 = require('./Subscription');
var ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');
var SubjectSubscription_1 = require('./SubjectSubscription');
var rxSubscriber_1 = require('./symbol/rxSubscriber');
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber);
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = function (_super) {
    __extends(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        } else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated internal use only */Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        } else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        } else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        } else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable);
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated internal use only */AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        } else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject);
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./Observable":4,"./SubjectSubscription":8,"./Subscriber":9,"./Subscription":10,"./symbol/rxSubscriber":38,"./util/ObjectUnsubscribedError":39}],8:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = require('./Subscription');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription);
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN1YmplY3RTdWJzY3JpcHRpb24uanMiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZCIsImIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiU3Vic2NyaXB0aW9uXzEiLCJyZXF1aXJlIiwiU3ViamVjdFN1YnNjcmlwdGlvbiIsIl9zdXBlciIsInN1YmplY3QiLCJzdWJzY3JpYmVyIiwiY2FsbCIsImNsb3NlZCIsInVuc3Vic2NyaWJlIiwib2JzZXJ2ZXJzIiwibGVuZ3RoIiwiaXNTdG9wcGVkIiwic3Vic2NyaWJlckluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0EsSUFBSUssaUJBQWlCQyxRQUFRLGdCQUFSLENBQXJCO0FBQ0E7Ozs7O0FBS0EsSUFBSUMsc0JBQXVCLFVBQVVDLE1BQVYsRUFBa0I7QUFDekNiLGNBQVVZLG1CQUFWLEVBQStCQyxNQUEvQjtBQUNBLGFBQVNELG1CQUFULENBQTZCRSxPQUE3QixFQUFzQ0MsVUFBdEMsRUFBa0Q7QUFDOUNGLGVBQU9HLElBQVAsQ0FBWSxJQUFaO0FBQ0EsYUFBS0YsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsYUFBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxhQUFLRSxNQUFMLEdBQWMsS0FBZDtBQUNIO0FBQ0RMLHdCQUFvQkwsU0FBcEIsQ0FBOEJXLFdBQTlCLEdBQTRDLFlBQVk7QUFDcEQsWUFBSSxLQUFLRCxNQUFULEVBQWlCO0FBQ2I7QUFDSDtBQUNELGFBQUtBLE1BQUwsR0FBYyxJQUFkO0FBQ0EsWUFBSUgsVUFBVSxLQUFLQSxPQUFuQjtBQUNBLFlBQUlLLFlBQVlMLFFBQVFLLFNBQXhCO0FBQ0EsYUFBS0wsT0FBTCxHQUFlLElBQWY7QUFDQSxZQUFJLENBQUNLLFNBQUQsSUFBY0EsVUFBVUMsTUFBVixLQUFxQixDQUFuQyxJQUF3Q04sUUFBUU8sU0FBaEQsSUFBNkRQLFFBQVFHLE1BQXpFLEVBQWlGO0FBQzdFO0FBQ0g7QUFDRCxZQUFJSyxrQkFBa0JILFVBQVVJLE9BQVYsQ0FBa0IsS0FBS1IsVUFBdkIsQ0FBdEI7QUFDQSxZQUFJTyxvQkFBb0IsQ0FBQyxDQUF6QixFQUE0QjtBQUN4Qkgsc0JBQVVLLE1BQVYsQ0FBaUJGLGVBQWpCLEVBQWtDLENBQWxDO0FBQ0g7QUFDSixLQWZEO0FBZ0JBLFdBQU9WLG1CQUFQO0FBQ0gsQ0F6QjBCLENBeUJ6QkYsZUFBZWUsWUF6QlUsQ0FBM0I7QUEwQkFDLFFBQVFkLG1CQUFSLEdBQThCQSxtQkFBOUI7QUFDQSIsImZpbGUiOiJTdWJqZWN0U3Vic2NyaXB0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgc3Vic2NyaWJlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gc3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgU3ViamVjdFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMgfHwgb2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCB8fCBzdWJqZWN0LmlzU3RvcHBlZCB8fCBzdWJqZWN0LmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpYmVySW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZih0aGlzLnN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdFN1YnNjcmlwdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLlN1YmplY3RTdWJzY3JpcHRpb24gPSBTdWJqZWN0U3Vic2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdFN1YnNjcmlwdGlvbi5qcy5tYXAiXX0=
},{"./Subscription":10}],9:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = require('./util/isFunction');
var Subscription_1 = require('./Subscription');
var Observer_1 = require('./Observer');
var rxSubscriber_1 = require('./symbol/rxSubscriber');
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer_1.empty;
                    break;
                }
                if ((typeof destinationOrNext === 'undefined' ? 'undefined' : _typeof(destinationOrNext)) === 'object') {
                    // HACK(benlesh): To resolve an issue where Node users may have multiple
                    // copies of rxjs in their node_modules directory.
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();
                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        this.destination = trustedSubscriber;
                        trustedSubscriber.add(this);
                    } else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {
        return this;
    };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated internal use only */Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this,
            _parent = _a._parent,
            _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        } else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                } else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            } else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            } else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function wrappedComplete() {
                    return _this._complete.call(_this._context);
                };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                } else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            } else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        } catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        } catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    /** @deprecated internal use only */SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber);
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || 'syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber];
}
//# sourceMappingURL=Subscriber.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./Observer":5,"./Subscription":10,"./symbol/rxSubscriber":38,"./util/isFunction":45}],10:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isArray_1 = require('./util/isArray');
var isObject_1 = require('./util/isObject');
var isFunction_1 = require('./util/isFunction');
var tryCatch_1 = require('./util/tryCatch');
var errorObject_1 = require('./util/errorObject');
var UnsubscriptionError_1 = require('./util/UnsubscriptionError');
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this,
            _parent = _a._parent,
            _parents = _a._parents,
            _unsubscribe = _a._unsubscribe,
            _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        } else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || teardown === Subscription.EMPTY) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown === 'undefined' ? 'undefined' : _typeof(teardown)) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                } else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                } else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                        var tmp = subscription;
                        subscription = new Subscription();
                        subscription._subscriptions = [tmp];
                    }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this,
            _parent = _a._parent,
            _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        } else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        } else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription());
    return Subscription;
}();
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) {
        return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);
    }, []);
}
//# sourceMappingURL=Subscription.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./util/UnsubscriptionError":41,"./util/errorObject":42,"./util/isArray":43,"./util/isFunction":45,"./util/isObject":46,"./util/tryCatch":54}],11:[function(require,module,exports){
"use strict";

var Observable_1 = require('../../Observable');
var from_1 = require('../../observable/from');
Observable_1.Observable.from = from_1.from;
//# sourceMappingURL=from.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb20uanMiXSwibmFtZXMiOlsiT2JzZXJ2YWJsZV8xIiwicmVxdWlyZSIsImZyb21fMSIsIk9ic2VydmFibGUiLCJmcm9tIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlQyxRQUFRLGtCQUFSLENBQW5CO0FBQ0EsSUFBSUMsU0FBU0QsUUFBUSx1QkFBUixDQUFiO0FBQ0FELGFBQWFHLFVBQWIsQ0FBd0JDLElBQXhCLEdBQStCRixPQUFPRSxJQUF0QztBQUNBIiwiZmlsZSI6ImZyb20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZnJvbV8xID0gcmVxdWlyZSgnLi4vLi4vb2JzZXJ2YWJsZS9mcm9tJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tID0gZnJvbV8xLmZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCJdfQ==
},{"../../Observable":4,"../../observable/from":25}],12:[function(require,module,exports){
"use strict";

var Observable_1 = require('../../Observable');
var fromPromise_1 = require('../../observable/fromPromise');
Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
//# sourceMappingURL=fromPromise.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb21Qcm9taXNlLmpzIl0sIm5hbWVzIjpbIk9ic2VydmFibGVfMSIsInJlcXVpcmUiLCJmcm9tUHJvbWlzZV8xIiwiT2JzZXJ2YWJsZSIsImZyb21Qcm9taXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlQyxRQUFRLGtCQUFSLENBQW5CO0FBQ0EsSUFBSUMsZ0JBQWdCRCxRQUFRLDhCQUFSLENBQXBCO0FBQ0FELGFBQWFHLFVBQWIsQ0FBd0JDLFdBQXhCLEdBQXNDRixjQUFjRSxXQUFwRDtBQUNBIiwiZmlsZSI6ImZyb21Qcm9taXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vLi4vT2JzZXJ2YWJsZScpO1xudmFyIGZyb21Qcm9taXNlXzEgPSByZXF1aXJlKCcuLi8uLi9vYnNlcnZhYmxlL2Zyb21Qcm9taXNlJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZSA9IGZyb21Qcm9taXNlXzEuZnJvbVByb21pc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tUHJvbWlzZS5qcy5tYXAiXX0=
},{"../../Observable":4,"../../observable/fromPromise":26}],13:[function(require,module,exports){
"use strict";

var Observable_1 = require('../../Observable');
var distinct_1 = require('../../operator/distinct');
Observable_1.Observable.prototype.distinct = distinct_1.distinct;
//# sourceMappingURL=distinct.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3RpbmN0LmpzIl0sIm5hbWVzIjpbIk9ic2VydmFibGVfMSIsInJlcXVpcmUiLCJkaXN0aW5jdF8xIiwiT2JzZXJ2YWJsZSIsInByb3RvdHlwZSIsImRpc3RpbmN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlQyxRQUFRLGtCQUFSLENBQW5CO0FBQ0EsSUFBSUMsYUFBYUQsUUFBUSx5QkFBUixDQUFqQjtBQUNBRCxhQUFhRyxVQUFiLENBQXdCQyxTQUF4QixDQUFrQ0MsUUFBbEMsR0FBNkNILFdBQVdHLFFBQXhEO0FBQ0EiLCJmaWxlIjoiZGlzdGluY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZGlzdGluY3RfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL2Rpc3RpbmN0Jyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGlzdGluY3QgPSBkaXN0aW5jdF8xLmRpc3RpbmN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3QuanMubWFwIl19
},{"../../Observable":4,"../../operator/distinct":27}],14:[function(require,module,exports){
"use strict";

var Observable_1 = require('../../Observable');
var filter_1 = require('../../operator/filter');
Observable_1.Observable.prototype.filter = filter_1.filter;
//# sourceMappingURL=filter.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlci5qcyJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlXzEiLCJyZXF1aXJlIiwiZmlsdGVyXzEiLCJPYnNlcnZhYmxlIiwicHJvdG90eXBlIiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlQyxRQUFRLGtCQUFSLENBQW5CO0FBQ0EsSUFBSUMsV0FBV0QsUUFBUSx1QkFBUixDQUFmO0FBQ0FELGFBQWFHLFVBQWIsQ0FBd0JDLFNBQXhCLENBQWtDQyxNQUFsQyxHQUEyQ0gsU0FBU0csTUFBcEQ7QUFDQSIsImZpbGUiOiJmaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9maWx0ZXInKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5maWx0ZXIgPSBmaWx0ZXJfMS5maWx0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIl19
},{"../../Observable":4,"../../operator/filter":28}],15:[function(require,module,exports){
"use strict";

var Observable_1 = require('../../Observable');
var map_1 = require('../../operator/map');
Observable_1.Observable.prototype.map = map_1.map;
//# sourceMappingURL=map.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlXzEiLCJyZXF1aXJlIiwibWFwXzEiLCJPYnNlcnZhYmxlIiwicHJvdG90eXBlIiwibWFwIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlQyxRQUFRLGtCQUFSLENBQW5CO0FBQ0EsSUFBSUMsUUFBUUQsUUFBUSxvQkFBUixDQUFaO0FBQ0FELGFBQWFHLFVBQWIsQ0FBd0JDLFNBQXhCLENBQWtDQyxHQUFsQyxHQUF3Q0gsTUFBTUcsR0FBOUM7QUFDQSIsImZpbGUiOiJtYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbWFwXzEgPSByZXF1aXJlKCcuLi8uLi9vcGVyYXRvci9tYXAnKTtcbk9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAgPSBtYXBfMS5tYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIl19
},{"../../Observable":4,"../../operator/map":29}],16:[function(require,module,exports){
"use strict";

var Observable_1 = require('../../Observable');
var mergeMap_1 = require('../../operator/mergeMap');
Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
//# sourceMappingURL=mergeMap.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlTWFwLmpzIl0sIm5hbWVzIjpbIk9ic2VydmFibGVfMSIsInJlcXVpcmUiLCJtZXJnZU1hcF8xIiwiT2JzZXJ2YWJsZSIsInByb3RvdHlwZSIsIm1lcmdlTWFwIiwiZmxhdE1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsZUFBZUMsUUFBUSxrQkFBUixDQUFuQjtBQUNBLElBQUlDLGFBQWFELFFBQVEseUJBQVIsQ0FBakI7QUFDQUQsYUFBYUcsVUFBYixDQUF3QkMsU0FBeEIsQ0FBa0NDLFFBQWxDLEdBQTZDSCxXQUFXRyxRQUF4RDtBQUNBTCxhQUFhRyxVQUFiLENBQXdCQyxTQUF4QixDQUFrQ0UsT0FBbEMsR0FBNENKLFdBQVdHLFFBQXZEO0FBQ0EiLCJmaWxlIjoibWVyZ2VNYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi8uLi9PYnNlcnZhYmxlJyk7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoJy4uLy4uL29wZXJhdG9yL21lcmdlTWFwJyk7XG5PYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS5wcm90b3R5cGUubWVyZ2VNYXAgPSBtZXJnZU1hcF8xLm1lcmdlTWFwO1xuT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUucHJvdG90eXBlLmZsYXRNYXAgPSBtZXJnZU1hcF8xLm1lcmdlTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIl19
},{"../../Observable":4,"../../operator/mergeMap":30}],17:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('../Observable');
var ScalarObservable_1 = require('./ScalarObservable');
var EmptyObservable_1 = require('./EmptyObservable');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = function (_super) {
    __extends(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
        _super.call(this);
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
        var length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        } else if (length === 1) {
            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
        } else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    };
    ArrayLikeObservable.dispatch = function (state) {
        var arrayLike = state.arrayLike,
            index = state.index,
            length = state.length,
            subscriber = state.subscriber;
        if (subscriber.closed) {
            return;
        }
        if (index >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index]);
        state.index = index + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ArrayLikeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this,
            arrayLike = _a.arrayLike,
            scheduler = _a.scheduler;
        var length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
            });
        } else {
            for (var i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayLikeObservable;
}(Observable_1.Observable);
exports.ArrayLikeObservable = ArrayLikeObservable;
//# sourceMappingURL=ArrayLikeObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFycmF5TGlrZU9ic2VydmFibGUuanMiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZCIsImIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiT2JzZXJ2YWJsZV8xIiwicmVxdWlyZSIsIlNjYWxhck9ic2VydmFibGVfMSIsIkVtcHR5T2JzZXJ2YWJsZV8xIiwiQXJyYXlMaWtlT2JzZXJ2YWJsZSIsIl9zdXBlciIsImFycmF5TGlrZSIsInNjaGVkdWxlciIsImNhbGwiLCJsZW5ndGgiLCJfaXNTY2FsYXIiLCJ2YWx1ZSIsIkVtcHR5T2JzZXJ2YWJsZSIsIlNjYWxhck9ic2VydmFibGUiLCJkaXNwYXRjaCIsInN0YXRlIiwiaW5kZXgiLCJzdWJzY3JpYmVyIiwiY2xvc2VkIiwiY29tcGxldGUiLCJuZXh0Iiwic2NoZWR1bGUiLCJfc3Vic2NyaWJlIiwiX2EiLCJpIiwiT2JzZXJ2YWJsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0EsSUFBSUssZUFBZUMsUUFBUSxlQUFSLENBQW5CO0FBQ0EsSUFBSUMscUJBQXFCRCxRQUFRLG9CQUFSLENBQXpCO0FBQ0EsSUFBSUUsb0JBQW9CRixRQUFRLG1CQUFSLENBQXhCO0FBQ0E7Ozs7O0FBS0EsSUFBSUcsc0JBQXVCLFVBQVVDLE1BQVYsRUFBa0I7QUFDekNmLGNBQVVjLG1CQUFWLEVBQStCQyxNQUEvQjtBQUNBLGFBQVNELG1CQUFULENBQTZCRSxTQUE3QixFQUF3Q0MsU0FBeEMsRUFBbUQ7QUFDL0NGLGVBQU9HLElBQVAsQ0FBWSxJQUFaO0FBQ0EsYUFBS0YsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxhQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFlBQUksQ0FBQ0EsU0FBRCxJQUFjRCxVQUFVRyxNQUFWLEtBQXFCLENBQXZDLEVBQTBDO0FBQ3RDLGlCQUFLQyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsaUJBQUtDLEtBQUwsR0FBYUwsVUFBVSxDQUFWLENBQWI7QUFDSDtBQUNKO0FBQ0RGLHdCQUFvQkwsTUFBcEIsR0FBNkIsVUFBVU8sU0FBVixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDekQsWUFBSUUsU0FBU0gsVUFBVUcsTUFBdkI7QUFDQSxZQUFJQSxXQUFXLENBQWYsRUFBa0I7QUFDZCxtQkFBTyxJQUFJTixrQkFBa0JTLGVBQXRCLEVBQVA7QUFDSCxTQUZELE1BR0ssSUFBSUgsV0FBVyxDQUFmLEVBQWtCO0FBQ25CLG1CQUFPLElBQUlQLG1CQUFtQlcsZ0JBQXZCLENBQXdDUCxVQUFVLENBQVYsQ0FBeEMsRUFBc0RDLFNBQXRELENBQVA7QUFDSCxTQUZJLE1BR0E7QUFDRCxtQkFBTyxJQUFJSCxtQkFBSixDQUF3QkUsU0FBeEIsRUFBbUNDLFNBQW5DLENBQVA7QUFDSDtBQUNKLEtBWEQ7QUFZQUgsd0JBQW9CVSxRQUFwQixHQUErQixVQUFVQyxLQUFWLEVBQWlCO0FBQzVDLFlBQUlULFlBQVlTLE1BQU1ULFNBQXRCO0FBQUEsWUFBaUNVLFFBQVFELE1BQU1DLEtBQS9DO0FBQUEsWUFBc0RQLFNBQVNNLE1BQU1OLE1BQXJFO0FBQUEsWUFBNkVRLGFBQWFGLE1BQU1FLFVBQWhHO0FBQ0EsWUFBSUEsV0FBV0MsTUFBZixFQUF1QjtBQUNuQjtBQUNIO0FBQ0QsWUFBSUYsU0FBU1AsTUFBYixFQUFxQjtBQUNqQlEsdUJBQVdFLFFBQVg7QUFDQTtBQUNIO0FBQ0RGLG1CQUFXRyxJQUFYLENBQWdCZCxVQUFVVSxLQUFWLENBQWhCO0FBQ0FELGNBQU1DLEtBQU4sR0FBY0EsUUFBUSxDQUF0QjtBQUNBLGFBQUtLLFFBQUwsQ0FBY04sS0FBZDtBQUNILEtBWkQ7QUFhQSx3Q0FBcUNYLG9CQUFvQlAsU0FBcEIsQ0FBOEJ5QixVQUE5QixHQUEyQyxVQUFVTCxVQUFWLEVBQXNCO0FBQ2xHLFlBQUlELFFBQVEsQ0FBWjtBQUNBLFlBQUlPLEtBQUssSUFBVDtBQUFBLFlBQWVqQixZQUFZaUIsR0FBR2pCLFNBQTlCO0FBQUEsWUFBeUNDLFlBQVlnQixHQUFHaEIsU0FBeEQ7QUFDQSxZQUFJRSxTQUFTSCxVQUFVRyxNQUF2QjtBQUNBLFlBQUlGLFNBQUosRUFBZTtBQUNYLG1CQUFPQSxVQUFVYyxRQUFWLENBQW1CakIsb0JBQW9CVSxRQUF2QyxFQUFpRCxDQUFqRCxFQUFvRDtBQUN2RFIsMkJBQVdBLFNBRDRDLEVBQ2pDVSxPQUFPQSxLQUQwQixFQUNuQlAsUUFBUUEsTUFEVyxFQUNIUSxZQUFZQTtBQURULGFBQXBELENBQVA7QUFHSCxTQUpELE1BS0s7QUFDRCxpQkFBSyxJQUFJTyxJQUFJLENBQWIsRUFBZ0JBLElBQUlmLE1BQUosSUFBYyxDQUFDUSxXQUFXQyxNQUExQyxFQUFrRE0sR0FBbEQsRUFBdUQ7QUFDbkRQLDJCQUFXRyxJQUFYLENBQWdCZCxVQUFVa0IsQ0FBVixDQUFoQjtBQUNIO0FBQ0RQLHVCQUFXRSxRQUFYO0FBQ0g7QUFDSixLQWZvQztBQWdCckMsV0FBT2YsbUJBQVA7QUFDSCxDQXJEMEIsQ0FxRHpCSixhQUFheUIsVUFyRFksQ0FBM0I7QUFzREFDLFFBQVF0QixtQkFBUixHQUE4QkEsbUJBQTlCO0FBQ0EiLCJmaWxlIjoiQXJyYXlMaWtlT2JzZXJ2YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIFNjYWxhck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vU2NhbGFyT2JzZXJ2YWJsZScpO1xudmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9FbXB0eU9ic2VydmFibGUnKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICogQGhpZGUgdHJ1ZVxuICovXG52YXIgQXJyYXlMaWtlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFycmF5TGlrZU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXJyYXlMaWtlT2JzZXJ2YWJsZShhcnJheUxpa2UsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcnJheUxpa2UgPSBhcnJheUxpa2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBpZiAoIXNjaGVkdWxlciAmJiBhcnJheUxpa2UubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1NjYWxhciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gYXJyYXlMaWtlWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFycmF5TGlrZU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGFycmF5TGlrZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZV8xLkVtcHR5T2JzZXJ2YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJPYnNlcnZhYmxlXzEuU2NhbGFyT2JzZXJ2YWJsZShhcnJheUxpa2VbMF0sIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5TGlrZU9ic2VydmFibGUoYXJyYXlMaWtlLCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBcnJheUxpa2VPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBhcnJheUxpa2UgPSBzdGF0ZS5hcnJheUxpa2UsIGluZGV4ID0gc3RhdGUuaW5kZXgsIGxlbmd0aCA9IHN0YXRlLmxlbmd0aCwgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXI7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlMaWtlW2luZGV4XSk7XG4gICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbiAgICB9O1xuICAgIC8qKiBAZGVwcmVjYXRlZCBpbnRlcm5hbCB1c2Ugb25seSAqLyBBcnJheUxpa2VPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYXJyYXlMaWtlID0gX2EuYXJyYXlMaWtlLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKEFycmF5TGlrZU9ic2VydmFibGUuZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxpa2U6IGFycmF5TGlrZSwgaW5kZXg6IGluZGV4LCBsZW5ndGg6IGxlbmd0aCwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheUxpa2VbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXJyYXlMaWtlT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuQXJyYXlMaWtlT2JzZXJ2YWJsZSA9IEFycmF5TGlrZU9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcnJheUxpa2VPYnNlcnZhYmxlLmpzLm1hcCJdfQ==
},{"../Observable":4,"./EmptyObservable":19,"./ScalarObservable":23}],18:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('../Observable');
var ScalarObservable_1 = require('./ScalarObservable');
var EmptyObservable_1 = require('./EmptyObservable');
var isScheduler_1 = require('../util/isScheduler');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = function (_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        } else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        } else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        } else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array,
            index = state.index,
            count = state.count,
            subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        } else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable);
exports.ArrayObservable = ArrayObservable;
//# sourceMappingURL=ArrayObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../Observable":4,"../util/isScheduler":48,"./EmptyObservable":19,"./ScalarObservable":23}],19:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('../Observable');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = function (_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    /** @deprecated internal use only */EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        } else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable);
exports.EmptyObservable = EmptyObservable;
//# sourceMappingURL=EmptyObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVtcHR5T2JzZXJ2YWJsZS5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJPYnNlcnZhYmxlXzEiLCJyZXF1aXJlIiwiRW1wdHlPYnNlcnZhYmxlIiwiX3N1cGVyIiwic2NoZWR1bGVyIiwiY2FsbCIsImRpc3BhdGNoIiwiYXJnIiwic3Vic2NyaWJlciIsImNvbXBsZXRlIiwiX3N1YnNjcmliZSIsInNjaGVkdWxlIiwiT2JzZXJ2YWJsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0EsSUFBSUssZUFBZUMsUUFBUSxlQUFSLENBQW5CO0FBQ0E7Ozs7O0FBS0EsSUFBSUMsa0JBQW1CLFVBQVVDLE1BQVYsRUFBa0I7QUFDckNiLGNBQVVZLGVBQVYsRUFBMkJDLE1BQTNCO0FBQ0EsYUFBU0QsZUFBVCxDQUF5QkUsU0FBekIsRUFBb0M7QUFDaENELGVBQU9FLElBQVAsQ0FBWSxJQUFaO0FBQ0EsYUFBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDSDtBQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBRixvQkFBZ0JILE1BQWhCLEdBQXlCLFVBQVVLLFNBQVYsRUFBcUI7QUFDMUMsZUFBTyxJQUFJRixlQUFKLENBQW9CRSxTQUFwQixDQUFQO0FBQ0gsS0FGRDtBQUdBRixvQkFBZ0JJLFFBQWhCLEdBQTJCLFVBQVVDLEdBQVYsRUFBZTtBQUN0QyxZQUFJQyxhQUFhRCxJQUFJQyxVQUFyQjtBQUNBQSxtQkFBV0MsUUFBWDtBQUNILEtBSEQ7QUFJQSx3Q0FBcUNQLGdCQUFnQkwsU0FBaEIsQ0FBMEJhLFVBQTFCLEdBQXVDLFVBQVVGLFVBQVYsRUFBc0I7QUFDOUYsWUFBSUosWUFBWSxLQUFLQSxTQUFyQjtBQUNBLFlBQUlBLFNBQUosRUFBZTtBQUNYLG1CQUFPQSxVQUFVTyxRQUFWLENBQW1CVCxnQkFBZ0JJLFFBQW5DLEVBQTZDLENBQTdDLEVBQWdELEVBQUVFLFlBQVlBLFVBQWQsRUFBaEQsQ0FBUDtBQUNILFNBRkQsTUFHSztBQUNEQSx1QkFBV0MsUUFBWDtBQUNIO0FBQ0osS0FSb0M7QUFTckMsV0FBT1AsZUFBUDtBQUNILENBbEVzQixDQWtFckJGLGFBQWFZLFVBbEVRLENBQXZCO0FBbUVBQyxRQUFRWCxlQUFSLEdBQTBCQSxlQUExQjtBQUNBIiwiZmlsZSI6IkVtcHR5T2JzZXJ2YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBFbXB0eU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbXB0eU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1wdHlPYnNlcnZhYmxlKHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIG5vIGl0ZW1zIHRvIHRoZSBPYnNlcnZlciBhbmQgaW1tZWRpYXRlbHlcbiAgICAgKiBlbWl0cyBhIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5KdXN0IGVtaXRzICdjb21wbGV0ZScsIGFuZCBub3RoaW5nIGVsc2UuXG4gICAgICogPC9zcGFuPlxuICAgICAqXG4gICAgICogPGltZyBzcmM9XCIuL2ltZy9lbXB0eS5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAgICAgKlxuICAgICAqIFRoaXMgc3RhdGljIG9wZXJhdG9yIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgYSBzaW1wbGUgT2JzZXJ2YWJsZSB0aGF0IG9ubHlcbiAgICAgKiBlbWl0cyB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uLiBJdCBjYW4gYmUgdXNlZCBmb3IgY29tcG9zaW5nIHdpdGggb3RoZXJcbiAgICAgKiBPYnNlcnZhYmxlcywgc3VjaCBhcyBpbiBhIHtAbGluayBtZXJnZU1hcH0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IHRoZSBudW1iZXIgNywgdGhlbiBjb21wbGV0ZS48L2NhcHRpb24+XG4gICAgICogdmFyIHJlc3VsdCA9IFJ4Lk9ic2VydmFibGUuZW1wdHkoKS5zdGFydFdpdGgoNyk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBhbmQgZmxhdHRlbiBvbmx5IG9kZCBudW1iZXJzIHRvIHRoZSBzZXF1ZW5jZSAnYScsICdiJywgJ2MnPC9jYXB0aW9uPlxuICAgICAqIHZhciBpbnRlcnZhbCA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCk7XG4gICAgICogdmFyIHJlc3VsdCA9IGludGVydmFsLm1lcmdlTWFwKHggPT5cbiAgICAgKiAgIHggJSAyID09PSAxID8gUnguT2JzZXJ2YWJsZS5vZignYScsICdiJywgJ2MnKSA6IFJ4Lk9ic2VydmFibGUuZW1wdHkoKVxuICAgICAqICk7XG4gICAgICogcmVzdWx0LnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAgICAgKlxuICAgICAqIC8vIFJlc3VsdHMgaW4gdGhlIGZvbGxvd2luZyB0byB0aGUgY29uc29sZTpcbiAgICAgKiAvLyB4IGlzIGVxdWFsIHRvIHRoZSBjb3VudCBvbiB0aGUgaW50ZXJ2YWwgZWcoMCwxLDIsMywuLi4pXG4gICAgICogLy8geCB3aWxsIG9jY3VyIGV2ZXJ5IDEwMDBtc1xuICAgICAqIC8vIGlmIHggJSAyIGlzIGVxdWFsIHRvIDEgcHJpbnQgYWJjXG4gICAgICogLy8gaWYgeCAlIDIgaXMgbm90IGVxdWFsIHRvIDEgbm90aGluZyB3aWxsIGJlIG91dHB1dFxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuICAgICAqIEBzZWUge0BsaW5rIG5ldmVyfVxuICAgICAqIEBzZWUge0BsaW5rIG9mfVxuICAgICAqIEBzZWUge0BsaW5rIHRocm93fVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIEEge0BsaW5rIElTY2hlZHVsZXJ9IHRvIHVzZSBmb3Igc2NoZWR1bGluZ1xuICAgICAqIHRoZSBlbWlzc2lvbiBvZiB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uLlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIFwiZW1wdHlcIiBPYnNlcnZhYmxlOiBlbWl0cyBvbmx5IHRoZSBjb21wbGV0ZVxuICAgICAqIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBAc3RhdGljIHRydWVcbiAgICAgKiBAbmFtZSBlbXB0eVxuICAgICAqIEBvd25lciBPYnNlcnZhYmxlXG4gICAgICovXG4gICAgRW1wdHlPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGUoc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIEVtcHR5T2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBhcmcuc3Vic2NyaWJlcjtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgLyoqIEBkZXByZWNhdGVkIGludGVybmFsIHVzZSBvbmx5ICovIEVtcHR5T2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShFbXB0eU9ic2VydmFibGUuZGlzcGF0Y2gsIDAsIHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEVtcHR5T2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuRW1wdHlPYnNlcnZhYmxlID0gRW1wdHlPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1wdHlPYnNlcnZhYmxlLmpzLm1hcCJdfQ==
},{"../Observable":4}],20:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = require('../util/isArray');
var isArrayLike_1 = require('../util/isArrayLike');
var isPromise_1 = require('../util/isPromise');
var PromiseObservable_1 = require('./PromiseObservable');
var IteratorObservable_1 = require('./IteratorObservable');
var ArrayObservable_1 = require('./ArrayObservable');
var ArrayLikeObservable_1 = require('./ArrayLikeObservable');
var iterator_1 = require('../symbol/iterator');
var Observable_1 = require('../Observable');
var observeOn_1 = require('../operators/observeOn');
var observable_1 = require('../symbol/observable');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = function (_super) {
    __extends(FromObservable, _super);
    function FromObservable(ish, scheduler) {
        _super.call(this, null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 10 20 30
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 3 6 12 24 48 96 192 384 768 1536
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    FromObservable.create = function (ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable_1.observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            } else if (isArray_1.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            } else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            } else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            } else if (isArrayLike_1.isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && (typeof ish === 'undefined' ? 'undefined' : _typeof(ish)) || ish) + ' is not observable');
    };
    /** @deprecated internal use only */FromObservable.prototype._subscribe = function (subscriber) {
        var ish = this.ish;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable_1.observable]().subscribe(subscriber);
        } else {
            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    };
    return FromObservable;
}(Observable_1.Observable);
exports.FromObservable = FromObservable;
//# sourceMappingURL=FromObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../Observable":4,"../operators/observeOn":35,"../symbol/iterator":36,"../symbol/observable":37,"../util/isArray":43,"../util/isArrayLike":44,"../util/isPromise":47,"./ArrayLikeObservable":17,"./ArrayObservable":18,"./IteratorObservable":21,"./PromiseObservable":22}],21:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('../util/root');
var Observable_1 = require('../Observable');
var iterator_1 = require('../symbol/iterator');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = function (_super) {
    __extends(IteratorObservable, _super);
    function IteratorObservable(iterator, scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
        if (iterator == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator);
    }
    IteratorObservable.create = function (iterator, scheduler) {
        return new IteratorObservable(iterator, scheduler);
    };
    IteratorObservable.dispatch = function (state) {
        var index = state.index,
            hasError = state.hasError,
            iterator = state.iterator,
            subscriber = state.subscriber;
        if (hasError) {
            subscriber.error(state.error);
            return;
        }
        var result = iterator.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state.index = index + 1;
        if (subscriber.closed) {
            if (typeof iterator.return === 'function') {
                iterator.return();
            }
            return;
        }
        this.schedule(state);
    };
    /** @deprecated internal use only */IteratorObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this,
            iterator = _a.iterator,
            scheduler = _a.scheduler;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index: index, iterator: iterator, subscriber: subscriber
            });
        } else {
            do {
                var result = iterator.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                } else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    if (typeof iterator.return === 'function') {
                        iterator.return();
                    }
                    break;
                }
            } while (true);
        }
    };
    return IteratorObservable;
}(Observable_1.Observable);
exports.IteratorObservable = IteratorObservable;
var StringIterator = function () {
    function StringIterator(str, idx, len) {
        if (idx === void 0) {
            idx = 0;
        }
        if (len === void 0) {
            len = str.length;
        }
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    StringIterator.prototype[iterator_1.iterator] = function () {
        return this;
    };
    StringIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    };
    return StringIterator;
}();
var ArrayIterator = function () {
    function ArrayIterator(arr, idx, len) {
        if (idx === void 0) {
            idx = 0;
        }
        if (len === void 0) {
            len = toLength(arr);
        }
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    ArrayIterator.prototype[iterator_1.iterator] = function () {
        return this;
    };
    ArrayIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    };
    return ArrayIterator;
}();
function getIterator(obj) {
    var i = obj[iterator_1.iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[iterator_1.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root_1.root.isFinite(value);
}
function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}
//# sourceMappingURL=IteratorObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkl0ZXJhdG9yT2JzZXJ2YWJsZS5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJyb290XzEiLCJyZXF1aXJlIiwiT2JzZXJ2YWJsZV8xIiwiaXRlcmF0b3JfMSIsIkl0ZXJhdG9yT2JzZXJ2YWJsZSIsIl9zdXBlciIsIml0ZXJhdG9yIiwic2NoZWR1bGVyIiwiY2FsbCIsIkVycm9yIiwiZ2V0SXRlcmF0b3IiLCJkaXNwYXRjaCIsInN0YXRlIiwiaW5kZXgiLCJoYXNFcnJvciIsInN1YnNjcmliZXIiLCJlcnJvciIsInJlc3VsdCIsIm5leHQiLCJkb25lIiwiY29tcGxldGUiLCJ2YWx1ZSIsImNsb3NlZCIsInJldHVybiIsInNjaGVkdWxlIiwiX3N1YnNjcmliZSIsIl9hIiwiT2JzZXJ2YWJsZSIsImV4cG9ydHMiLCJTdHJpbmdJdGVyYXRvciIsInN0ciIsImlkeCIsImxlbiIsImxlbmd0aCIsImNoYXJBdCIsInVuZGVmaW5lZCIsIkFycmF5SXRlcmF0b3IiLCJhcnIiLCJ0b0xlbmd0aCIsIm9iaiIsImkiLCJUeXBlRXJyb3IiLCJtYXhTYWZlSW50ZWdlciIsIk1hdGgiLCJwb3ciLCJvIiwiaXNOYU4iLCJudW1iZXJJc0Zpbml0ZSIsInNpZ24iLCJmbG9vciIsImFicyIsInJvb3QiLCJpc0Zpbml0ZSIsInZhbHVlQXNOdW1iZXIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0EsSUFBSUssU0FBU0MsUUFBUSxjQUFSLENBQWI7QUFDQSxJQUFJQyxlQUFlRCxRQUFRLGVBQVIsQ0FBbkI7QUFDQSxJQUFJRSxhQUFhRixRQUFRLG9CQUFSLENBQWpCO0FBQ0E7Ozs7O0FBS0EsSUFBSUcscUJBQXNCLFVBQVVDLE1BQVYsRUFBa0I7QUFDeENmLGNBQVVjLGtCQUFWLEVBQThCQyxNQUE5QjtBQUNBLGFBQVNELGtCQUFULENBQTRCRSxRQUE1QixFQUFzQ0MsU0FBdEMsRUFBaUQ7QUFDN0NGLGVBQU9HLElBQVAsQ0FBWSxJQUFaO0FBQ0EsYUFBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxZQUFJRCxZQUFZLElBQWhCLEVBQXNCO0FBQ2xCLGtCQUFNLElBQUlHLEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0g7QUFDRCxhQUFLSCxRQUFMLEdBQWdCSSxZQUFZSixRQUFaLENBQWhCO0FBQ0g7QUFDREYsdUJBQW1CTCxNQUFuQixHQUE0QixVQUFVTyxRQUFWLEVBQW9CQyxTQUFwQixFQUErQjtBQUN2RCxlQUFPLElBQUlILGtCQUFKLENBQXVCRSxRQUF2QixFQUFpQ0MsU0FBakMsQ0FBUDtBQUNILEtBRkQ7QUFHQUgsdUJBQW1CTyxRQUFuQixHQUE4QixVQUFVQyxLQUFWLEVBQWlCO0FBQzNDLFlBQUlDLFFBQVFELE1BQU1DLEtBQWxCO0FBQUEsWUFBeUJDLFdBQVdGLE1BQU1FLFFBQTFDO0FBQUEsWUFBb0RSLFdBQVdNLE1BQU1OLFFBQXJFO0FBQUEsWUFBK0VTLGFBQWFILE1BQU1HLFVBQWxHO0FBQ0EsWUFBSUQsUUFBSixFQUFjO0FBQ1ZDLHVCQUFXQyxLQUFYLENBQWlCSixNQUFNSSxLQUF2QjtBQUNBO0FBQ0g7QUFDRCxZQUFJQyxTQUFTWCxTQUFTWSxJQUFULEVBQWI7QUFDQSxZQUFJRCxPQUFPRSxJQUFYLEVBQWlCO0FBQ2JKLHVCQUFXSyxRQUFYO0FBQ0E7QUFDSDtBQUNETCxtQkFBV0csSUFBWCxDQUFnQkQsT0FBT0ksS0FBdkI7QUFDQVQsY0FBTUMsS0FBTixHQUFjQSxRQUFRLENBQXRCO0FBQ0EsWUFBSUUsV0FBV08sTUFBZixFQUF1QjtBQUNuQixnQkFBSSxPQUFPaEIsU0FBU2lCLE1BQWhCLEtBQTJCLFVBQS9CLEVBQTJDO0FBQ3ZDakIseUJBQVNpQixNQUFUO0FBQ0g7QUFDRDtBQUNIO0FBQ0QsYUFBS0MsUUFBTCxDQUFjWixLQUFkO0FBQ0gsS0FwQkQ7QUFxQkEsd0NBQXFDUixtQkFBbUJQLFNBQW5CLENBQTZCNEIsVUFBN0IsR0FBMEMsVUFBVVYsVUFBVixFQUFzQjtBQUNqRyxZQUFJRixRQUFRLENBQVo7QUFDQSxZQUFJYSxLQUFLLElBQVQ7QUFBQSxZQUFlcEIsV0FBV29CLEdBQUdwQixRQUE3QjtBQUFBLFlBQXVDQyxZQUFZbUIsR0FBR25CLFNBQXREO0FBQ0EsWUFBSUEsU0FBSixFQUFlO0FBQ1gsbUJBQU9BLFVBQVVpQixRQUFWLENBQW1CcEIsbUJBQW1CTyxRQUF0QyxFQUFnRCxDQUFoRCxFQUFtRDtBQUN0REUsdUJBQU9BLEtBRCtDLEVBQ3hDUCxVQUFVQSxRQUQ4QixFQUNwQlMsWUFBWUE7QUFEUSxhQUFuRCxDQUFQO0FBR0gsU0FKRCxNQUtLO0FBQ0QsZUFBRztBQUNDLG9CQUFJRSxTQUFTWCxTQUFTWSxJQUFULEVBQWI7QUFDQSxvQkFBSUQsT0FBT0UsSUFBWCxFQUFpQjtBQUNiSiwrQkFBV0ssUUFBWDtBQUNBO0FBQ0gsaUJBSEQsTUFJSztBQUNETCwrQkFBV0csSUFBWCxDQUFnQkQsT0FBT0ksS0FBdkI7QUFDSDtBQUNELG9CQUFJTixXQUFXTyxNQUFmLEVBQXVCO0FBQ25CLHdCQUFJLE9BQU9oQixTQUFTaUIsTUFBaEIsS0FBMkIsVUFBL0IsRUFBMkM7QUFDdkNqQixpQ0FBU2lCLE1BQVQ7QUFDSDtBQUNEO0FBQ0g7QUFDSixhQWZELFFBZVMsSUFmVDtBQWdCSDtBQUNKLEtBMUJvQztBQTJCckMsV0FBT25CLGtCQUFQO0FBQ0gsQ0E5RHlCLENBOER4QkYsYUFBYXlCLFVBOURXLENBQTFCO0FBK0RBQyxRQUFReEIsa0JBQVIsR0FBNkJBLGtCQUE3QjtBQUNBLElBQUl5QixpQkFBa0IsWUFBWTtBQUM5QixhQUFTQSxjQUFULENBQXdCQyxHQUF4QixFQUE2QkMsR0FBN0IsRUFBa0NDLEdBQWxDLEVBQXVDO0FBQ25DLFlBQUlELFFBQVEsS0FBSyxDQUFqQixFQUFvQjtBQUFFQSxrQkFBTSxDQUFOO0FBQVU7QUFDaEMsWUFBSUMsUUFBUSxLQUFLLENBQWpCLEVBQW9CO0FBQUVBLGtCQUFNRixJQUFJRyxNQUFWO0FBQW1CO0FBQ3pDLGFBQUtILEdBQUwsR0FBV0EsR0FBWDtBQUNBLGFBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLGFBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNIO0FBQ0RILG1CQUFlaEMsU0FBZixDQUF5Qk0sV0FBV0csUUFBcEMsSUFBZ0QsWUFBWTtBQUFFLGVBQVEsSUFBUjtBQUFnQixLQUE5RTtBQUNBdUIsbUJBQWVoQyxTQUFmLENBQXlCcUIsSUFBekIsR0FBZ0MsWUFBWTtBQUN4QyxlQUFPLEtBQUthLEdBQUwsR0FBVyxLQUFLQyxHQUFoQixHQUFzQjtBQUN6QmIsa0JBQU0sS0FEbUI7QUFFekJFLG1CQUFPLEtBQUtTLEdBQUwsQ0FBU0ksTUFBVCxDQUFnQixLQUFLSCxHQUFMLEVBQWhCO0FBRmtCLFNBQXRCLEdBR0g7QUFDQVosa0JBQU0sSUFETjtBQUVBRSxtQkFBT2M7QUFGUCxTQUhKO0FBT0gsS0FSRDtBQVNBLFdBQU9OLGNBQVA7QUFDSCxDQW5CcUIsRUFBdEI7QUFvQkEsSUFBSU8sZ0JBQWlCLFlBQVk7QUFDN0IsYUFBU0EsYUFBVCxDQUF1QkMsR0FBdkIsRUFBNEJOLEdBQTVCLEVBQWlDQyxHQUFqQyxFQUFzQztBQUNsQyxZQUFJRCxRQUFRLEtBQUssQ0FBakIsRUFBb0I7QUFBRUEsa0JBQU0sQ0FBTjtBQUFVO0FBQ2hDLFlBQUlDLFFBQVEsS0FBSyxDQUFqQixFQUFvQjtBQUFFQSxrQkFBTU0sU0FBU0QsR0FBVCxDQUFOO0FBQXNCO0FBQzVDLGFBQUtBLEdBQUwsR0FBV0EsR0FBWDtBQUNBLGFBQUtOLEdBQUwsR0FBV0EsR0FBWDtBQUNBLGFBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNIO0FBQ0RJLGtCQUFjdkMsU0FBZCxDQUF3Qk0sV0FBV0csUUFBbkMsSUFBK0MsWUFBWTtBQUFFLGVBQU8sSUFBUDtBQUFjLEtBQTNFO0FBQ0E4QixrQkFBY3ZDLFNBQWQsQ0FBd0JxQixJQUF4QixHQUErQixZQUFZO0FBQ3ZDLGVBQU8sS0FBS2EsR0FBTCxHQUFXLEtBQUtDLEdBQWhCLEdBQXNCO0FBQ3pCYixrQkFBTSxLQURtQjtBQUV6QkUsbUJBQU8sS0FBS2dCLEdBQUwsQ0FBUyxLQUFLTixHQUFMLEVBQVQ7QUFGa0IsU0FBdEIsR0FHSDtBQUNBWixrQkFBTSxJQUROO0FBRUFFLG1CQUFPYztBQUZQLFNBSEo7QUFPSCxLQVJEO0FBU0EsV0FBT0MsYUFBUDtBQUNILENBbkJvQixFQUFyQjtBQW9CQSxTQUFTMUIsV0FBVCxDQUFxQjZCLEdBQXJCLEVBQTBCO0FBQ3RCLFFBQUlDLElBQUlELElBQUlwQyxXQUFXRyxRQUFmLENBQVI7QUFDQSxRQUFJLENBQUNrQyxDQUFELElBQU0sT0FBT0QsR0FBUCxLQUFlLFFBQXpCLEVBQW1DO0FBQy9CLGVBQU8sSUFBSVYsY0FBSixDQUFtQlUsR0FBbkIsQ0FBUDtBQUNIO0FBQ0QsUUFBSSxDQUFDQyxDQUFELElBQU1ELElBQUlOLE1BQUosS0FBZUUsU0FBekIsRUFBb0M7QUFDaEMsZUFBTyxJQUFJQyxhQUFKLENBQWtCRyxHQUFsQixDQUFQO0FBQ0g7QUFDRCxRQUFJLENBQUNDLENBQUwsRUFBUTtBQUNKLGNBQU0sSUFBSUMsU0FBSixDQUFjLHdCQUFkLENBQU47QUFDSDtBQUNELFdBQU9GLElBQUlwQyxXQUFXRyxRQUFmLEdBQVA7QUFDSDtBQUNELElBQUlvQyxpQkFBaUJDLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBWixJQUFrQixDQUF2QztBQUNBLFNBQVNOLFFBQVQsQ0FBa0JPLENBQWxCLEVBQXFCO0FBQ2pCLFFBQUliLE1BQU0sQ0FBQ2EsRUFBRVosTUFBYjtBQUNBLFFBQUlhLE1BQU1kLEdBQU4sQ0FBSixFQUFnQjtBQUNaLGVBQU8sQ0FBUDtBQUNIO0FBQ0QsUUFBSUEsUUFBUSxDQUFSLElBQWEsQ0FBQ2UsZUFBZWYsR0FBZixDQUFsQixFQUF1QztBQUNuQyxlQUFPQSxHQUFQO0FBQ0g7QUFDREEsVUFBTWdCLEtBQUtoQixHQUFMLElBQVlXLEtBQUtNLEtBQUwsQ0FBV04sS0FBS08sR0FBTCxDQUFTbEIsR0FBVCxDQUFYLENBQWxCO0FBQ0EsUUFBSUEsT0FBTyxDQUFYLEVBQWM7QUFDVixlQUFPLENBQVA7QUFDSDtBQUNELFFBQUlBLE1BQU1VLGNBQVYsRUFBMEI7QUFDdEIsZUFBT0EsY0FBUDtBQUNIO0FBQ0QsV0FBT1YsR0FBUDtBQUNIO0FBQ0QsU0FBU2UsY0FBVCxDQUF3QjFCLEtBQXhCLEVBQStCO0FBQzNCLFdBQU8sT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QnJCLE9BQU9tRCxJQUFQLENBQVlDLFFBQVosQ0FBcUIvQixLQUFyQixDQUFwQztBQUNIO0FBQ0QsU0FBUzJCLElBQVQsQ0FBYzNCLEtBQWQsRUFBcUI7QUFDakIsUUFBSWdDLGdCQUFnQixDQUFDaEMsS0FBckI7QUFDQSxRQUFJZ0Msa0JBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLGVBQU9BLGFBQVA7QUFDSDtBQUNELFFBQUlQLE1BQU1PLGFBQU4sQ0FBSixFQUEwQjtBQUN0QixlQUFPQSxhQUFQO0FBQ0g7QUFDRCxXQUFPQSxnQkFBZ0IsQ0FBaEIsR0FBb0IsQ0FBQyxDQUFyQixHQUF5QixDQUFoQztBQUNIO0FBQ0QiLCJmaWxlIjoiSXRlcmF0b3JPYnNlcnZhYmxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9pdGVyYXRvcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBJdGVyYXRvck9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJdGVyYXRvck9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3JPYnNlcnZhYmxlKGl0ZXJhdG9yLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaXRlcmF0b3IgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpdGVyYXRvciBjYW5ub3QgYmUgbnVsbC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmF0b3IpO1xuICAgIH1cbiAgICBJdGVyYXRvck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvck9ic2VydmFibGUoaXRlcmF0b3IsIHNjaGVkdWxlcik7XG4gICAgfTtcbiAgICBJdGVyYXRvck9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgsIGhhc0Vycm9yID0gc3RhdGUuaGFzRXJyb3IsIGl0ZXJhdG9yID0gc3RhdGUuaXRlcmF0b3IsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3Ioc3RhdGUuZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICBzdGF0ZS5pbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoc3RhdGUpO1xuICAgIH07XG4gICAgLyoqIEBkZXByZWNhdGVkIGludGVybmFsIHVzZSBvbmx5ICovIEl0ZXJhdG9yT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGl0ZXJhdG9yID0gX2EuaXRlcmF0b3IsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShJdGVyYXRvck9ic2VydmFibGUuZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsIGl0ZXJhdG9yOiBpdGVyYXRvciwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gSXRlcmF0b3JPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5JdGVyYXRvck9ic2VydmFibGUgPSBJdGVyYXRvck9ic2VydmFibGU7XG52YXIgU3RyaW5nSXRlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmluZ0l0ZXJhdG9yKHN0ciwgaWR4LCBsZW4pIHtcbiAgICAgICAgaWYgKGlkeCA9PT0gdm9pZCAwKSB7IGlkeCA9IDA7IH1cbiAgICAgICAgaWYgKGxlbiA9PT0gdm9pZCAwKSB7IGxlbiA9IHN0ci5sZW5ndGg7IH1cbiAgICAgICAgdGhpcy5zdHIgPSBzdHI7XG4gICAgICAgIHRoaXMuaWR4ID0gaWR4O1xuICAgICAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB9XG4gICAgU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMpOyB9O1xuICAgIFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZHggPCB0aGlzLmxlbiA/IHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RyLmNoYXJBdCh0aGlzLmlkeCsrKVxuICAgICAgICB9IDoge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBTdHJpbmdJdGVyYXRvcjtcbn0oKSk7XG52YXIgQXJyYXlJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXJyYXlJdGVyYXRvcihhcnIsIGlkeCwgbGVuKSB7XG4gICAgICAgIGlmIChpZHggPT09IHZvaWQgMCkgeyBpZHggPSAwOyB9XG4gICAgICAgIGlmIChsZW4gPT09IHZvaWQgMCkgeyBsZW4gPSB0b0xlbmd0aChhcnIpOyB9XG4gICAgICAgIHRoaXMuYXJyID0gYXJyO1xuICAgICAgICB0aGlzLmlkeCA9IGlkeDtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgfVxuICAgIEFycmF5SXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yXzEuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICBBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZHggPCB0aGlzLmxlbiA/IHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuYXJyW3RoaXMuaWR4KytdXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEFycmF5SXRlcmF0b3I7XG59KCkpO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3Iob2JqKSB7XG4gICAgdmFyIGkgPSBvYmpbaXRlcmF0b3JfMS5pdGVyYXRvcl07XG4gICAgaWYgKCFpICYmIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyaW5nSXRlcmF0b3Iob2JqKTtcbiAgICB9XG4gICAgaWYgKCFpICYmIG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3Iob2JqKTtcbiAgICB9XG4gICAgaWYgKCFpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29iamVjdCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialtpdGVyYXRvcl8xLml0ZXJhdG9yXSgpO1xufVxudmFyIG1heFNhZmVJbnRlZ2VyID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcbmZ1bmN0aW9uIHRvTGVuZ3RoKG8pIHtcbiAgICB2YXIgbGVuID0gK28ubGVuZ3RoO1xuICAgIGlmIChpc05hTihsZW4pKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAobGVuID09PSAwIHx8ICFudW1iZXJJc0Zpbml0ZShsZW4pKSB7XG4gICAgICAgIHJldHVybiBsZW47XG4gICAgfVxuICAgIGxlbiA9IHNpZ24obGVuKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobGVuKSk7XG4gICAgaWYgKGxlbiA8PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAobGVuID4gbWF4U2FmZUludGVnZXIpIHtcbiAgICAgICAgcmV0dXJuIG1heFNhZmVJbnRlZ2VyO1xuICAgIH1cbiAgICByZXR1cm4gbGVuO1xufVxuZnVuY3Rpb24gbnVtYmVySXNGaW5pdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiByb290XzEucm9vdC5pc0Zpbml0ZSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBzaWduKHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlQXNOdW1iZXIgPSArdmFsdWU7XG4gICAgaWYgKHZhbHVlQXNOdW1iZXIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlQXNOdW1iZXI7XG4gICAgfVxuICAgIGlmIChpc05hTih2YWx1ZUFzTnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gdmFsdWVBc051bWJlcjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlQXNOdW1iZXIgPCAwID8gLTEgOiAxO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SXRlcmF0b3JPYnNlcnZhYmxlLmpzLm1hcCJdfQ==
},{"../Observable":4,"../symbol/iterator":36,"../util/root":51}],22:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('../util/root');
var Observable_1 = require('../Observable');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = function (_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {PromiseLike<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    /** @deprecated internal use only */PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            } else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                }).then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () {
                        throw err;
                    });
                });
            }
        } else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            } else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                }).then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () {
                        throw err;
                    });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable);
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value,
        subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err,
        subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}
//# sourceMappingURL=PromiseObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../Observable":4,"../util/root":51}],23:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('../Observable');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = function (_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done,
            value = state.value,
            subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    /** @deprecated internal use only */ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        } else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable);
exports.ScalarObservable = ScalarObservable;
//# sourceMappingURL=ScalarObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjYWxhck9ic2VydmFibGUuanMiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZCIsImIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiT2JzZXJ2YWJsZV8xIiwicmVxdWlyZSIsIlNjYWxhck9ic2VydmFibGUiLCJfc3VwZXIiLCJ2YWx1ZSIsInNjaGVkdWxlciIsImNhbGwiLCJfaXNTY2FsYXIiLCJkaXNwYXRjaCIsInN0YXRlIiwiZG9uZSIsInN1YnNjcmliZXIiLCJjb21wbGV0ZSIsIm5leHQiLCJjbG9zZWQiLCJzY2hlZHVsZSIsIl9zdWJzY3JpYmUiLCJPYnNlcnZhYmxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsWUFBYSxhQUFRLFVBQUtBLFNBQWQsSUFBNEIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3hELFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUlBLEVBQUVFLGNBQUYsQ0FBaUJELENBQWpCLENBQUosRUFBeUJGLEVBQUVFLENBQUYsSUFBT0QsRUFBRUMsQ0FBRixDQUFQO0FBQTFDLEtBQ0EsU0FBU0UsRUFBVCxHQUFjO0FBQUUsYUFBS0MsV0FBTCxHQUFtQkwsQ0FBbkI7QUFBdUI7QUFDdkNBLE1BQUVNLFNBQUYsR0FBY0wsTUFBTSxJQUFOLEdBQWFNLE9BQU9DLE1BQVAsQ0FBY1AsQ0FBZCxDQUFiLElBQWlDRyxHQUFHRSxTQUFILEdBQWVMLEVBQUVLLFNBQWpCLEVBQTRCLElBQUlGLEVBQUosRUFBN0QsQ0FBZDtBQUNILENBSkQ7QUFLQSxJQUFJSyxlQUFlQyxRQUFRLGVBQVIsQ0FBbkI7QUFDQTs7Ozs7QUFLQSxJQUFJQyxtQkFBb0IsVUFBVUMsTUFBVixFQUFrQjtBQUN0Q2IsY0FBVVksZ0JBQVYsRUFBNEJDLE1BQTVCO0FBQ0EsYUFBU0QsZ0JBQVQsQ0FBMEJFLEtBQTFCLEVBQWlDQyxTQUFqQyxFQUE0QztBQUN4Q0YsZUFBT0csSUFBUCxDQUFZLElBQVo7QUFDQSxhQUFLRixLQUFMLEdBQWFBLEtBQWI7QUFDQSxhQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLGFBQUtFLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxZQUFJRixTQUFKLEVBQWU7QUFDWCxpQkFBS0UsU0FBTCxHQUFpQixLQUFqQjtBQUNIO0FBQ0o7QUFDREwscUJBQWlCSCxNQUFqQixHQUEwQixVQUFVSyxLQUFWLEVBQWlCQyxTQUFqQixFQUE0QjtBQUNsRCxlQUFPLElBQUlILGdCQUFKLENBQXFCRSxLQUFyQixFQUE0QkMsU0FBNUIsQ0FBUDtBQUNILEtBRkQ7QUFHQUgscUJBQWlCTSxRQUFqQixHQUE0QixVQUFVQyxLQUFWLEVBQWlCO0FBQ3pDLFlBQUlDLE9BQU9ELE1BQU1DLElBQWpCO0FBQUEsWUFBdUJOLFFBQVFLLE1BQU1MLEtBQXJDO0FBQUEsWUFBNENPLGFBQWFGLE1BQU1FLFVBQS9EO0FBQ0EsWUFBSUQsSUFBSixFQUFVO0FBQ05DLHVCQUFXQyxRQUFYO0FBQ0E7QUFDSDtBQUNERCxtQkFBV0UsSUFBWCxDQUFnQlQsS0FBaEI7QUFDQSxZQUFJTyxXQUFXRyxNQUFmLEVBQXVCO0FBQ25CO0FBQ0g7QUFDREwsY0FBTUMsSUFBTixHQUFhLElBQWI7QUFDQSxhQUFLSyxRQUFMLENBQWNOLEtBQWQ7QUFDSCxLQVpEO0FBYUEsd0NBQXFDUCxpQkFBaUJMLFNBQWpCLENBQTJCbUIsVUFBM0IsR0FBd0MsVUFBVUwsVUFBVixFQUFzQjtBQUMvRixZQUFJUCxRQUFRLEtBQUtBLEtBQWpCO0FBQ0EsWUFBSUMsWUFBWSxLQUFLQSxTQUFyQjtBQUNBLFlBQUlBLFNBQUosRUFBZTtBQUNYLG1CQUFPQSxVQUFVVSxRQUFWLENBQW1CYixpQkFBaUJNLFFBQXBDLEVBQThDLENBQTlDLEVBQWlEO0FBQ3BERSxzQkFBTSxLQUQ4QyxFQUN2Q04sT0FBT0EsS0FEZ0MsRUFDekJPLFlBQVlBO0FBRGEsYUFBakQsQ0FBUDtBQUdILFNBSkQsTUFLSztBQUNEQSx1QkFBV0UsSUFBWCxDQUFnQlQsS0FBaEI7QUFDQSxnQkFBSSxDQUFDTyxXQUFXRyxNQUFoQixFQUF3QjtBQUNwQkgsMkJBQVdDLFFBQVg7QUFDSDtBQUNKO0FBQ0osS0Fkb0M7QUFlckMsV0FBT1YsZ0JBQVA7QUFDSCxDQTNDdUIsQ0EyQ3RCRixhQUFhaUIsVUEzQ1MsQ0FBeEI7QUE0Q0FDLFFBQVFoQixnQkFBUixHQUEyQkEsZ0JBQTNCO0FBQ0EiLCJmaWxlIjoiU2NhbGFyT2JzZXJ2YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBTY2FsYXJPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2NhbGFyT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTY2FsYXJPYnNlcnZhYmxlKHZhbHVlLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgdGhpcy5faXNTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTY2FsYXJPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2NhbGFyT2JzZXJ2YWJsZSh2YWx1ZSwgc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIFNjYWxhck9ic2VydmFibGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGRvbmUgPSBzdGF0ZS5kb25lLCB2YWx1ZSA9IHN0YXRlLnZhbHVlLCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG4gICAgfTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgaW50ZXJuYWwgdXNlIG9ubHkgKi8gU2NhbGFyT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShTY2FsYXJPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7XG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsIHZhbHVlOiB2YWx1ZSwgc3Vic2NyaWJlcjogc3Vic2NyaWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNjYWxhck9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLlNjYWxhck9ic2VydmFibGUgPSBTY2FsYXJPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NhbGFyT2JzZXJ2YWJsZS5qcy5tYXAiXX0=
},{"../Observable":4}],24:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = require('../../util/root');
var tryCatch_1 = require('../../util/tryCatch');
var errorObject_1 = require('../../util/errorObject');
var Observable_1 = require('../../Observable');
var Subscriber_1 = require('../../Subscriber');
var map_1 = require('../../operators/map');
function getCORSRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    } else if (!!root_1.root.XDomainRequest) {
        return new root_1.root.XDomainRequest();
    } else {
        throw new Error('CORS is not supported by your browser');
    }
}
function getXMLHttpRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    } else {
        var progId = void 0;
        try {
            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
            for (var i = 0; i < 3; i++) {
                try {
                    progId = progIds[i];
                    if (new root_1.root.ActiveXObject(progId)) {
                        break;
                    }
                } catch (e) {}
            }
            return new root_1.root.ActiveXObject(progId);
        } catch (e) {
            throw new Error('XMLHttpRequest is not supported by your browser');
        }
    }
}
function ajaxGet(url, headers) {
    if (headers === void 0) {
        headers = null;
    }
    return new AjaxObservable({ method: 'GET', url: url, headers: headers });
}
exports.ajaxGet = ajaxGet;
;
function ajaxPost(url, body, headers) {
    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
}
exports.ajaxPost = ajaxPost;
;
function ajaxDelete(url, headers) {
    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
}
exports.ajaxDelete = ajaxDelete;
;
function ajaxPut(url, body, headers) {
    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
}
exports.ajaxPut = ajaxPut;
;
function ajaxPatch(url, body, headers) {
    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });
}
exports.ajaxPatch = ajaxPatch;
;
var mapResponse = map_1.map(function (x, index) {
    return x.response;
});
function ajaxGetJSON(url, headers) {
    return mapResponse(new AjaxObservable({
        method: 'GET',
        url: url,
        responseType: 'json',
        headers: headers
    }));
}
exports.ajaxGetJSON = ajaxGetJSON;
;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var AjaxObservable = function (_super) {
    __extends(AjaxObservable, _super);
    function AjaxObservable(urlOrRequest) {
        _super.call(this);
        var request = {
            async: true,
            createXHR: function createXHR() {
                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
            },
            crossDomain: false,
            withCredentials: false,
            headers: {},
            method: 'GET',
            responseType: 'json',
            timeout: 0
        };
        if (typeof urlOrRequest === 'string') {
            request.url = urlOrRequest;
        } else {
            for (var prop in urlOrRequest) {
                if (urlOrRequest.hasOwnProperty(prop)) {
                    request[prop] = urlOrRequest[prop];
                }
            }
        }
        this.request = request;
    }
    /** @deprecated internal use only */AjaxObservable.prototype._subscribe = function (subscriber) {
        return new AjaxSubscriber(subscriber, this.request);
    };
    /**
     * Creates an observable for an Ajax request with either a request object with
     * url, headers, etc or a string for a URL.
     *
     * @example
     * source = Rx.Observable.ajax('/products');
     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
     *
     * @param {string|Object} request Can be one of the following:
     *   A string of the URL to make the Ajax call.
     *   An object with the following properties
     *   - url: URL of the request
     *   - body: The body of the request
     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
     *   - async: Whether the request is async
     *   - headers: Optional headers
     *   - crossDomain: true if a cross domain request, else false
     *   - createXHR: a function to override if you need to use an alternate
     *   XMLHttpRequest implementation.
     *   - resultSelector: a function to use to alter the output value type of
     *   the Observable. Gets {@link AjaxResponse} as an argument.
     * @return {Observable} An observable sequence containing the XMLHttpRequest.
     * @static true
     * @name ajax
     * @owner Observable
    */
    AjaxObservable.create = function () {
        var create = function create(urlOrRequest) {
            return new AjaxObservable(urlOrRequest);
        };
        create.get = ajaxGet;
        create.post = ajaxPost;
        create.delete = ajaxDelete;
        create.put = ajaxPut;
        create.patch = ajaxPatch;
        create.getJSON = ajaxGetJSON;
        return create;
    }();
    return AjaxObservable;
}(Observable_1.Observable);
exports.AjaxObservable = AjaxObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AjaxSubscriber = function (_super) {
    __extends(AjaxSubscriber, _super);
    function AjaxSubscriber(destination, request) {
        _super.call(this, destination);
        this.request = request;
        this.done = false;
        var headers = request.headers = request.headers || {};
        // force CORS if requested
        if (!request.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
        }
        // ensure content type is set
        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        }
        // properly serialize body
        request.body = this.serializeBody(request.body, request.headers['Content-Type']);
        this.send();
    }
    AjaxSubscriber.prototype.next = function (e) {
        this.done = true;
        var _a = this,
            xhr = _a.xhr,
            request = _a.request,
            destination = _a.destination;
        var response = new AjaxResponse(e, xhr, request);
        destination.next(response);
    };
    AjaxSubscriber.prototype.send = function () {
        var _a = this,
            request = _a.request,
            _b = _a.request,
            user = _b.user,
            method = _b.method,
            url = _b.url,
            async = _b.async,
            password = _b.password,
            headers = _b.headers,
            body = _b.body;
        var createXHR = request.createXHR;
        var xhr = tryCatch_1.tryCatch(createXHR).call(request);
        if (xhr === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        } else {
            this.xhr = xhr;
            // set up the events before open XHR
            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
            // You need to add the event listeners before calling open() on the request.
            // Otherwise the progress events will not fire.
            this.setupEvents(xhr, request);
            // open XHR
            var result = void 0;
            if (user) {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
            } else {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
            }
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
            // timeout, responseType and withCredentials can be set once the XHR is open
            if (async) {
                xhr.timeout = request.timeout;
                xhr.responseType = request.responseType;
            }
            if ('withCredentials' in xhr) {
                xhr.withCredentials = !!request.withCredentials;
            }
            // set headers
            this.setHeaders(xhr, headers);
            // finally send the request
            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
        }
        return xhr;
    };
    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
        if (!body || typeof body === 'string') {
            return body;
        } else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
            return body;
        }
        if (contentType) {
            var splitIndex = contentType.indexOf(';');
            if (splitIndex !== -1) {
                contentType = contentType.substring(0, splitIndex);
            }
        }
        switch (contentType) {
            case 'application/x-www-form-urlencoded':
                return Object.keys(body).map(function (key) {
                    return encodeURI(key) + "=" + encodeURI(body[key]);
                }).join('&');
            case 'application/json':
                return JSON.stringify(body);
            default:
                return body;
        }
    };
    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }
    };
    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
        var progressSubscriber = request.progressSubscriber;
        function xhrTimeout(e) {
            var _a = xhrTimeout,
                subscriber = _a.subscriber,
                progressSubscriber = _a.progressSubscriber,
                request = _a.request;
            if (progressSubscriber) {
                progressSubscriber.error(e);
            }
            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
        }
        ;
        xhr.ontimeout = xhrTimeout;
        xhrTimeout.request = request;
        xhrTimeout.subscriber = this;
        xhrTimeout.progressSubscriber = progressSubscriber;
        if (xhr.upload && 'withCredentials' in xhr) {
            if (progressSubscriber) {
                var _xhrProgress_;
                _xhrProgress_ = function xhrProgress_1(e) {
                    var progressSubscriber = _xhrProgress_.progressSubscriber;
                    progressSubscriber.next(e);
                };
                if (root_1.root.XDomainRequest) {
                    xhr.onprogress = _xhrProgress_;
                } else {
                    xhr.upload.onprogress = _xhrProgress_;
                }
                _xhrProgress_.progressSubscriber = progressSubscriber;
            }
            var _xhrError_;
            _xhrError_ = function xhrError_1(e) {
                var _a = _xhrError_,
                    progressSubscriber = _a.progressSubscriber,
                    subscriber = _a.subscriber,
                    request = _a.request;
                if (progressSubscriber) {
                    progressSubscriber.error(e);
                }
                subscriber.error(new AjaxError('ajax error', this, request));
            };
            xhr.onerror = _xhrError_;
            _xhrError_.request = request;
            _xhrError_.subscriber = this;
            _xhrError_.progressSubscriber = progressSubscriber;
        }
        function xhrReadyStateChange(e) {
            var _a = xhrReadyStateChange,
                subscriber = _a.subscriber,
                progressSubscriber = _a.progressSubscriber,
                request = _a.request;
            if (this.readyState === 4) {
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status_1 = this.status === 1223 ? 204 : this.status;
                var response = this.responseType === 'text' ? this.response || this.responseText : this.response;
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status_1 === 0) {
                    status_1 = response ? 200 : 0;
                }
                if (200 <= status_1 && status_1 < 300) {
                    if (progressSubscriber) {
                        progressSubscriber.complete();
                    }
                    subscriber.next(e);
                    subscriber.complete();
                } else {
                    if (progressSubscriber) {
                        progressSubscriber.error(e);
                    }
                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
                }
            }
        }
        ;
        xhr.onreadystatechange = xhrReadyStateChange;
        xhrReadyStateChange.subscriber = this;
        xhrReadyStateChange.progressSubscriber = progressSubscriber;
        xhrReadyStateChange.request = request;
    };
    AjaxSubscriber.prototype.unsubscribe = function () {
        var _a = this,
            done = _a.done,
            xhr = _a.xhr;
        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
            xhr.abort();
        }
        _super.prototype.unsubscribe.call(this);
    };
    return AjaxSubscriber;
}(Subscriber_1.Subscriber);
exports.AjaxSubscriber = AjaxSubscriber;
/**
 * A normalized AJAX response.
 *
 * @see {@link ajax}
 *
 * @class AjaxResponse
 */
var AjaxResponse = function () {
    function AjaxResponse(originalEvent, xhr, request) {
        this.originalEvent = originalEvent;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
    }
    return AjaxResponse;
}();
exports.AjaxResponse = AjaxResponse;
/**
 * A normalized AJAX error.
 *
 * @see {@link ajax}
 *
 * @class AjaxError
 */
var AjaxError = function (_super) {
    __extends(AjaxError, _super);
    function AjaxError(message, xhr, request) {
        _super.call(this, message);
        this.message = message;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
    }
    return AjaxError;
}(Error);
exports.AjaxError = AjaxError;
function parseXhrResponse(responseType, xhr) {
    switch (responseType) {
        case 'json':
            if ('response' in xhr) {
                //IE does not support json as responseType, parse it internally
                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
            } else {
                // HACK(benlesh): TypeScript shennanigans
                // tslint:disable-next-line:no-any latest TS seems to think xhr is "never" here.
                return JSON.parse(xhr.responseText || 'null');
            }
        case 'xml':
            return xhr.responseXML;
        case 'text':
        default:
            // HACK(benlesh): TypeScript shennanigans
            // tslint:disable-next-line:no-any latest TS seems to think xhr is "never" here.
            return 'response' in xhr ? xhr.response : xhr.responseText;
    }
}
/**
 * @see {@link ajax}
 *
 * @class AjaxTimeoutError
 */
var AjaxTimeoutError = function (_super) {
    __extends(AjaxTimeoutError, _super);
    function AjaxTimeoutError(xhr, request) {
        _super.call(this, 'ajax timeout', xhr, request);
    }
    return AjaxTimeoutError;
}(AjaxError);
exports.AjaxTimeoutError = AjaxTimeoutError;
//# sourceMappingURL=AjaxObservable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../Observable":4,"../../Subscriber":9,"../../operators/map":33,"../../util/errorObject":42,"../../util/root":51,"../../util/tryCatch":54}],25:[function(require,module,exports){
"use strict";

var FromObservable_1 = require('./FromObservable');
exports.from = FromObservable_1.FromObservable.create;
//# sourceMappingURL=from.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb20uanMiXSwibmFtZXMiOlsiRnJvbU9ic2VydmFibGVfMSIsInJlcXVpcmUiLCJleHBvcnRzIiwiZnJvbSIsIkZyb21PYnNlcnZhYmxlIiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxtQkFBbUJDLFFBQVEsa0JBQVIsQ0FBdkI7QUFDQUMsUUFBUUMsSUFBUixHQUFlSCxpQkFBaUJJLGNBQWpCLENBQWdDQyxNQUEvQztBQUNBIiwiZmlsZSI6ImZyb20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBGcm9tT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9Gcm9tT2JzZXJ2YWJsZScpO1xuZXhwb3J0cy5mcm9tID0gRnJvbU9ic2VydmFibGVfMS5Gcm9tT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCJdfQ==
},{"./FromObservable":20}],26:[function(require,module,exports){
"use strict";

var PromiseObservable_1 = require('./PromiseObservable');
exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
//# sourceMappingURL=fromPromise.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyb21Qcm9taXNlLmpzIl0sIm5hbWVzIjpbIlByb21pc2VPYnNlcnZhYmxlXzEiLCJyZXF1aXJlIiwiZXhwb3J0cyIsImZyb21Qcm9taXNlIiwiUHJvbWlzZU9ic2VydmFibGUiLCJjcmVhdGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLHNCQUFzQkMsUUFBUSxxQkFBUixDQUExQjtBQUNBQyxRQUFRQyxXQUFSLEdBQXNCSCxvQkFBb0JJLGlCQUFwQixDQUFzQ0MsTUFBNUQ7QUFDQSIsImZpbGUiOiJmcm9tUHJvbWlzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIFByb21pc2VPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL1Byb21pc2VPYnNlcnZhYmxlJyk7XG5leHBvcnRzLmZyb21Qcm9taXNlID0gUHJvbWlzZU9ic2VydmFibGVfMS5Qcm9taXNlT2JzZXJ2YWJsZS5jcmVhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tUHJvbWlzZS5qcy5tYXAiXX0=
},{"./PromiseObservable":22}],27:[function(require,module,exports){
"use strict";

var distinct_1 = require('../operators/distinct');
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
  return distinct_1.distinct(keySelector, flushes)(this);
}
exports.distinct = distinct;
//# sourceMappingURL=distinct.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3RpbmN0LmpzIl0sIm5hbWVzIjpbImRpc3RpbmN0XzEiLCJyZXF1aXJlIiwiZGlzdGluY3QiLCJrZXlTZWxlY3RvciIsImZsdXNoZXMiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxhQUFhQyxRQUFRLHVCQUFSLENBQWpCO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZDQSxTQUFTQyxRQUFULENBQWtCQyxXQUFsQixFQUErQkMsT0FBL0IsRUFBd0M7QUFDcEMsU0FBT0osV0FBV0UsUUFBWCxDQUFvQkMsV0FBcEIsRUFBaUNDLE9BQWpDLEVBQTBDLElBQTFDLENBQVA7QUFDSDtBQUNEQyxRQUFRSCxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBIiwiZmlsZSI6ImRpc3RpbmN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZGlzdGluY3RfMSA9IHJlcXVpcmUoJy4uL29wZXJhdG9ycy9kaXN0aW5jdCcpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBhbGwgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgdGhhdCBhcmUgZGlzdGluY3QgYnkgY29tcGFyaXNvbiBmcm9tIHByZXZpb3VzIGl0ZW1zLlxuICpcbiAqIElmIGEga2V5U2VsZWN0b3IgZnVuY3Rpb24gaXMgcHJvdmlkZWQsIHRoZW4gaXQgd2lsbCBwcm9qZWN0IGVhY2ggdmFsdWUgZnJvbSB0aGUgc291cmNlIG9ic2VydmFibGUgaW50byBhIG5ldyB2YWx1ZSB0aGF0IGl0IHdpbGxcbiAqIGNoZWNrIGZvciBlcXVhbGl0eSB3aXRoIHByZXZpb3VzbHkgcHJvamVjdGVkIHZhbHVlcy4gSWYgYSBrZXlTZWxlY3RvciBmdW5jdGlvbiBpcyBub3QgcHJvdmlkZWQsIGl0IHdpbGwgdXNlIGVhY2ggdmFsdWUgZnJvbSB0aGVcbiAqIHNvdXJjZSBvYnNlcnZhYmxlIGRpcmVjdGx5IHdpdGggYW4gZXF1YWxpdHkgY2hlY2sgYWdhaW5zdCBwcmV2aW91cyB2YWx1ZXMuXG4gKlxuICogSW4gSmF2YVNjcmlwdCBydW50aW1lcyB0aGF0IHN1cHBvcnQgYFNldGAsIHRoaXMgb3BlcmF0b3Igd2lsbCB1c2UgYSBgU2V0YCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIG9mIHRoZSBkaXN0aW5jdCB2YWx1ZSBjaGVja2luZy5cbiAqXG4gKiBJbiBvdGhlciBydW50aW1lcywgdGhpcyBvcGVyYXRvciB3aWxsIHVzZSBhIG1pbmltYWwgaW1wbGVtZW50YXRpb24gb2YgYFNldGAgdGhhdCByZWxpZXMgb24gYW4gYEFycmF5YCBhbmQgYGluZGV4T2ZgIHVuZGVyIHRoZVxuICogaG9vZCwgc28gcGVyZm9ybWFuY2Ugd2lsbCBkZWdyYWRlIGFzIG1vcmUgdmFsdWVzIGFyZSBjaGVja2VkIGZvciBkaXN0aW5jdGlvbi4gRXZlbiBpbiBuZXdlciBicm93c2VycywgYSBsb25nLXJ1bm5pbmcgYGRpc3RpbmN0YFxuICogdXNlIG1pZ2h0IHJlc3VsdCBpbiBtZW1vcnkgbGVha3MuIFRvIGhlbHAgYWxsZXZpYXRlIHRoaXMgaW4gc29tZSBzY2VuYXJpb3MsIGFuIG9wdGlvbmFsIGBmbHVzaGVzYCBwYXJhbWV0ZXIgaXMgYWxzbyBwcm92aWRlZCBzb1xuICogdGhhdCB0aGUgaW50ZXJuYWwgYFNldGAgY2FuIGJlIFwiZmx1c2hlZFwiLCBiYXNpY2FsbHkgY2xlYXJpbmcgaXQgb2YgdmFsdWVzLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPkEgc2ltcGxlIGV4YW1wbGUgd2l0aCBudW1iZXJzPC9jYXB0aW9uPlxuICogT2JzZXJ2YWJsZS5vZigxLCAxLCAyLCAyLCAyLCAxLCAyLCAzLCA0LCAzLCAyLCAxKVxuICogICAuZGlzdGluY3QoKVxuICogICAuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpOyAvLyAxLCAyLCAzLCA0XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+QW4gZXhhbXBsZSB1c2luZyBhIGtleVNlbGVjdG9yIGZ1bmN0aW9uPC9jYXB0aW9uPlxuICogaW50ZXJmYWNlIFBlcnNvbiB7XG4gKiAgICBhZ2U6IG51bWJlcixcbiAqICAgIG5hbWU6IHN0cmluZ1xuICogfVxuICpcbiAqIE9ic2VydmFibGUub2Y8UGVyc29uPihcbiAqICAgICB7IGFnZTogNCwgbmFtZTogJ0Zvbyd9LFxuICogICAgIHsgYWdlOiA3LCBuYW1lOiAnQmFyJ30sXG4gKiAgICAgeyBhZ2U6IDUsIG5hbWU6ICdGb28nfSlcbiAqICAgICAuZGlzdGluY3QoKHA6IFBlcnNvbikgPT4gcC5uYW1lKVxuICogICAgIC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogLy8gZGlzcGxheXM6XG4gKiAvLyB7IGFnZTogNCwgbmFtZTogJ0ZvbycgfVxuICogLy8geyBhZ2U6IDcsIG5hbWU6ICdCYXInIH1cbiAqXG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdFVudGlsQ2hhbmdlZH1cbiAqIEBzZWUge0BsaW5rIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkfVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtrZXlTZWxlY3Rvcl0gT3B0aW9uYWwgZnVuY3Rpb24gdG8gc2VsZWN0IHdoaWNoIHZhbHVlIHlvdSB3YW50IHRvIGNoZWNrIGFzIGRpc3RpbmN0LlxuICogQHBhcmFtIHtPYnNlcnZhYmxlfSBbZmx1c2hlc10gT3B0aW9uYWwgT2JzZXJ2YWJsZSBmb3IgZmx1c2hpbmcgdGhlIGludGVybmFsIEhhc2hTZXQgb2YgdGhlIG9wZXJhdG9yLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdpdGggZGlzdGluY3QgdmFsdWVzLlxuICogQG1ldGhvZCBkaXN0aW5jdFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gZGlzdGluY3Qoa2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICByZXR1cm4gZGlzdGluY3RfMS5kaXN0aW5jdChrZXlTZWxlY3RvciwgZmx1c2hlcykodGhpcyk7XG59XG5leHBvcnRzLmRpc3RpbmN0ID0gZGlzdGluY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdC5qcy5tYXAiXX0=
},{"../operators/distinct":31}],28:[function(require,module,exports){
"use strict";

var filter_1 = require('../operators/filter');
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
  return filter_1.filter(predicate, thisArg)(this);
}
exports.filter = filter;
//# sourceMappingURL=filter.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlci5qcyJdLCJuYW1lcyI6WyJmaWx0ZXJfMSIsInJlcXVpcmUiLCJmaWx0ZXIiLCJwcmVkaWNhdGUiLCJ0aGlzQXJnIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsV0FBV0MsUUFBUSxxQkFBUixDQUFmO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUNBLFNBQVNDLE1BQVQsQ0FBZ0JDLFNBQWhCLEVBQTJCQyxPQUEzQixFQUFvQztBQUNoQyxTQUFPSixTQUFTRSxNQUFULENBQWdCQyxTQUFoQixFQUEyQkMsT0FBM0IsRUFBb0MsSUFBcEMsQ0FBUDtBQUNIO0FBQ0RDLFFBQVFILE1BQVIsR0FBaUJBLE1BQWpCO0FBQ0EiLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKCcuLi9vcGVyYXRvcnMvZmlsdGVyJyk7XG4vKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBGaWx0ZXIgaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYnkgb25seSBlbWl0dGluZyB0aG9zZSB0aGF0XG4gKiBzYXRpc2Z5IGEgc3BlY2lmaWVkIHByZWRpY2F0ZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TGlrZVxuICogW0FycmF5LnByb3RvdHlwZS5maWx0ZXIoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVyKSxcbiAqIGl0IG9ubHkgZW1pdHMgYSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2UgaWYgaXQgcGFzc2VzIGEgY3JpdGVyaW9uIGZ1bmN0aW9uLjwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL2ZpbHRlci5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBTaW1pbGFyIHRvIHRoZSB3ZWxsLWtub3duIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2QsIHRoaXMgb3BlcmF0b3JcbiAqIHRha2VzIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcGFzc2VzIHRoZW0gdGhyb3VnaCBhIGBwcmVkaWNhdGVgXG4gKiBmdW5jdGlvbiBhbmQgb25seSBlbWl0cyB0aG9zZSB2YWx1ZXMgdGhhdCB5aWVsZGVkIGB0cnVlYC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWl0IG9ubHkgY2xpY2sgZXZlbnRzIHdob3NlIHRhcmdldCB3YXMgYSBESVYgZWxlbWVudDwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgY2xpY2tzT25EaXZzID0gY2xpY2tzLmZpbHRlcihldiA9PiBldi50YXJnZXQudGFnTmFtZSA9PT0gJ0RJVicpO1xuICogY2xpY2tzT25EaXZzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdH1cbiAqIEBzZWUge0BsaW5rIGRpc3RpbmN0VW50aWxDaGFuZ2VkfVxuICogQHNlZSB7QGxpbmsgZGlzdGluY3RVbnRpbEtleUNoYW5nZWR9XG4gKiBAc2VlIHtAbGluayBpZ25vcmVFbGVtZW50c31cbiAqIEBzZWUge0BsaW5rIHBhcnRpdGlvbn1cbiAqIEBzZWUge0BsaW5rIHNraXB9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZSBBIGZ1bmN0aW9uIHRoYXRcbiAqIGV2YWx1YXRlcyBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBJZiBpdCByZXR1cm5zIGB0cnVlYCxcbiAqIHRoZSB2YWx1ZSBpcyBlbWl0dGVkLCBpZiBgZmFsc2VgIHRoZSB2YWx1ZSBpcyBub3QgcGFzc2VkIHRvIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUuIFRoZSBgaW5kZXhgIHBhcmFtZXRlciBpcyB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggc291cmNlXG4gKiBlbWlzc2lvbiB0aGF0IGhhcyBoYXBwZW5lZCBzaW5jZSB0aGUgc3Vic2NyaXB0aW9uLCBzdGFydGluZyBmcm9tIHRoZSBudW1iZXJcbiAqIGAwYC5cbiAqIEBwYXJhbSB7YW55fSBbdGhpc0FyZ10gQW4gb3B0aW9uYWwgYXJndW1lbnQgdG8gZGV0ZXJtaW5lIHRoZSB2YWx1ZSBvZiBgdGhpc2BcbiAqIGluIHRoZSBgcHJlZGljYXRlYCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgb2YgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSB0aGF0IHdlcmVcbiAqIGFsbG93ZWQgYnkgdGhlIGBwcmVkaWNhdGVgIGZ1bmN0aW9uLlxuICogQG1ldGhvZCBmaWx0ZXJcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZmlsdGVyXzEuZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykodGhpcyk7XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiXX0=
},{"../operators/filter":32}],29:[function(require,module,exports){
"use strict";

var map_1 = require('../operators/map');
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
  return map_1.map(project, thisArg)(this);
}
exports.map = map;
//# sourceMappingURL=map.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyJdLCJuYW1lcyI6WyJtYXBfMSIsInJlcXVpcmUiLCJtYXAiLCJwcm9qZWN0IiwidGhpc0FyZyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFFBQVFDLFFBQVEsa0JBQVIsQ0FBWjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQ0EsU0FBU0MsR0FBVCxDQUFhQyxPQUFiLEVBQXNCQyxPQUF0QixFQUErQjtBQUMzQixTQUFPSixNQUFNRSxHQUFOLENBQVVDLE9BQVYsRUFBbUJDLE9BQW5CLEVBQTRCLElBQTVCLENBQVA7QUFDSDtBQUNEQyxRQUFRSCxHQUFSLEdBQWNBLEdBQWQ7QUFDQSIsImZpbGUiOiJtYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBtYXBfMSA9IHJlcXVpcmUoJy4uL29wZXJhdG9ycy9tYXAnKTtcbi8qKlxuICogQXBwbGllcyBhIGdpdmVuIGBwcm9qZWN0YCBmdW5jdGlvbiB0byBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSwgYW5kIGVtaXRzIHRoZSByZXN1bHRpbmcgdmFsdWVzIGFzIGFuIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkxpa2UgW0FycmF5LnByb3RvdHlwZS5tYXAoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFwKSxcbiAqIGl0IHBhc3NlcyBlYWNoIHNvdXJjZSB2YWx1ZSB0aHJvdWdoIGEgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gdG8gZ2V0XG4gKiBjb3JyZXNwb25kaW5nIG91dHB1dCB2YWx1ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvbWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFNpbWlsYXIgdG8gdGhlIHdlbGwga25vd24gYEFycmF5LnByb3RvdHlwZS5tYXBgIGZ1bmN0aW9uLCB0aGlzIG9wZXJhdG9yXG4gKiBhcHBsaWVzIGEgcHJvamVjdGlvbiB0byBlYWNoIHZhbHVlIGFuZCBlbWl0cyB0aGF0IHByb2plY3Rpb24gaW4gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgZXZlcnkgY2xpY2sgdG8gdGhlIGNsaWVudFggcG9zaXRpb24gb2YgdGhhdCBjbGljazwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcG9zaXRpb25zID0gY2xpY2tzLm1hcChldiA9PiBldi5jbGllbnRYKTtcbiAqIHBvc2l0aW9ucy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgbWFwVG99XG4gKiBAc2VlIHtAbGluayBwbHVja31cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogUn0gcHJvamVjdCBUaGUgZnVuY3Rpb24gdG8gYXBwbHlcbiAqIHRvIGVhY2ggYHZhbHVlYCBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gVGhlIGBpbmRleGAgcGFyYW1ldGVyIGlzXG4gKiB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggZW1pc3Npb24gdGhhdCBoYXMgaGFwcGVuZWQgc2luY2UgdGhlXG4gKiBzdWJzY3JpcHRpb24sIHN0YXJ0aW5nIGZyb20gdGhlIG51bWJlciBgMGAuXG4gKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGRlZmluZSB3aGF0IGB0aGlzYCBpcyBpbiB0aGVcbiAqIGBwcm9qZWN0YCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgdmFsdWVzIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSB0cmFuc2Zvcm1lZCBieSB0aGUgZ2l2ZW4gYHByb2plY3RgIGZ1bmN0aW9uLlxuICogQG1ldGhvZCBtYXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIG1hcF8xLm1hcChwcm9qZWN0LCB0aGlzQXJnKSh0aGlzKTtcbn1cbmV4cG9ydHMubWFwID0gbWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCJdfQ==
},{"../operators/map":33}],30:[function(require,module,exports){
"use strict";

var mergeMap_1 = require('../operators/mergeMap');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);
}
exports.mergeMap = mergeMap;
//# sourceMappingURL=mergeMap.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlTWFwLmpzIl0sIm5hbWVzIjpbIm1lcmdlTWFwXzEiLCJyZXF1aXJlIiwibWVyZ2VNYXAiLCJwcm9qZWN0IiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxhQUFhQyxRQUFRLHVCQUFSLENBQWpCO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBEQSxTQUFTQyxRQUFULENBQWtCQyxPQUFsQixFQUEyQkMsY0FBM0IsRUFBMkNDLFVBQTNDLEVBQXVEO0FBQ25ELE1BQUlBLGVBQWUsS0FBSyxDQUF4QixFQUEyQjtBQUFFQSxpQkFBYUMsT0FBT0MsaUJBQXBCO0FBQXdDO0FBQ3JFLFNBQU9QLFdBQVdFLFFBQVgsQ0FBb0JDLE9BQXBCLEVBQTZCQyxjQUE3QixFQUE2Q0MsVUFBN0MsRUFBeUQsSUFBekQsQ0FBUDtBQUNIO0FBQ0RHLFFBQVFOLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0EiLCJmaWxlIjoibWVyZ2VNYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZSgnLi4vb3BlcmF0b3JzL21lcmdlTWFwJyk7XG4vKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIHNvdXJjZSB2YWx1ZSB0byBhbiBPYnNlcnZhYmxlIHdoaWNoIGlzIG1lcmdlZCBpbiB0aGUgb3V0cHV0XG4gKiBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5NYXBzIGVhY2ggdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSwgdGhlbiBmbGF0dGVucyBhbGwgb2ZcbiAqIHRoZXNlIGlubmVyIE9ic2VydmFibGVzIHVzaW5nIHtAbGluayBtZXJnZUFsbH0uPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvbWVyZ2VNYXAucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgYmFzZWQgb24gYXBwbHlpbmcgYSBmdW5jdGlvbiB0aGF0IHlvdVxuICogc3VwcGx5IHRvIGVhY2ggaXRlbSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgd2hlcmUgdGhhdCBmdW5jdGlvblxuICogcmV0dXJucyBhbiBPYnNlcnZhYmxlLCBhbmQgdGhlbiBtZXJnaW5nIHRob3NlIHJlc3VsdGluZyBPYnNlcnZhYmxlcyBhbmRcbiAqIGVtaXR0aW5nIHRoZSByZXN1bHRzIG9mIHRoaXMgbWVyZ2VyLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1hcCBhbmQgZmxhdHRlbiBlYWNoIGxldHRlciB0byBhbiBPYnNlcnZhYmxlIHRpY2tpbmcgZXZlcnkgMSBzZWNvbmQ8L2NhcHRpb24+XG4gKiB2YXIgbGV0dGVycyA9IFJ4Lk9ic2VydmFibGUub2YoJ2EnLCAnYicsICdjJyk7XG4gKiB2YXIgcmVzdWx0ID0gbGV0dGVycy5tZXJnZU1hcCh4ID0+XG4gKiAgIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkubWFwKGkgPT4geCtpKVxuICogKTtcbiAqIHJlc3VsdC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogLy8gUmVzdWx0cyBpbiB0aGUgZm9sbG93aW5nOlxuICogLy8gYTBcbiAqIC8vIGIwXG4gKiAvLyBjMFxuICogLy8gYTFcbiAqIC8vIGIxXG4gKiAvLyBjMVxuICogLy8gY29udGludWVzIHRvIGxpc3QgYSxiLGMgd2l0aCByZXNwZWN0aXZlIGFzY2VuZGluZyBpbnRlZ2Vyc1xuICpcbiAqIEBzZWUge0BsaW5rIGNvbmNhdE1hcH1cbiAqIEBzZWUge0BsaW5rIGV4aGF1c3RNYXB9XG4gKiBAc2VlIHtAbGluayBtZXJnZX1cbiAqIEBzZWUge0BsaW5rIG1lcmdlQWxsfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cbiAqIEBzZWUge0BsaW5rIG1lcmdlU2Nhbn1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaE1hcH1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCA/aW5kZXg6IG51bWJlcik6IE9ic2VydmFibGVJbnB1dH0gcHJvamVjdCBBIGZ1bmN0aW9uXG4gKiB0aGF0LCB3aGVuIGFwcGxpZWQgdG8gYW4gaXRlbSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgcmV0dXJucyBhblxuICogT2JzZXJ2YWJsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24ob3V0ZXJWYWx1ZTogVCwgaW5uZXJWYWx1ZTogSSwgb3V0ZXJJbmRleDogbnVtYmVyLCBpbm5lckluZGV4OiBudW1iZXIpOiBhbnl9IFtyZXN1bHRTZWxlY3Rvcl1cbiAqIEEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdmFsdWUgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlIGJhc2VkIG9uIHRoZSB2YWx1ZXNcbiAqIGFuZCB0aGUgaW5kaWNlcyBvZiB0aGUgc291cmNlIChvdXRlcikgZW1pc3Npb24gYW5kIHRoZSBpbm5lciBPYnNlcnZhYmxlXG4gKiBlbWlzc2lvbi4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiBhcmU6XG4gKiAtIGBvdXRlclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2VcbiAqIC0gYGlubmVyVmFsdWVgOiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiAtIGBvdXRlckluZGV4YDogdGhlIFwiaW5kZXhcIiBvZiB0aGUgdmFsdWUgdGhhdCBjYW1lIGZyb20gdGhlIHNvdXJjZVxuICogLSBgaW5uZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIGZyb20gdGhlIHByb2plY3RlZCBPYnNlcnZhYmxlXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnQ9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXSBNYXhpbXVtIG51bWJlciBvZiBpbnB1dFxuICogT2JzZXJ2YWJsZXMgYmVpbmcgc3Vic2NyaWJlZCB0byBjb25jdXJyZW50bHkuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGVcbiAqIHByb2plY3Rpb24gZnVuY3Rpb24gKGFuZCB0aGUgb3B0aW9uYWwgYHJlc3VsdFNlbGVjdG9yYCkgdG8gZWFjaCBpdGVtIGVtaXR0ZWRcbiAqIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBhbmQgbWVyZ2luZyB0aGUgcmVzdWx0cyBvZiB0aGUgT2JzZXJ2YWJsZXMgb2J0YWluZWRcbiAqIGZyb20gdGhpcyB0cmFuc2Zvcm1hdGlvbi5cbiAqIEBtZXRob2QgbWVyZ2VNYXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpKHRoaXMpO1xufVxuZXhwb3J0cy5tZXJnZU1hcCA9IG1lcmdlTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIl19
},{"../operators/mergeMap":34}],31:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = require('../OuterSubscriber');
var subscribeToResult_1 = require('../util/subscribeToResult');
var Set_1 = require('../util/Set');
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
    return function (source) {
        return source.lift(new DistinctOperator(keySelector, flushes));
    };
}
exports.distinct = distinct;
var DistinctOperator = function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.values = new Set_1.Set();
        if (flushes) {
            this.add(subscribeToResult_1.subscribeToResult(this, flushes));
        }
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        } else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        } catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.DistinctSubscriber = DistinctSubscriber;
//# sourceMappingURL=distinct.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../OuterSubscriber":6,"../util/Set":40,"../util/subscribeToResult":52}],32:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('../Subscriber');
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
exports.filter = filter;
var FilterOperator = function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}();
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        } catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=filter.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlci5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJTdWJzY3JpYmVyXzEiLCJyZXF1aXJlIiwiZmlsdGVyIiwicHJlZGljYXRlIiwidGhpc0FyZyIsImZpbHRlck9wZXJhdG9yRnVuY3Rpb24iLCJzb3VyY2UiLCJsaWZ0IiwiRmlsdGVyT3BlcmF0b3IiLCJleHBvcnRzIiwiY2FsbCIsInN1YnNjcmliZXIiLCJzdWJzY3JpYmUiLCJGaWx0ZXJTdWJzY3JpYmVyIiwiX3N1cGVyIiwiZGVzdGluYXRpb24iLCJjb3VudCIsIl9uZXh0IiwidmFsdWUiLCJyZXN1bHQiLCJlcnIiLCJlcnJvciIsIm5leHQiLCJTdWJzY3JpYmVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxZQUFhLGFBQVEsVUFBS0EsU0FBZCxJQUE0QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDeEQsU0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsWUFBSUEsRUFBRUUsY0FBRixDQUFpQkQsQ0FBakIsQ0FBSixFQUF5QkYsRUFBRUUsQ0FBRixJQUFPRCxFQUFFQyxDQUFGLENBQVA7QUFBMUMsS0FDQSxTQUFTRSxFQUFULEdBQWM7QUFBRSxhQUFLQyxXQUFMLEdBQW1CTCxDQUFuQjtBQUF1QjtBQUN2Q0EsTUFBRU0sU0FBRixHQUFjTCxNQUFNLElBQU4sR0FBYU0sT0FBT0MsTUFBUCxDQUFjUCxDQUFkLENBQWIsSUFBaUNHLEdBQUdFLFNBQUgsR0FBZUwsRUFBRUssU0FBakIsRUFBNEIsSUFBSUYsRUFBSixFQUE3RCxDQUFkO0FBQ0gsQ0FKRDtBQUtBLElBQUlLLGVBQWVDLFFBQVEsZUFBUixDQUFuQjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVDQSxTQUFTQyxNQUFULENBQWdCQyxTQUFoQixFQUEyQkMsT0FBM0IsRUFBb0M7QUFDaEMsV0FBTyxTQUFTQyxzQkFBVCxDQUFnQ0MsTUFBaEMsRUFBd0M7QUFDM0MsZUFBT0EsT0FBT0MsSUFBUCxDQUFZLElBQUlDLGNBQUosQ0FBbUJMLFNBQW5CLEVBQThCQyxPQUE5QixDQUFaLENBQVA7QUFDSCxLQUZEO0FBR0g7QUFDREssUUFBUVAsTUFBUixHQUFpQkEsTUFBakI7QUFDQSxJQUFJTSxpQkFBa0IsWUFBWTtBQUM5QixhQUFTQSxjQUFULENBQXdCTCxTQUF4QixFQUFtQ0MsT0FBbkMsRUFBNEM7QUFDeEMsYUFBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxhQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDSDtBQUNESSxtQkFBZVgsU0FBZixDQUF5QmEsSUFBekIsR0FBZ0MsVUFBVUMsVUFBVixFQUFzQkwsTUFBdEIsRUFBOEI7QUFDMUQsZUFBT0EsT0FBT00sU0FBUCxDQUFpQixJQUFJQyxnQkFBSixDQUFxQkYsVUFBckIsRUFBaUMsS0FBS1IsU0FBdEMsRUFBaUQsS0FBS0MsT0FBdEQsQ0FBakIsQ0FBUDtBQUNILEtBRkQ7QUFHQSxXQUFPSSxjQUFQO0FBQ0gsQ0FUcUIsRUFBdEI7QUFVQTs7Ozs7QUFLQSxJQUFJSyxtQkFBb0IsVUFBVUMsTUFBVixFQUFrQjtBQUN0Q3hCLGNBQVV1QixnQkFBVixFQUE0QkMsTUFBNUI7QUFDQSxhQUFTRCxnQkFBVCxDQUEwQkUsV0FBMUIsRUFBdUNaLFNBQXZDLEVBQWtEQyxPQUFsRCxFQUEyRDtBQUN2RFUsZUFBT0osSUFBUCxDQUFZLElBQVosRUFBa0JLLFdBQWxCO0FBQ0EsYUFBS1osU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxhQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxhQUFLWSxLQUFMLEdBQWEsQ0FBYjtBQUNIO0FBQ0Q7QUFDQTtBQUNBSCxxQkFBaUJoQixTQUFqQixDQUEyQm9CLEtBQTNCLEdBQW1DLFVBQVVDLEtBQVYsRUFBaUI7QUFDaEQsWUFBSUMsTUFBSjtBQUNBLFlBQUk7QUFDQUEscUJBQVMsS0FBS2hCLFNBQUwsQ0FBZU8sSUFBZixDQUFvQixLQUFLTixPQUF6QixFQUFrQ2MsS0FBbEMsRUFBeUMsS0FBS0YsS0FBTCxFQUF6QyxDQUFUO0FBQ0gsU0FGRCxDQUdBLE9BQU9JLEdBQVAsRUFBWTtBQUNSLGlCQUFLTCxXQUFMLENBQWlCTSxLQUFqQixDQUF1QkQsR0FBdkI7QUFDQTtBQUNIO0FBQ0QsWUFBSUQsTUFBSixFQUFZO0FBQ1IsaUJBQUtKLFdBQUwsQ0FBaUJPLElBQWpCLENBQXNCSixLQUF0QjtBQUNIO0FBQ0osS0FaRDtBQWFBLFdBQU9MLGdCQUFQO0FBQ0gsQ0F4QnVCLENBd0J0QmIsYUFBYXVCLFVBeEJTLENBQXhCO0FBeUJBIiwiZmlsZSI6ImZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogRmlsdGVyIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGJ5IG9ubHkgZW1pdHRpbmcgdGhvc2UgdGhhdFxuICogc2F0aXNmeSBhIHNwZWNpZmllZCBwcmVkaWNhdGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkxpa2VcbiAqIFtBcnJheS5wcm90b3R5cGUuZmlsdGVyKCldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZpbHRlciksXG4gKiBpdCBvbmx5IGVtaXRzIGEgdmFsdWUgZnJvbSB0aGUgc291cmNlIGlmIGl0IHBhc3NlcyBhIGNyaXRlcmlvbiBmdW5jdGlvbi48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9maWx0ZXIucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogU2ltaWxhciB0byB0aGUgd2VsbC1rbm93biBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kLCB0aGlzIG9wZXJhdG9yXG4gKiB0YWtlcyB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIE9ic2VydmFibGUsIHBhc3NlcyB0aGVtIHRocm91Z2ggYSBgcHJlZGljYXRlYFxuICogZnVuY3Rpb24gYW5kIG9ubHkgZW1pdHMgdGhvc2UgdmFsdWVzIHRoYXQgeWllbGRlZCBgdHJ1ZWAuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCBvbmx5IGNsaWNrIGV2ZW50cyB3aG9zZSB0YXJnZXQgd2FzIGEgRElWIGVsZW1lbnQ8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIGNsaWNrc09uRGl2cyA9IGNsaWNrcy5maWx0ZXIoZXYgPT4gZXYudGFyZ2V0LnRhZ05hbWUgPT09ICdESVYnKTtcbiAqIGNsaWNrc09uRGl2cy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgZGlzdGluY3R9XG4gKiBAc2VlIHtAbGluayBkaXN0aW5jdFVudGlsQ2hhbmdlZH1cbiAqIEBzZWUge0BsaW5rIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkfVxuICogQHNlZSB7QGxpbmsgaWdub3JlRWxlbWVudHN9XG4gKiBAc2VlIHtAbGluayBwYXJ0aXRpb259XG4gKiBAc2VlIHtAbGluayBza2lwfVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGluZGV4OiBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGUgQSBmdW5jdGlvbiB0aGF0XG4gKiBldmFsdWF0ZXMgZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gSWYgaXQgcmV0dXJucyBgdHJ1ZWAsXG4gKiB0aGUgdmFsdWUgaXMgZW1pdHRlZCwgaWYgYGZhbHNlYCB0aGUgdmFsdWUgaXMgbm90IHBhc3NlZCB0byB0aGUgb3V0cHV0XG4gKiBPYnNlcnZhYmxlLiBUaGUgYGluZGV4YCBwYXJhbWV0ZXIgaXMgdGhlIG51bWJlciBgaWAgZm9yIHRoZSBpLXRoIHNvdXJjZVxuICogZW1pc3Npb24gdGhhdCBoYXMgaGFwcGVuZWQgc2luY2UgdGhlIHN1YnNjcmlwdGlvbiwgc3RhcnRpbmcgZnJvbSB0aGUgbnVtYmVyXG4gKiBgMGAuXG4gKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGRldGVybWluZSB0aGUgdmFsdWUgb2YgYHRoaXNgXG4gKiBpbiB0aGUgYHByZWRpY2F0ZWAgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIG9mIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgdGhhdCB3ZXJlXG4gKiBhbGxvd2VkIGJ5IHRoZSBgcHJlZGljYXRlYCBmdW5jdGlvbi5cbiAqIEBtZXRob2QgZmlsdGVyXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZpbHRlck9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgRmlsdGVyT3BlcmF0b3IocHJlZGljYXRlLCB0aGlzQXJnKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xudmFyIEZpbHRlck9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWx0ZXJPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgfVxuICAgIEZpbHRlck9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRmlsdGVyU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByZWRpY2F0ZSwgdGhpcy50aGlzQXJnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRmlsdGVyT3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBGaWx0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsdGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaWx0ZXJTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgfVxuICAgIC8vIHRoZSB0cnkgY2F0Y2ggYmxvY2sgYmVsb3cgaXMgbGVmdCBzcGVjaWZpY2FsbHkgZm9yXG4gICAgLy8gb3B0aW1pemF0aW9uIGFuZCBwZXJmIHJlYXNvbnMuIGEgdHJ5Q2F0Y2hlciBpcyBub3QgbmVjZXNzYXJ5IGhlcmUuXG4gICAgRmlsdGVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJlZGljYXRlLmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIl19
},{"../Subscriber":9}],33:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('../Subscriber');
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
exports.map = map;
var MapOperator = function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}();
exports.MapOperator = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        } catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=map.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJTdWJzY3JpYmVyXzEiLCJyZXF1aXJlIiwibWFwIiwicHJvamVjdCIsInRoaXNBcmciLCJtYXBPcGVyYXRpb24iLCJzb3VyY2UiLCJUeXBlRXJyb3IiLCJsaWZ0IiwiTWFwT3BlcmF0b3IiLCJleHBvcnRzIiwiY2FsbCIsInN1YnNjcmliZXIiLCJzdWJzY3JpYmUiLCJNYXBTdWJzY3JpYmVyIiwiX3N1cGVyIiwiZGVzdGluYXRpb24iLCJjb3VudCIsIl9uZXh0IiwidmFsdWUiLCJyZXN1bHQiLCJlcnIiLCJlcnJvciIsIm5leHQiLCJTdWJzY3JpYmVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxZQUFhLGFBQVEsVUFBS0EsU0FBZCxJQUE0QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDeEQsU0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQ7QUFBaUIsWUFBSUEsRUFBRUUsY0FBRixDQUFpQkQsQ0FBakIsQ0FBSixFQUF5QkYsRUFBRUUsQ0FBRixJQUFPRCxFQUFFQyxDQUFGLENBQVA7QUFBMUMsS0FDQSxTQUFTRSxFQUFULEdBQWM7QUFBRSxhQUFLQyxXQUFMLEdBQW1CTCxDQUFuQjtBQUF1QjtBQUN2Q0EsTUFBRU0sU0FBRixHQUFjTCxNQUFNLElBQU4sR0FBYU0sT0FBT0MsTUFBUCxDQUFjUCxDQUFkLENBQWIsSUFBaUNHLEdBQUdFLFNBQUgsR0FBZUwsRUFBRUssU0FBakIsRUFBNEIsSUFBSUYsRUFBSixFQUE3RCxDQUFkO0FBQ0gsQ0FKRDtBQUtBLElBQUlLLGVBQWVDLFFBQVEsZUFBUixDQUFuQjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQ0EsU0FBU0MsR0FBVCxDQUFhQyxPQUFiLEVBQXNCQyxPQUF0QixFQUErQjtBQUMzQixXQUFPLFNBQVNDLFlBQVQsQ0FBc0JDLE1BQXRCLEVBQThCO0FBQ2pDLFlBQUksT0FBT0gsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUMvQixrQkFBTSxJQUFJSSxTQUFKLENBQWMsNERBQWQsQ0FBTjtBQUNIO0FBQ0QsZUFBT0QsT0FBT0UsSUFBUCxDQUFZLElBQUlDLFdBQUosQ0FBZ0JOLE9BQWhCLEVBQXlCQyxPQUF6QixDQUFaLENBQVA7QUFDSCxLQUxEO0FBTUg7QUFDRE0sUUFBUVIsR0FBUixHQUFjQSxHQUFkO0FBQ0EsSUFBSU8sY0FBZSxZQUFZO0FBQzNCLGFBQVNBLFdBQVQsQ0FBcUJOLE9BQXJCLEVBQThCQyxPQUE5QixFQUF1QztBQUNuQyxhQUFLRCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxhQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDSDtBQUNESyxnQkFBWVosU0FBWixDQUFzQmMsSUFBdEIsR0FBNkIsVUFBVUMsVUFBVixFQUFzQk4sTUFBdEIsRUFBOEI7QUFDdkQsZUFBT0EsT0FBT08sU0FBUCxDQUFpQixJQUFJQyxhQUFKLENBQWtCRixVQUFsQixFQUE4QixLQUFLVCxPQUFuQyxFQUE0QyxLQUFLQyxPQUFqRCxDQUFqQixDQUFQO0FBQ0gsS0FGRDtBQUdBLFdBQU9LLFdBQVA7QUFDSCxDQVRrQixFQUFuQjtBQVVBQyxRQUFRRCxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBOzs7OztBQUtBLElBQUlLLGdCQUFpQixVQUFVQyxNQUFWLEVBQWtCO0FBQ25DekIsY0FBVXdCLGFBQVYsRUFBeUJDLE1BQXpCO0FBQ0EsYUFBU0QsYUFBVCxDQUF1QkUsV0FBdkIsRUFBb0NiLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNsRFcsZUFBT0osSUFBUCxDQUFZLElBQVosRUFBa0JLLFdBQWxCO0FBQ0EsYUFBS2IsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsYUFBS2MsS0FBTCxHQUFhLENBQWI7QUFDQSxhQUFLYixPQUFMLEdBQWVBLFdBQVcsSUFBMUI7QUFDSDtBQUNEO0FBQ0E7QUFDQVUsa0JBQWNqQixTQUFkLENBQXdCcUIsS0FBeEIsR0FBZ0MsVUFBVUMsS0FBVixFQUFpQjtBQUM3QyxZQUFJQyxNQUFKO0FBQ0EsWUFBSTtBQUNBQSxxQkFBUyxLQUFLakIsT0FBTCxDQUFhUSxJQUFiLENBQWtCLEtBQUtQLE9BQXZCLEVBQWdDZSxLQUFoQyxFQUF1QyxLQUFLRixLQUFMLEVBQXZDLENBQVQ7QUFDSCxTQUZELENBR0EsT0FBT0ksR0FBUCxFQUFZO0FBQ1IsaUJBQUtMLFdBQUwsQ0FBaUJNLEtBQWpCLENBQXVCRCxHQUF2QjtBQUNBO0FBQ0g7QUFDRCxhQUFLTCxXQUFMLENBQWlCTyxJQUFqQixDQUFzQkgsTUFBdEI7QUFDSCxLQVZEO0FBV0EsV0FBT04sYUFBUDtBQUNILENBdEJvQixDQXNCbkJkLGFBQWF3QixVQXRCTSxDQUFyQjtBQXVCQSIsImZpbGUiOiJtYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbi8qKlxuICogQXBwbGllcyBhIGdpdmVuIGBwcm9qZWN0YCBmdW5jdGlvbiB0byBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSwgYW5kIGVtaXRzIHRoZSByZXN1bHRpbmcgdmFsdWVzIGFzIGFuIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkxpa2UgW0FycmF5LnByb3RvdHlwZS5tYXAoKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFwKSxcbiAqIGl0IHBhc3NlcyBlYWNoIHNvdXJjZSB2YWx1ZSB0aHJvdWdoIGEgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gdG8gZ2V0XG4gKiBjb3JyZXNwb25kaW5nIG91dHB1dCB2YWx1ZXMuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvbWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFNpbWlsYXIgdG8gdGhlIHdlbGwga25vd24gYEFycmF5LnByb3RvdHlwZS5tYXBgIGZ1bmN0aW9uLCB0aGlzIG9wZXJhdG9yXG4gKiBhcHBsaWVzIGEgcHJvamVjdGlvbiB0byBlYWNoIHZhbHVlIGFuZCBlbWl0cyB0aGF0IHByb2plY3Rpb24gaW4gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZS5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgZXZlcnkgY2xpY2sgdG8gdGhlIGNsaWVudFggcG9zaXRpb24gb2YgdGhhdCBjbGljazwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgcG9zaXRpb25zID0gY2xpY2tzLm1hcChldiA9PiBldi5jbGllbnRYKTtcbiAqIHBvc2l0aW9ucy5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQHNlZSB7QGxpbmsgbWFwVG99XG4gKiBAc2VlIHtAbGluayBwbHVja31cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogUn0gcHJvamVjdCBUaGUgZnVuY3Rpb24gdG8gYXBwbHlcbiAqIHRvIGVhY2ggYHZhbHVlYCBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS4gVGhlIGBpbmRleGAgcGFyYW1ldGVyIGlzXG4gKiB0aGUgbnVtYmVyIGBpYCBmb3IgdGhlIGktdGggZW1pc3Npb24gdGhhdCBoYXMgaGFwcGVuZWQgc2luY2UgdGhlXG4gKiBzdWJzY3JpcHRpb24sIHN0YXJ0aW5nIGZyb20gdGhlIG51bWJlciBgMGAuXG4gKiBAcGFyYW0ge2FueX0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGRlZmluZSB3aGF0IGB0aGlzYCBpcyBpbiB0aGVcbiAqIGBwcm9qZWN0YCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8Uj59IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgdmFsdWVzIGZyb20gdGhlIHNvdXJjZVxuICogT2JzZXJ2YWJsZSB0cmFuc2Zvcm1lZCBieSB0aGUgZ2l2ZW4gYHByb2plY3RgIGZ1bmN0aW9uLlxuICogQG1ldGhvZCBtYXBcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1hcE9wZXJhdGlvbihzb3VyY2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9qZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4gQXJlIHlvdSBsb29raW5nIGZvciBgbWFwVG8oKWA/Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFwID0gbWFwO1xudmFyIE1hcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgfVxuICAgIE1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuTWFwT3BlcmF0b3IgPSBNYXBPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWFwU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IHRoaXM7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgbG9va3MgdW5vcHRpbWl6ZWQsIGJ1dCBpdCdzIGFjdHVhbGx5IHB1cnBvc2VmdWxseSBOT1RcbiAgICAvLyB1c2luZyB0cnkvY2F0Y2ggb3B0aW1pemF0aW9ucy5cbiAgICBNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wcm9qZWN0LmNhbGwodGhpcy50aGlzQXJnLCB2YWx1ZSwgdGhpcy5jb3VudCsrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiXX0=
},{"../Subscriber":9}],34:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = require('../util/subscribeToResult');
var OuterSubscriber_1 = require('../OuterSubscriber');
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return function mergeMapOperatorFunction(source) {
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));
    };
}
exports.mergeMap = mergeMap;
var MergeMapOperator = function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
}();
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        } else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        } catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        } else {
            this.destination.next(innerValue);
        }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        } catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        } else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=mergeMap.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../OuterSubscriber":6,"../util/subscribeToResult":52}],35:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = require('../Subscriber');
var Notification_1 = require('../Notification');
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
exports.observeOn = observeOn;
var ObserveOnOperator = function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}();
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification,
            destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber);
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}();
exports.ObserveOnMessage = ObserveOnMessage;
//# sourceMappingURL=observeOn.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9ic2VydmVPbi5qcyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJTdWJzY3JpYmVyXzEiLCJyZXF1aXJlIiwiTm90aWZpY2F0aW9uXzEiLCJvYnNlcnZlT24iLCJzY2hlZHVsZXIiLCJkZWxheSIsIm9ic2VydmVPbk9wZXJhdG9yRnVuY3Rpb24iLCJzb3VyY2UiLCJsaWZ0IiwiT2JzZXJ2ZU9uT3BlcmF0b3IiLCJleHBvcnRzIiwiY2FsbCIsInN1YnNjcmliZXIiLCJzdWJzY3JpYmUiLCJPYnNlcnZlT25TdWJzY3JpYmVyIiwiX3N1cGVyIiwiZGVzdGluYXRpb24iLCJkaXNwYXRjaCIsImFyZyIsIm5vdGlmaWNhdGlvbiIsIm9ic2VydmUiLCJ1bnN1YnNjcmliZSIsInNjaGVkdWxlTWVzc2FnZSIsImFkZCIsInNjaGVkdWxlIiwiT2JzZXJ2ZU9uTWVzc2FnZSIsIl9uZXh0IiwidmFsdWUiLCJOb3RpZmljYXRpb24iLCJjcmVhdGVOZXh0IiwiX2Vycm9yIiwiZXJyIiwiY3JlYXRlRXJyb3IiLCJfY29tcGxldGUiLCJjcmVhdGVDb21wbGV0ZSIsIlN1YnNjcmliZXIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0EsSUFBSUssZUFBZUMsUUFBUSxlQUFSLENBQW5CO0FBQ0EsSUFBSUMsaUJBQWlCRCxRQUFRLGlCQUFSLENBQXJCO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4Q0EsU0FBU0UsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEJDLEtBQTlCLEVBQXFDO0FBQ2pDLFFBQUlBLFVBQVUsS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxnQkFBUSxDQUFSO0FBQVk7QUFDcEMsV0FBTyxTQUFTQyx5QkFBVCxDQUFtQ0MsTUFBbkMsRUFBMkM7QUFDOUMsZUFBT0EsT0FBT0MsSUFBUCxDQUFZLElBQUlDLGlCQUFKLENBQXNCTCxTQUF0QixFQUFpQ0MsS0FBakMsQ0FBWixDQUFQO0FBQ0gsS0FGRDtBQUdIO0FBQ0RLLFFBQVFQLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0EsSUFBSU0sb0JBQXFCLFlBQVk7QUFDakMsYUFBU0EsaUJBQVQsQ0FBMkJMLFNBQTNCLEVBQXNDQyxLQUF0QyxFQUE2QztBQUN6QyxZQUFJQSxVQUFVLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsb0JBQVEsQ0FBUjtBQUFZO0FBQ3BDLGFBQUtELFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsYUFBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0g7QUFDREksc0JBQWtCWixTQUFsQixDQUE0QmMsSUFBNUIsR0FBbUMsVUFBVUMsVUFBVixFQUFzQkwsTUFBdEIsRUFBOEI7QUFDN0QsZUFBT0EsT0FBT00sU0FBUCxDQUFpQixJQUFJQyxtQkFBSixDQUF3QkYsVUFBeEIsRUFBb0MsS0FBS1IsU0FBekMsRUFBb0QsS0FBS0MsS0FBekQsQ0FBakIsQ0FBUDtBQUNILEtBRkQ7QUFHQSxXQUFPSSxpQkFBUDtBQUNILENBVndCLEVBQXpCO0FBV0FDLFFBQVFELGlCQUFSLEdBQTRCQSxpQkFBNUI7QUFDQTs7Ozs7QUFLQSxJQUFJSyxzQkFBdUIsVUFBVUMsTUFBVixFQUFrQjtBQUN6Q3pCLGNBQVV3QixtQkFBVixFQUErQkMsTUFBL0I7QUFDQSxhQUFTRCxtQkFBVCxDQUE2QkUsV0FBN0IsRUFBMENaLFNBQTFDLEVBQXFEQyxLQUFyRCxFQUE0RDtBQUN4RCxZQUFJQSxVQUFVLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsb0JBQVEsQ0FBUjtBQUFZO0FBQ3BDVSxlQUFPSixJQUFQLENBQVksSUFBWixFQUFrQkssV0FBbEI7QUFDQSxhQUFLWixTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLGFBQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNIO0FBQ0RTLHdCQUFvQkcsUUFBcEIsR0FBK0IsVUFBVUMsR0FBVixFQUFlO0FBQzFDLFlBQUlDLGVBQWVELElBQUlDLFlBQXZCO0FBQUEsWUFBcUNILGNBQWNFLElBQUlGLFdBQXZEO0FBQ0FHLHFCQUFhQyxPQUFiLENBQXFCSixXQUFyQjtBQUNBLGFBQUtLLFdBQUw7QUFDSCxLQUpEO0FBS0FQLHdCQUFvQmpCLFNBQXBCLENBQThCeUIsZUFBOUIsR0FBZ0QsVUFBVUgsWUFBVixFQUF3QjtBQUNwRSxhQUFLSSxHQUFMLENBQVMsS0FBS25CLFNBQUwsQ0FBZW9CLFFBQWYsQ0FBd0JWLG9CQUFvQkcsUUFBNUMsRUFBc0QsS0FBS1osS0FBM0QsRUFBa0UsSUFBSW9CLGdCQUFKLENBQXFCTixZQUFyQixFQUFtQyxLQUFLSCxXQUF4QyxDQUFsRSxDQUFUO0FBQ0gsS0FGRDtBQUdBRix3QkFBb0JqQixTQUFwQixDQUE4QjZCLEtBQTlCLEdBQXNDLFVBQVVDLEtBQVYsRUFBaUI7QUFDbkQsYUFBS0wsZUFBTCxDQUFxQnBCLGVBQWUwQixZQUFmLENBQTRCQyxVQUE1QixDQUF1Q0YsS0FBdkMsQ0FBckI7QUFDSCxLQUZEO0FBR0FiLHdCQUFvQmpCLFNBQXBCLENBQThCaUMsTUFBOUIsR0FBdUMsVUFBVUMsR0FBVixFQUFlO0FBQ2xELGFBQUtULGVBQUwsQ0FBcUJwQixlQUFlMEIsWUFBZixDQUE0QkksV0FBNUIsQ0FBd0NELEdBQXhDLENBQXJCO0FBQ0gsS0FGRDtBQUdBakIsd0JBQW9CakIsU0FBcEIsQ0FBOEJvQyxTQUE5QixHQUEwQyxZQUFZO0FBQ2xELGFBQUtYLGVBQUwsQ0FBcUJwQixlQUFlMEIsWUFBZixDQUE0Qk0sY0FBNUIsRUFBckI7QUFDSCxLQUZEO0FBR0EsV0FBT3BCLG1CQUFQO0FBQ0gsQ0ExQjBCLENBMEJ6QmQsYUFBYW1DLFVBMUJZLENBQTNCO0FBMkJBekIsUUFBUUksbUJBQVIsR0FBOEJBLG1CQUE5QjtBQUNBLElBQUlXLG1CQUFvQixZQUFZO0FBQ2hDLGFBQVNBLGdCQUFULENBQTBCTixZQUExQixFQUF3Q0gsV0FBeEMsRUFBcUQ7QUFDakQsYUFBS0csWUFBTCxHQUFvQkEsWUFBcEI7QUFDQSxhQUFLSCxXQUFMLEdBQW1CQSxXQUFuQjtBQUNIO0FBQ0QsV0FBT1MsZ0JBQVA7QUFDSCxDQU51QixFQUF4QjtBQU9BZixRQUFRZSxnQkFBUixHQUEyQkEsZ0JBQTNCO0FBQ0EiLCJmaWxlIjoib2JzZXJ2ZU9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKCcuLi9Ob3RpZmljYXRpb24nKTtcbi8qKlxuICpcbiAqIFJlLWVtaXRzIGFsbCBub3RpZmljYXRpb25zIGZyb20gc291cmNlIE9ic2VydmFibGUgd2l0aCBzcGVjaWZpZWQgc2NoZWR1bGVyLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FbnN1cmUgYSBzcGVjaWZpYyBzY2hlZHVsZXIgaXMgdXNlZCwgZnJvbSBvdXRzaWRlIG9mIGFuIE9ic2VydmFibGUuPC9zcGFuPlxuICpcbiAqIGBvYnNlcnZlT25gIGlzIGFuIG9wZXJhdG9yIHRoYXQgYWNjZXB0cyBhIHNjaGVkdWxlciBhcyBhIGZpcnN0IHBhcmFtZXRlciwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIHJlc2NoZWR1bGVcbiAqIG5vdGlmaWNhdGlvbnMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIEl0IG1pZ2h0IGJlIHVzZWZ1bCwgaWYgeW91IGRvIG5vdCBoYXZlIGNvbnRyb2wgb3ZlclxuICogaW50ZXJuYWwgc2NoZWR1bGVyIG9mIGEgZ2l2ZW4gT2JzZXJ2YWJsZSwgYnV0IHdhbnQgdG8gY29udHJvbCB3aGVuIGl0cyB2YWx1ZXMgYXJlIGVtaXR0ZWQgbmV2ZXJ0aGVsZXNzLlxuICpcbiAqIFJldHVybmVkIE9ic2VydmFibGUgZW1pdHMgdGhlIHNhbWUgbm90aWZpY2F0aW9ucyAobmV4dGVkIHZhbHVlcywgY29tcGxldGUgYW5kIGVycm9yIGV2ZW50cykgYXMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLFxuICogYnV0IHJlc2NoZWR1bGVkIHdpdGggcHJvdmlkZWQgc2NoZWR1bGVyLiBOb3RlIHRoYXQgdGhpcyBkb2Vzbid0IG1lYW4gdGhhdCBzb3VyY2UgT2JzZXJ2YWJsZXMgaW50ZXJuYWxcbiAqIHNjaGVkdWxlciB3aWxsIGJlIHJlcGxhY2VkIGluIGFueSB3YXkuIE9yaWdpbmFsIHNjaGVkdWxlciBzdGlsbCB3aWxsIGJlIHVzZWQsIGJ1dCB3aGVuIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBlbWl0c1xuICogbm90aWZpY2F0aW9uLCBpdCB3aWxsIGJlIGltbWVkaWF0ZWx5IHNjaGVkdWxlZCBhZ2FpbiAtIHRoaXMgdGltZSB3aXRoIHNjaGVkdWxlciBwYXNzZWQgdG8gYG9ic2VydmVPbmAuXG4gKiBBbiBhbnRpLXBhdHRlcm4gd291bGQgYmUgY2FsbGluZyBgb2JzZXJ2ZU9uYCBvbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgbG90cyBvZiB2YWx1ZXMgc3luY2hyb25vdXNseSwgdG8gc3BsaXRcbiAqIHRoYXQgZW1pc3Npb25zIGludG8gYXN5bmNocm9ub3VzIGNodW5rcy4gRm9yIHRoaXMgdG8gaGFwcGVuLCBzY2hlZHVsZXIgd291bGQgaGF2ZSB0byBiZSBwYXNzZWQgaW50byB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlIGRpcmVjdGx5ICh1c3VhbGx5IGludG8gdGhlIG9wZXJhdG9yIHRoYXQgY3JlYXRlcyBpdCkuIGBvYnNlcnZlT25gIHNpbXBseSBkZWxheXMgbm90aWZpY2F0aW9ucyBhXG4gKiBsaXR0bGUgYml0IG1vcmUsIHRvIGVuc3VyZSB0aGF0IHRoZXkgYXJlIGVtaXR0ZWQgYXQgZXhwZWN0ZWQgbW9tZW50cy5cbiAqXG4gKiBBcyBhIG1hdHRlciBvZiBmYWN0LCBgb2JzZXJ2ZU9uYCBhY2NlcHRzIHNlY29uZCBwYXJhbWV0ZXIsIHdoaWNoIHNwZWNpZmllcyBpbiBtaWxsaXNlY29uZHMgd2l0aCB3aGF0IGRlbGF5IG5vdGlmaWNhdGlvbnNcbiAqIHdpbGwgYmUgZW1pdHRlZC4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIHtAbGluayBkZWxheX0gb3BlcmF0b3IgYW5kIGBvYnNlcnZlT25gIGlzIHRoYXQgYG9ic2VydmVPbmBcbiAqIHdpbGwgZGVsYXkgYWxsIG5vdGlmaWNhdGlvbnMgLSBpbmNsdWRpbmcgZXJyb3Igbm90aWZpY2F0aW9ucyAtIHdoaWxlIGBkZWxheWAgd2lsbCBwYXNzIHRocm91Z2ggZXJyb3JcbiAqIGZyb20gc291cmNlIE9ic2VydmFibGUgaW1tZWRpYXRlbHkgd2hlbiBpdCBpcyBlbWl0dGVkLiBJbiBnZW5lcmFsIGl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgYGRlbGF5YCBvcGVyYXRvclxuICogZm9yIGFueSBraW5kIG9mIGRlbGF5aW5nIG9mIHZhbHVlcyBpbiB0aGUgc3RyZWFtLCB3aGlsZSB1c2luZyBgb2JzZXJ2ZU9uYCB0byBzcGVjaWZ5IHdoaWNoIHNjaGVkdWxlciBzaG91bGQgYmUgdXNlZFxuICogZm9yIG5vdGlmaWNhdGlvbiBlbWlzc2lvbnMgaW4gZ2VuZXJhbC5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbnN1cmUgdmFsdWVzIGluIHN1YnNjcmliZSBhcmUgY2FsbGVkIGp1c3QgYmVmb3JlIGJyb3dzZXIgcmVwYWludC48L2NhcHRpb24+XG4gKiBjb25zdCBpbnRlcnZhbHMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwKTsgLy8gSW50ZXJ2YWxzIGFyZSBzY2hlZHVsZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGFzeW5jIHNjaGVkdWxlciBieSBkZWZhdWx0Li4uXG4gKlxuICogaW50ZXJ2YWxzXG4gKiAub2JzZXJ2ZU9uKFJ4LlNjaGVkdWxlci5hbmltYXRpb25GcmFtZSkgICAgICAgLy8gLi4uYnV0IHdlIHdpbGwgb2JzZXJ2ZSBvbiBhbmltYXRpb25GcmFtZVxuICogLnN1YnNjcmliZSh2YWwgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNjaGVkdWxlciB0byBlbnN1cmUgc21vb3RoIGFuaW1hdGlvbi5cbiAqICAgc29tZURpdi5zdHlsZS5oZWlnaHQgPSB2YWwgKyAncHgnO1xuICogfSk7XG4gKlxuICogQHNlZSB7QGxpbmsgZGVsYXl9XG4gKlxuICogQHBhcmFtIHtJU2NoZWR1bGVyfSBzY2hlZHVsZXIgU2NoZWR1bGVyIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJlc2NoZWR1bGUgbm90aWZpY2F0aW9ucyBmcm9tIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheV0gTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IHN0YXRlcyB3aXRoIHdoYXQgZGVsYXkgZXZlcnkgbm90aWZpY2F0aW9uIHNob3VsZCBiZSByZXNjaGVkdWxlZC5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgc2FtZSBub3RpZmljYXRpb25zIGFzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSxcbiAqIGJ1dCB3aXRoIHByb3ZpZGVkIHNjaGVkdWxlci5cbiAqXG4gKiBAbWV0aG9kIG9ic2VydmVPblxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gb2JzZXJ2ZU9uT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBPYnNlcnZlT25PcGVyYXRvcihzY2hlZHVsZXIsIGRlbGF5KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMub2JzZXJ2ZU9uID0gb2JzZXJ2ZU9uO1xudmFyIE9ic2VydmVPbk9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZlT25PcGVyYXRvcihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgIH1cbiAgICBPYnNlcnZlT25PcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9ic2VydmVPblN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5zY2hlZHVsZXIsIHRoaXMuZGVsYXkpKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZlT25PcGVyYXRvcjtcbn0oKSk7XG5leHBvcnRzLk9ic2VydmVPbk9wZXJhdG9yID0gT2JzZXJ2ZU9uT3BlcmF0b3I7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIE9ic2VydmVPblN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPYnNlcnZlT25TdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9ic2VydmVPblN1YnNjcmliZXIoZGVzdGluYXRpb24sIHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICB9XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IGFyZy5ub3RpZmljYXRpb24sIGRlc3RpbmF0aW9uID0gYXJnLmRlc3RpbmF0aW9uO1xuICAgICAgICBub3RpZmljYXRpb24ub2JzZXJ2ZShkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE9ic2VydmVPblN1YnNjcmliZXIucHJvdG90eXBlLnNjaGVkdWxlTWVzc2FnZSA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoT2JzZXJ2ZU9uU3Vic2NyaWJlci5kaXNwYXRjaCwgdGhpcy5kZWxheSwgbmV3IE9ic2VydmVPbk1lc3NhZ2Uobm90aWZpY2F0aW9uLCB0aGlzLmRlc3RpbmF0aW9uKSkpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQodmFsdWUpKTtcbiAgICB9O1xuICAgIE9ic2VydmVPblN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU1lc3NhZ2UoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yKGVycikpO1xuICAgIH07XG4gICAgT2JzZXJ2ZU9uU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlTWVzc2FnZShOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUoKSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZU9uU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuT2JzZXJ2ZU9uU3Vic2NyaWJlciA9IE9ic2VydmVPblN1YnNjcmliZXI7XG52YXIgT2JzZXJ2ZU9uTWVzc2FnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZU9uTWVzc2FnZShub3RpZmljYXRpb24sIGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgfVxuICAgIHJldHVybiBPYnNlcnZlT25NZXNzYWdlO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2ZU9uTWVzc2FnZSA9IE9ic2VydmVPbk1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIl19
},{"../Notification":3,"../Subscriber":9}],36:[function(require,module,exports){
"use strict";

var root_1 = require('../util/root');
function symbolIteratorPonyfill(root) {
    var _Symbol = root.Symbol;
    if (typeof _Symbol === 'function') {
        if (!_Symbol.iterator) {
            _Symbol.iterator = _Symbol('iterator polyfill');
        }
        return _Symbol.iterator;
    } else {
        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
        var Set_1 = root.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root.Map;
        // required for compatability with es6-shim
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.iterator = symbolIteratorPonyfill(root_1.root);
/**
 * @deprecated use iterator instead
 */
exports.$$iterator = exports.iterator;
//# sourceMappingURL=iterator.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhdG9yLmpzIl0sIm5hbWVzIjpbInJvb3RfMSIsInJlcXVpcmUiLCJzeW1ib2xJdGVyYXRvclBvbnlmaWxsIiwicm9vdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiU2V0XzEiLCJTZXQiLCJNYXBfMSIsIk1hcCIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvdG90eXBlIiwiaSIsImxlbmd0aCIsImtleSIsImV4cG9ydHMiLCIkJGl0ZXJhdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTQyxRQUFRLGNBQVIsQ0FBYjtBQUNBLFNBQVNDLHNCQUFULENBQWdDQyxJQUFoQyxFQUFzQztBQUNsQyxRQUFJQyxVQUFTRCxLQUFLQyxNQUFsQjtBQUNBLFFBQUksT0FBT0EsT0FBUCxLQUFrQixVQUF0QixFQUFrQztBQUM5QixZQUFJLENBQUNBLFFBQU9DLFFBQVosRUFBc0I7QUFDbEJELG9CQUFPQyxRQUFQLEdBQWtCRCxRQUFPLG1CQUFQLENBQWxCO0FBQ0g7QUFDRCxlQUFPQSxRQUFPQyxRQUFkO0FBQ0gsS0FMRCxNQU1LO0FBQ0Q7QUFDQSxZQUFJQyxRQUFRSCxLQUFLSSxHQUFqQjtBQUNBLFlBQUlELFNBQVMsT0FBTyxJQUFJQSxLQUFKLEdBQVksWUFBWixDQUFQLEtBQXFDLFVBQWxELEVBQThEO0FBQzFELG1CQUFPLFlBQVA7QUFDSDtBQUNELFlBQUlFLFFBQVFMLEtBQUtNLEdBQWpCO0FBQ0E7QUFDQSxZQUFJRCxLQUFKLEVBQVc7QUFDUCxnQkFBSUUsT0FBT0MsT0FBT0MsbUJBQVAsQ0FBMkJKLE1BQU1LLFNBQWpDLENBQVg7QUFDQSxpQkFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlKLEtBQUtLLE1BQXpCLEVBQWlDLEVBQUVELENBQW5DLEVBQXNDO0FBQ2xDLG9CQUFJRSxNQUFNTixLQUFLSSxDQUFMLENBQVY7QUFDQTtBQUNBLG9CQUFJRSxRQUFRLFNBQVIsSUFBcUJBLFFBQVEsTUFBN0IsSUFBdUNSLE1BQU1LLFNBQU4sQ0FBZ0JHLEdBQWhCLE1BQXlCUixNQUFNSyxTQUFOLENBQWdCLFNBQWhCLENBQXBFLEVBQWdHO0FBQzVGLDJCQUFPRyxHQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0QsZUFBTyxZQUFQO0FBQ0g7QUFDSjtBQUNEQyxRQUFRZixzQkFBUixHQUFpQ0Esc0JBQWpDO0FBQ0FlLFFBQVFaLFFBQVIsR0FBbUJILHVCQUF1QkYsT0FBT0csSUFBOUIsQ0FBbkI7QUFDQTs7O0FBR0FjLFFBQVFDLFVBQVIsR0FBcUJELFFBQVFaLFFBQTdCO0FBQ0EiLCJmaWxlIjoiaXRlcmF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbmZ1bmN0aW9uIHN5bWJvbEl0ZXJhdG9yUG9ueWZpbGwocm9vdCkge1xuICAgIHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICAgICAgU3ltYm9sLml0ZXJhdG9yID0gU3ltYm9sKCdpdGVyYXRvciBwb2x5ZmlsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBbZm9yIE1vemlsbGEgR2Vja28gMjctMzU6XShodHRwczovL216bC5sYS8yZXdFMXpDKVxuICAgICAgICB2YXIgU2V0XzEgPSByb290LlNldDtcbiAgICAgICAgaWYgKFNldF8xICYmIHR5cGVvZiBuZXcgU2V0XzEoKVsnQEBpdGVyYXRvciddID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgICAgICB9XG4gICAgICAgIHZhciBNYXBfMSA9IHJvb3QuTWFwO1xuICAgICAgICAvLyByZXF1aXJlZCBmb3IgY29tcGF0YWJpbGl0eSB3aXRoIGVzNi1zaGltXG4gICAgICAgIGlmIChNYXBfMSkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhNYXBfMS5wcm90b3R5cGUpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgLy8gYWNjb3JkaW5nIHRvIHNwZWMsIE1hcC5wcm90b3R5cGVbQEBpdGVyYXRvcl0gYW5kIE1hcC5vcm90b3R5cGUuZW50cmllcyBtdXN0IGJlIGVxdWFsLlxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdlbnRyaWVzJyAmJiBrZXkgIT09ICdzaXplJyAmJiBNYXBfMS5wcm90b3R5cGVba2V5XSA9PT0gTWFwXzEucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG59XG5leHBvcnRzLnN5bWJvbEl0ZXJhdG9yUG9ueWZpbGwgPSBzeW1ib2xJdGVyYXRvclBvbnlmaWxsO1xuZXhwb3J0cy5pdGVyYXRvciA9IHN5bWJvbEl0ZXJhdG9yUG9ueWZpbGwocm9vdF8xLnJvb3QpO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgaXRlcmF0b3IgaW5zdGVhZFxuICovXG5leHBvcnRzLiQkaXRlcmF0b3IgPSBleHBvcnRzLml0ZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIl19
},{"../util/root":51}],37:[function(require,module,exports){
"use strict";

var root_1 = require('../util/root');
function getSymbolObservable(context) {
    var $$observable;
    var _Symbol = context.Symbol;
    if (typeof _Symbol === 'function') {
        if (_Symbol.observable) {
            $$observable = _Symbol.observable;
        } else {
            $$observable = _Symbol('observable');
            _Symbol.observable = $$observable;
        }
    } else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root_1.root);
/**
 * @deprecated use observable instead
 */
exports.$$observable = exports.observable;
//# sourceMappingURL=observable.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9ic2VydmFibGUuanMiXSwibmFtZXMiOlsicm9vdF8xIiwicmVxdWlyZSIsImdldFN5bWJvbE9ic2VydmFibGUiLCJjb250ZXh0IiwiJCRvYnNlcnZhYmxlIiwiU3ltYm9sIiwib2JzZXJ2YWJsZSIsImV4cG9ydHMiLCJyb290Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTQyxRQUFRLGNBQVIsQ0FBYjtBQUNBLFNBQVNDLG1CQUFULENBQTZCQyxPQUE3QixFQUFzQztBQUNsQyxRQUFJQyxZQUFKO0FBQ0EsUUFBSUMsVUFBU0YsUUFBUUUsTUFBckI7QUFDQSxRQUFJLE9BQU9BLE9BQVAsS0FBa0IsVUFBdEIsRUFBa0M7QUFDOUIsWUFBSUEsUUFBT0MsVUFBWCxFQUF1QjtBQUNuQkYsMkJBQWVDLFFBQU9DLFVBQXRCO0FBQ0gsU0FGRCxNQUdLO0FBQ0RGLDJCQUFlQyxRQUFPLFlBQVAsQ0FBZjtBQUNBQSxvQkFBT0MsVUFBUCxHQUFvQkYsWUFBcEI7QUFDSDtBQUNKLEtBUkQsTUFTSztBQUNEQSx1QkFBZSxjQUFmO0FBQ0g7QUFDRCxXQUFPQSxZQUFQO0FBQ0g7QUFDREcsUUFBUUwsbUJBQVIsR0FBOEJBLG1CQUE5QjtBQUNBSyxRQUFRRCxVQUFSLEdBQXFCSixvQkFBb0JGLE9BQU9RLElBQTNCLENBQXJCO0FBQ0E7OztBQUdBRCxRQUFRSCxZQUFSLEdBQXVCRyxRQUFRRCxVQUEvQjtBQUNBIiwiZmlsZSI6Im9ic2VydmFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbmZ1bmN0aW9uIGdldFN5bWJvbE9ic2VydmFibGUoY29udGV4dCkge1xuICAgIHZhciAkJG9ic2VydmFibGU7XG4gICAgdmFyIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sO1xuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgJCRvYnNlcnZhYmxlID0gU3ltYm9sLm9ic2VydmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkJG9ic2VydmFibGUgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcbiAgICAgICAgICAgIFN5bWJvbC5vYnNlcnZhYmxlID0gJCRvYnNlcnZhYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAkJG9ic2VydmFibGUgPSAnQEBvYnNlcnZhYmxlJztcbiAgICB9XG4gICAgcmV0dXJuICQkb2JzZXJ2YWJsZTtcbn1cbmV4cG9ydHMuZ2V0U3ltYm9sT2JzZXJ2YWJsZSA9IGdldFN5bWJvbE9ic2VydmFibGU7XG5leHBvcnRzLm9ic2VydmFibGUgPSBnZXRTeW1ib2xPYnNlcnZhYmxlKHJvb3RfMS5yb290KTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIG9ic2VydmFibGUgaW5zdGVhZFxuICovXG5leHBvcnRzLiQkb2JzZXJ2YWJsZSA9IGV4cG9ydHMub2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIl19
},{"../util/root":51}],38:[function(require,module,exports){
"use strict";

var root_1 = require('../util/root');
var _Symbol = root_1.root.Symbol;
exports.rxSubscriber = typeof _Symbol === 'function' && typeof _Symbol.for === 'function' ? _Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ4U3Vic2NyaWJlci5qcyJdLCJuYW1lcyI6WyJyb290XzEiLCJyZXF1aXJlIiwiU3ltYm9sIiwicm9vdCIsImV4cG9ydHMiLCJyeFN1YnNjcmliZXIiLCJmb3IiLCIkJHJ4U3Vic2NyaWJlciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsU0FBU0MsUUFBUSxjQUFSLENBQWI7QUFDQSxJQUFJQyxVQUFTRixPQUFPRyxJQUFQLENBQVlELE1BQXpCO0FBQ0FFLFFBQVFDLFlBQVIsR0FBd0IsT0FBT0gsT0FBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPQSxRQUFPSSxHQUFkLEtBQXNCLFVBQXZELEdBQ25CSixRQUFPSSxHQUFQLENBQVcsY0FBWCxDQURtQixHQUNVLGdCQURqQztBQUVBOzs7QUFHQUYsUUFBUUcsY0FBUixHQUF5QkgsUUFBUUMsWUFBakM7QUFDQSIsImZpbGUiOiJyeFN1YnNjcmliZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbnZhciBTeW1ib2wgPSByb290XzEucm9vdC5TeW1ib2w7XG5leHBvcnRzLnJ4U3Vic2NyaWJlciA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKSA/XG4gICAgU3ltYm9sLmZvcigncnhTdWJzY3JpYmVyJykgOiAnQEByeFN1YnNjcmliZXInO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgcnhTdWJzY3JpYmVyIGluc3RlYWRcbiAqL1xuZXhwb3J0cy4kJHJ4U3Vic2NyaWJlciA9IGV4cG9ydHMucnhTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnhTdWJzY3JpYmVyLmpzLm1hcCJdfQ==
},{"../util/root":51}],39:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiX3N1cGVyIiwiZXJyIiwiY2FsbCIsIm5hbWUiLCJzdGFjayIsIm1lc3NhZ2UiLCJFcnJvciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFlBQWEsYUFBUSxVQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4RCxTQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZDtBQUFpQixZQUFJQSxFQUFFRSxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCRixFQUFFRSxDQUFGLElBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUExQyxLQUNBLFNBQVNFLEVBQVQsR0FBYztBQUFFLGFBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0FBQXVCO0FBQ3ZDQSxNQUFFTSxTQUFGLEdBQWNMLE1BQU0sSUFBTixHQUFhTSxPQUFPQyxNQUFQLENBQWNQLENBQWQsQ0FBYixJQUFpQ0csR0FBR0UsU0FBSCxHQUFlTCxFQUFFSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDSCxDQUpEO0FBS0E7Ozs7Ozs7OztBQVNBLElBQUlLLDBCQUEyQixVQUFVQyxNQUFWLEVBQWtCO0FBQzdDWCxjQUFVVSx1QkFBVixFQUFtQ0MsTUFBbkM7QUFDQSxhQUFTRCx1QkFBVCxHQUFtQztBQUMvQixZQUFJRSxNQUFNRCxPQUFPRSxJQUFQLENBQVksSUFBWixFQUFrQixxQkFBbEIsQ0FBVjtBQUNBLGFBQUtDLElBQUwsR0FBWUYsSUFBSUUsSUFBSixHQUFXLHlCQUF2QjtBQUNBLGFBQUtDLEtBQUwsR0FBYUgsSUFBSUcsS0FBakI7QUFDQSxhQUFLQyxPQUFMLEdBQWVKLElBQUlJLE9BQW5CO0FBQ0g7QUFDRCxXQUFPTix1QkFBUDtBQUNILENBVDhCLENBUzdCTyxLQVQ2QixDQUEvQjtBQVVBQyxRQUFRUix1QkFBUixHQUFrQ0EsdUJBQWxDO0FBQ0EiLCJmaWxlIjoiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhbiBhY3Rpb24gaXMgaW52YWxpZCBiZWNhdXNlIHRoZSBvYmplY3QgaGFzIGJlZW5cbiAqIHVuc3Vic2NyaWJlZC5cbiAqXG4gKiBAc2VlIHtAbGluayBTdWJqZWN0fVxuICogQHNlZSB7QGxpbmsgQmVoYXZpb3JTdWJqZWN0fVxuICpcbiAqIEBjbGFzcyBPYmplY3RVbnN1YnNjcmliZWRFcnJvclxuICovXG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPYmplY3RVbnN1YnNjcmliZWRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpIHtcbiAgICAgICAgdmFyIGVyciA9IF9zdXBlci5jYWxsKHRoaXMsICdvYmplY3QgdW5zdWJzY3JpYmVkJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgdGhpcy5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcCJdfQ==
},{}],40:[function(require,module,exports){
"use strict";

var root_1 = require('./root');
function minimalSetImpl() {
    // THIS IS NOT a full impl of Set, this is just the minimum
    // bits of functionality we need for this library.
    return function () {
        function MinimalSet() {
            this._values = [];
        }
        MinimalSet.prototype.add = function (value) {
            if (!this.has(value)) {
                this._values.push(value);
            }
        };
        MinimalSet.prototype.has = function (value) {
            return this._values.indexOf(value) !== -1;
        };
        Object.defineProperty(MinimalSet.prototype, "size", {
            get: function get() {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        MinimalSet.prototype.clear = function () {
            this._values.length = 0;
        };
        return MinimalSet;
    }();
}
exports.minimalSetImpl = minimalSetImpl;
exports.Set = root_1.root.Set || minimalSetImpl();
//# sourceMappingURL=Set.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNldC5qcyJdLCJuYW1lcyI6WyJyb290XzEiLCJyZXF1aXJlIiwibWluaW1hbFNldEltcGwiLCJNaW5pbWFsU2V0IiwiX3ZhbHVlcyIsInByb3RvdHlwZSIsImFkZCIsInZhbHVlIiwiaGFzIiwicHVzaCIsImluZGV4T2YiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJjbGVhciIsImV4cG9ydHMiLCJTZXQiLCJyb290Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUNBLFNBQVNDLGNBQVQsR0FBMEI7QUFDdEI7QUFDQTtBQUNBLFdBQVEsWUFBWTtBQUNoQixpQkFBU0MsVUFBVCxHQUFzQjtBQUNsQixpQkFBS0MsT0FBTCxHQUFlLEVBQWY7QUFDSDtBQUNERCxtQkFBV0UsU0FBWCxDQUFxQkMsR0FBckIsR0FBMkIsVUFBVUMsS0FBVixFQUFpQjtBQUN4QyxnQkFBSSxDQUFDLEtBQUtDLEdBQUwsQ0FBU0QsS0FBVCxDQUFMLEVBQXNCO0FBQ2xCLHFCQUFLSCxPQUFMLENBQWFLLElBQWIsQ0FBa0JGLEtBQWxCO0FBQ0g7QUFDSixTQUpEO0FBS0FKLG1CQUFXRSxTQUFYLENBQXFCRyxHQUFyQixHQUEyQixVQUFVRCxLQUFWLEVBQWlCO0FBQ3hDLG1CQUFPLEtBQUtILE9BQUwsQ0FBYU0sT0FBYixDQUFxQkgsS0FBckIsTUFBZ0MsQ0FBQyxDQUF4QztBQUNILFNBRkQ7QUFHQUksZUFBT0MsY0FBUCxDQUFzQlQsV0FBV0UsU0FBakMsRUFBNEMsTUFBNUMsRUFBb0Q7QUFDaERRLGlCQUFLLGVBQVk7QUFDYix1QkFBTyxLQUFLVCxPQUFMLENBQWFVLE1BQXBCO0FBQ0gsYUFIK0M7QUFJaERDLHdCQUFZLElBSm9DO0FBS2hEQywwQkFBYztBQUxrQyxTQUFwRDtBQU9BYixtQkFBV0UsU0FBWCxDQUFxQlksS0FBckIsR0FBNkIsWUFBWTtBQUNyQyxpQkFBS2IsT0FBTCxDQUFhVSxNQUFiLEdBQXNCLENBQXRCO0FBQ0gsU0FGRDtBQUdBLGVBQU9YLFVBQVA7QUFDSCxLQXZCTyxFQUFSO0FBd0JIO0FBQ0RlLFFBQVFoQixjQUFSLEdBQXlCQSxjQUF6QjtBQUNBZ0IsUUFBUUMsR0FBUixHQUFjbkIsT0FBT29CLElBQVAsQ0FBWUQsR0FBWixJQUFtQmpCLGdCQUFqQztBQUNBIiwiZmlsZSI6IlNldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4vcm9vdCcpO1xuZnVuY3Rpb24gbWluaW1hbFNldEltcGwoKSB7XG4gICAgLy8gVEhJUyBJUyBOT1QgYSBmdWxsIGltcGwgb2YgU2V0LCB0aGlzIGlzIGp1c3QgdGhlIG1pbmltdW1cbiAgICAvLyBiaXRzIG9mIGZ1bmN0aW9uYWxpdHkgd2UgbmVlZCBmb3IgdGhpcyBsaWJyYXJ5LlxuICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBNaW5pbWFsU2V0KCkge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgTWluaW1hbFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgTWluaW1hbFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1pbmltYWxTZXQucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgTWluaW1hbFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE1pbmltYWxTZXQ7XG4gICAgfSgpKTtcbn1cbmV4cG9ydHMubWluaW1hbFNldEltcGwgPSBtaW5pbWFsU2V0SW1wbDtcbmV4cG9ydHMuU2V0ID0gcm9vdF8xLnJvb3QuU2V0IHx8IG1pbmltYWxTZXRJbXBsKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXQuanMubWFwIl19
},{"./root":51}],41:[function(require,module,exports){
"use strict";

var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
            return i + 1 + ") " + err.toString();
        }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error);
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVuc3Vic2NyaXB0aW9uRXJyb3IuanMiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiZCIsImIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl9zdXBlciIsImVycm9ycyIsImNhbGwiLCJlcnIiLCJFcnJvciIsImxlbmd0aCIsIm1hcCIsImkiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwic3RhY2siLCJtZXNzYWdlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsWUFBYSxhQUFRLFVBQUtBLFNBQWQsSUFBNEIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3hELFNBQUssSUFBSUMsQ0FBVCxJQUFjRCxDQUFkO0FBQWlCLFlBQUlBLEVBQUVFLGNBQUYsQ0FBaUJELENBQWpCLENBQUosRUFBeUJGLEVBQUVFLENBQUYsSUFBT0QsRUFBRUMsQ0FBRixDQUFQO0FBQTFDLEtBQ0EsU0FBU0UsRUFBVCxHQUFjO0FBQUUsYUFBS0MsV0FBTCxHQUFtQkwsQ0FBbkI7QUFBdUI7QUFDdkNBLE1BQUVNLFNBQUYsR0FBY0wsTUFBTSxJQUFOLEdBQWFNLE9BQU9DLE1BQVAsQ0FBY1AsQ0FBZCxDQUFiLElBQWlDRyxHQUFHRSxTQUFILEdBQWVMLEVBQUVLLFNBQWpCLEVBQTRCLElBQUlGLEVBQUosRUFBN0QsQ0FBZDtBQUNILENBSkQ7QUFLQTs7OztBQUlBLElBQUlLLHNCQUF1QixVQUFVQyxNQUFWLEVBQWtCO0FBQ3pDWCxjQUFVVSxtQkFBVixFQUErQkMsTUFBL0I7QUFDQSxhQUFTRCxtQkFBVCxDQUE2QkUsTUFBN0IsRUFBcUM7QUFDakNELGVBQU9FLElBQVAsQ0FBWSxJQUFaO0FBQ0EsYUFBS0QsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsWUFBSUUsTUFBTUMsTUFBTUYsSUFBTixDQUFXLElBQVgsRUFBaUJELFNBQ3ZCQSxPQUFPSSxNQUFQLEdBQWdCLDZDQUFoQixHQUFnRUosT0FBT0ssR0FBUCxDQUFXLFVBQVVILEdBQVYsRUFBZUksQ0FBZixFQUFrQjtBQUFFLG1CQUFTQSxJQUFJLENBQUwsR0FBVSxJQUFWLEdBQWlCSixJQUFJSyxRQUFKLEVBQXpCO0FBQTJDLFNBQTFFLEVBQTRFQyxJQUE1RSxDQUFpRixNQUFqRixDQUR6QyxHQUNvSSxFQURySixDQUFWO0FBRUEsYUFBS0MsSUFBTCxHQUFZUCxJQUFJTyxJQUFKLEdBQVcscUJBQXZCO0FBQ0EsYUFBS0MsS0FBTCxHQUFhUixJQUFJUSxLQUFqQjtBQUNBLGFBQUtDLE9BQUwsR0FBZVQsSUFBSVMsT0FBbkI7QUFDSDtBQUNELFdBQU9iLG1CQUFQO0FBQ0gsQ0FaMEIsQ0FZekJLLEtBWnlCLENBQTNCO0FBYUFTLFFBQVFkLG1CQUFSLEdBQThCQSxtQkFBOUI7QUFDQSIsImZpbGUiOiJVbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gb25lIG9yIG1vcmUgZXJyb3JzIGhhdmUgb2NjdXJyZWQgZHVyaW5nIHRoZVxuICogYHVuc3Vic2NyaWJlYCBvZiBhIHtAbGluayBTdWJzY3JpcHRpb259LlxuICovXG52YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3Vic2NyaXB0aW9uRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB2YXIgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuICBcIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gKChpICsgMSkgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKSk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIFVuc3Vic2NyaXB0aW9uRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiXX0=
},{}],42:[function(require,module,exports){
"use strict";
// typeof any so that it we don't have to cast when comparing a result to the error object

exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yT2JqZWN0LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJlcnJvck9iamVjdCIsImUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0FBLFFBQVFDLFdBQVIsR0FBc0IsRUFBRUMsR0FBRyxFQUFMLEVBQXRCO0FBQ0EiLCJmaWxlIjoiZXJyb3JPYmplY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIHR5cGVvZiBhbnkgc28gdGhhdCBpdCB3ZSBkb24ndCBoYXZlIHRvIGNhc3Qgd2hlbiBjb21wYXJpbmcgYSByZXN1bHQgdG8gdGhlIGVycm9yIG9iamVjdFxuZXhwb3J0cy5lcnJvck9iamVjdCA9IHsgZToge30gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yT2JqZWN0LmpzLm1hcCJdfQ==
},{}],43:[function(require,module,exports){
"use strict";

exports.isArray = Array.isArray || function (x) {
  return x && typeof x.length === 'number';
};
//# sourceMappingURL=isArray.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQXJyYXkuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsImlzQXJyYXkiLCJBcnJheSIsIngiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxRQUFRQyxPQUFSLEdBQWtCQyxNQUFNRCxPQUFOLElBQWtCLFVBQVVFLENBQVYsRUFBYTtBQUFFLFNBQU9BLEtBQUssT0FBT0EsRUFBRUMsTUFBVCxLQUFvQixRQUFoQztBQUEyQyxDQUE5RjtBQUNBIiwiZmlsZSI6ImlzQXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXAiXX0=
},{}],44:[function(require,module,exports){
"use strict";

exports.isArrayLike = function (x) {
  return x && typeof x.length === 'number';
};
//# sourceMappingURL=isArrayLike.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQXJyYXlMaWtlLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJpc0FycmF5TGlrZSIsIngiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxRQUFRQyxXQUFSLEdBQXVCLFVBQVVDLENBQVYsRUFBYTtBQUFFLFNBQU9BLEtBQUssT0FBT0EsRUFBRUMsTUFBVCxLQUFvQixRQUFoQztBQUEyQyxDQUFqRjtBQUNBIiwiZmlsZSI6ImlzQXJyYXlMaWtlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLmlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIl19
},{}],45:[function(require,module,exports){
"use strict";

function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzRnVuY3Rpb24uanMiXSwibmFtZXMiOlsiaXNGdW5jdGlvbiIsIngiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxTQUFTQSxVQUFULENBQW9CQyxDQUFwQixFQUF1QjtBQUNuQixXQUFPLE9BQU9BLENBQVAsS0FBYSxVQUFwQjtBQUNIO0FBQ0RDLFFBQVFGLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0EiLCJmaWxlIjoiaXNGdW5jdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIl19
},{}],46:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isObject(x) {
    return x != null && (typeof x === "undefined" ? "undefined" : _typeof(x)) === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzT2JqZWN0LmpzIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwieCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBQ0EsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDakIsV0FBT0EsS0FBSyxJQUFMLElBQWEsUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFhLFFBQWpDO0FBQ0g7QUFDREMsUUFBUUYsUUFBUixHQUFtQkEsUUFBbkI7QUFDQSIsImZpbGUiOiJpc09iamVjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYmplY3QuanMubWFwIl19
},{}],47:[function(require,module,exports){
"use strict";

function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzUHJvbWlzZS5qcyJdLCJuYW1lcyI6WyJpc1Byb21pc2UiLCJ2YWx1ZSIsInN1YnNjcmliZSIsInRoZW4iLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxTQUFTQSxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUN0QixXQUFPQSxTQUFTLE9BQU9BLE1BQU1DLFNBQWIsS0FBMkIsVUFBcEMsSUFBa0QsT0FBT0QsTUFBTUUsSUFBYixLQUFzQixVQUEvRTtBQUNIO0FBQ0RDLFFBQVFKLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0EiLCJmaWxlIjoiaXNQcm9taXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNQcm9taXNlID0gaXNQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCJdfQ==
},{}],48:[function(require,module,exports){
"use strict";

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzU2NoZWR1bGVyLmpzIl0sIm5hbWVzIjpbImlzU2NoZWR1bGVyIiwidmFsdWUiLCJzY2hlZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLFNBQVNBLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCO0FBQ3hCLFdBQU9BLFNBQVMsT0FBT0EsTUFBTUMsUUFBYixLQUEwQixVQUExQztBQUNIO0FBQ0RDLFFBQVFILFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0EiLCJmaWxlIjoiaXNTY2hlZHVsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNTY2hlZHVsZXIgPSBpc1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCJdfQ==
},{}],49:[function(require,module,exports){
"use strict";
/* tslint:disable:no-empty */

function noop() {}
exports.noop = noop;
//# sourceMappingURL=noop.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vb3AuanMiXSwibmFtZXMiOlsibm9vcCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0EsU0FBU0EsSUFBVCxHQUFnQixDQUFHO0FBQ25CQyxRQUFRRCxJQUFSLEdBQWVBLElBQWY7QUFDQSIsImZpbGUiOiJub29wLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZXhwb3J0cy5ub29wID0gbm9vcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIl19
},{}],50:[function(require,module,exports){
"use strict";

var noop_1 = require('./noop');
/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i - 0] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) {
            return fn(prev);
        }, input);
    };
}
exports.pipeFromArray = pipeFromArray;
//# sourceMappingURL=pipe.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBpcGUuanMiXSwibmFtZXMiOlsibm9vcF8xIiwicmVxdWlyZSIsInBpcGUiLCJmbnMiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInBpcGVGcm9tQXJyYXkiLCJleHBvcnRzIiwibm9vcCIsInBpcGVkIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwiZm4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFNBQVNDLFFBQVEsUUFBUixDQUFiO0FBQ0E7QUFDQSxTQUFTQyxJQUFULEdBQWdCO0FBQ1osUUFBSUMsTUFBTSxFQUFWO0FBQ0EsU0FBSyxJQUFJQyxLQUFLLENBQWQsRUFBaUJBLEtBQUtDLFVBQVVDLE1BQWhDLEVBQXdDRixJQUF4QyxFQUE4QztBQUMxQ0QsWUFBSUMsS0FBSyxDQUFULElBQWNDLFVBQVVELEVBQVYsQ0FBZDtBQUNIO0FBQ0QsV0FBT0csY0FBY0osR0FBZCxDQUFQO0FBQ0g7QUFDREssUUFBUU4sSUFBUixHQUFlQSxJQUFmO0FBQ0E7QUFDQSxTQUFTSyxhQUFULENBQXVCSixHQUF2QixFQUE0QjtBQUN4QixRQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNOLGVBQU9ILE9BQU9TLElBQWQ7QUFDSDtBQUNELFFBQUlOLElBQUlHLE1BQUosS0FBZSxDQUFuQixFQUFzQjtBQUNsQixlQUFPSCxJQUFJLENBQUosQ0FBUDtBQUNIO0FBQ0QsV0FBTyxTQUFTTyxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFDekIsZUFBT1IsSUFBSVMsTUFBSixDQUFXLFVBQVVDLElBQVYsRUFBZ0JDLEVBQWhCLEVBQW9CO0FBQUUsbUJBQU9BLEdBQUdELElBQUgsQ0FBUDtBQUFrQixTQUFuRCxFQUFxREYsS0FBckQsQ0FBUDtBQUNILEtBRkQ7QUFHSDtBQUNESCxRQUFRRCxhQUFSLEdBQXdCQSxhQUF4QjtBQUNBIiwiZmlsZSI6InBpcGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBub29wXzEgPSByZXF1aXJlKCcuL25vb3AnKTtcbi8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5mdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnRzLnBpcGUgPSBwaXBlO1xuLyogQGludGVybmFsICovXG5mdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmICghZm5zKSB7XG4gICAgICAgIHJldHVybiBub29wXzEubm9vcDtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuZXhwb3J0cy5waXBlRnJvbUFycmF5ID0gcGlwZUZyb21BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIl19
},{"./noop":49}],51:[function(require,module,exports){
(function (global){
"use strict";
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.

var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();
//# sourceMappingURL=root.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvb3QuanMiXSwibmFtZXMiOlsiX193aW5kb3ciLCJ3aW5kb3ciLCJfX3NlbGYiLCJzZWxmIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJfX2dsb2JhbCIsImdsb2JhbCIsIl9yb290IiwiZXhwb3J0cyIsInJvb3QiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsV0FBVyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxNQUFoRDtBQUNBLElBQUlDLFNBQVMsT0FBT0MsSUFBUCxLQUFnQixXQUFoQixJQUErQixPQUFPQyxpQkFBUCxLQUE2QixXQUE1RCxJQUNURCxnQkFBZ0JDLGlCQURQLElBQzRCRCxJQUR6QztBQUVBLElBQUlFLFdBQVcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBaEQ7QUFDQSxJQUFJQyxRQUFRUCxZQUFZSyxRQUFaLElBQXdCSCxNQUFwQztBQUNBTSxRQUFRQyxJQUFSLEdBQWVGLEtBQWY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFlBQVk7QUFDVCxRQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNSLGNBQU0sSUFBSUcsS0FBSixDQUFVLCtEQUFWLENBQU47QUFDSDtBQUNKLENBSkQ7QUFLQSIsImZpbGUiOiJyb290LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb21tb25KUyAvIE5vZGUgaGF2ZSBnbG9iYWwgY29udGV4dCBleHBvc2VkIGFzIFwiZ2xvYmFsXCIgdmFyaWFibGUuXG4vLyBXZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIG5vZGUuZC50cyB0aGlzIHRoaXMgY29tcGlsYXRpb24gdW5pdCBzbyB3ZSdsbCBqdXN0IGZha2Vcbi8vIHRoZSBnbG9iYWwgXCJnbG9iYWxcIiB2YXIgZm9yIG5vdy5cbnZhciBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbnZhciBfX3NlbGYgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJiBzZWxmO1xudmFyIF9fZ2xvYmFsID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsO1xudmFyIF9yb290ID0gX193aW5kb3cgfHwgX19nbG9iYWwgfHwgX19zZWxmO1xuZXhwb3J0cy5yb290ID0gX3Jvb3Q7XG4vLyBXb3JrYXJvdW5kIENsb3N1cmUgQ29tcGlsZXIgcmVzdHJpY3Rpb246IFRoZSBib2R5IG9mIGEgZ29vZy5tb2R1bGUgY2Fubm90IHVzZSB0aHJvdy5cbi8vIFRoaXMgaXMgbmVlZGVkIHdoZW4gdXNlZCB3aXRoIGFuZ3VsYXIvdHNpY2tsZSB3aGljaCBpbnNlcnRzIGEgZ29vZy5tb2R1bGUgc3RhdGVtZW50LlxuLy8gV3JhcCBpbiBJSUZFXG4oZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Jvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSeEpTIGNvdWxkIG5vdCBmaW5kIGFueSBnbG9iYWwgY29udGV4dCAod2luZG93LCBzZWxmLCBnbG9iYWwpJyk7XG4gICAgfVxufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvb3QuanMubWFwIl19
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],52:[function(require,module,exports){
"use strict";

var root_1 = require('./root');
var isArrayLike_1 = require('./isArrayLike');
var isPromise_1 = require('./isPromise');
var isObject_1 = require('./isObject');
var Observable_1 = require('../Observable');
var iterator_1 = require('../symbol/iterator');
var InnerSubscriber_1 = require('../InnerSubscriber');
var observable_1 = require('../symbol/observable');
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        } else {
            destination.syncErrorThrowable = true;
            return result.subscribe(destination);
        }
    } else if (isArrayLike_1.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    } else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) {
            return destination.error(err);
        }).then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root_1.root.setTimeout(function () {
                throw err;
            });
        });
        return destination;
    } else if (result && typeof result[iterator_1.iterator] === 'function') {
        var iterator = result[iterator_1.iterator]();
        do {
            var item = iterator.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    } else if (result && typeof result[observable_1.observable] === 'function') {
        var obs = result[observable_1.observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        } else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    } else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected." + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
exports.subscribeToResult = subscribeToResult;
//# sourceMappingURL=subscribeToResult.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../InnerSubscriber":2,"../Observable":4,"../symbol/iterator":36,"../symbol/observable":37,"./isArrayLike":44,"./isObject":46,"./isPromise":47,"./root":51}],53:[function(require,module,exports){
"use strict";

var Subscriber_1 = require('../Subscriber');
var rxSubscriber_1 = require('../symbol/rxSubscriber');
var Observer_1 = require('../Observer');
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvU3Vic2NyaWJlci5qcyJdLCJuYW1lcyI6WyJTdWJzY3JpYmVyXzEiLCJyZXF1aXJlIiwicnhTdWJzY3JpYmVyXzEiLCJPYnNlcnZlcl8xIiwidG9TdWJzY3JpYmVyIiwibmV4dE9yT2JzZXJ2ZXIiLCJlcnJvciIsImNvbXBsZXRlIiwiU3Vic2NyaWJlciIsInJ4U3Vic2NyaWJlciIsImVtcHR5IiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsZUFBZUMsUUFBUSxlQUFSLENBQW5CO0FBQ0EsSUFBSUMsaUJBQWlCRCxRQUFRLHdCQUFSLENBQXJCO0FBQ0EsSUFBSUUsYUFBYUYsUUFBUSxhQUFSLENBQWpCO0FBQ0EsU0FBU0csWUFBVCxDQUFzQkMsY0FBdEIsRUFBc0NDLEtBQXRDLEVBQTZDQyxRQUE3QyxFQUF1RDtBQUNuRCxRQUFJRixjQUFKLEVBQW9CO0FBQ2hCLFlBQUlBLDBCQUEwQkwsYUFBYVEsVUFBM0MsRUFBdUQ7QUFDbkQsbUJBQU9ILGNBQVA7QUFDSDtBQUNELFlBQUlBLGVBQWVILGVBQWVPLFlBQTlCLENBQUosRUFBaUQ7QUFDN0MsbUJBQU9KLGVBQWVILGVBQWVPLFlBQTlCLEdBQVA7QUFDSDtBQUNKO0FBQ0QsUUFBSSxDQUFDSixjQUFELElBQW1CLENBQUNDLEtBQXBCLElBQTZCLENBQUNDLFFBQWxDLEVBQTRDO0FBQ3hDLGVBQU8sSUFBSVAsYUFBYVEsVUFBakIsQ0FBNEJMLFdBQVdPLEtBQXZDLENBQVA7QUFDSDtBQUNELFdBQU8sSUFBSVYsYUFBYVEsVUFBakIsQ0FBNEJILGNBQTVCLEVBQTRDQyxLQUE1QyxFQUFtREMsUUFBbkQsQ0FBUDtBQUNIO0FBQ0RJLFFBQVFQLFlBQVIsR0FBdUJBLFlBQXZCO0FBQ0EiLCJmaWxlIjoidG9TdWJzY3JpYmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vc3ltYm9sL3J4U3Vic2NyaWJlcicpO1xudmFyIE9ic2VydmVyXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZlcicpO1xuZnVuY3Rpb24gdG9TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICBpZiAobmV4dE9yT2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyIGluc3RhbmNlb2YgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyXzEucnhTdWJzY3JpYmVyXSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW5leHRPck9ic2VydmVyICYmICFlcnJvciAmJiAhY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcihPYnNlcnZlcl8xLmVtcHR5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbn1cbmV4cG9ydHMudG9TdWJzY3JpYmVyID0gdG9TdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9TdWJzY3JpYmVyLmpzLm1hcCJdfQ==
},{"../Observer":5,"../Subscriber":9,"../symbol/rxSubscriber":38}],54:[function(require,module,exports){
"use strict";

var errorObject_1 = require('./errorObject');
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    } catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyeUNhdGNoLmpzIl0sIm5hbWVzIjpbImVycm9yT2JqZWN0XzEiLCJyZXF1aXJlIiwidHJ5Q2F0Y2hUYXJnZXQiLCJ0cnlDYXRjaGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJlIiwiZXJyb3JPYmplY3QiLCJ0cnlDYXRjaCIsImZuIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsZ0JBQWdCQyxRQUFRLGVBQVIsQ0FBcEI7QUFDQSxJQUFJQyxjQUFKO0FBQ0EsU0FBU0MsVUFBVCxHQUFzQjtBQUNsQixRQUFJO0FBQ0EsZUFBT0QsZUFBZUUsS0FBZixDQUFxQixJQUFyQixFQUEyQkMsU0FBM0IsQ0FBUDtBQUNILEtBRkQsQ0FHQSxPQUFPQyxDQUFQLEVBQVU7QUFDTk4sc0JBQWNPLFdBQWQsQ0FBMEJELENBQTFCLEdBQThCQSxDQUE5QjtBQUNBLGVBQU9OLGNBQWNPLFdBQXJCO0FBQ0g7QUFDSjtBQUNELFNBQVNDLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCO0FBQ2xCUCxxQkFBaUJPLEVBQWpCO0FBQ0EsV0FBT04sVUFBUDtBQUNIO0FBQ0RPLFFBQVFGLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0E7QUFDQSIsImZpbGUiOiJ0cnlDYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuL2Vycm9yT2JqZWN0Jyk7XG52YXIgdHJ5Q2F0Y2hUYXJnZXQ7XG5mdW5jdGlvbiB0cnlDYXRjaGVyKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0cnlDYXRjaFRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdDtcbiAgICB9XG59XG5mdW5jdGlvbiB0cnlDYXRjaChmbikge1xuICAgIHRyeUNhdGNoVGFyZ2V0ID0gZm47XG4gICAgcmV0dXJuIHRyeUNhdGNoZXI7XG59XG5leHBvcnRzLnRyeUNhdGNoID0gdHJ5Q2F0Y2g7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnlDYXRjaC5qcy5tYXAiXX0=
},{"./errorObject":42}],55:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Observable = require('rxjs/Observable');

var _AjaxObservable = require('rxjs/observable/dom/AjaxObservable');

require('rxjs/add/operator/map');

require('rxjs/add/operator/filter');

require('rxjs/add/operator/mergeMap');

require('rxjs/add/operator/distinct');

require('rxjs/add/observable/from');

require('rxjs/add/observable/fromPromise');

var _dexie = require('dexie');

var _dexie2 = _interopRequireDefault(_dexie);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Common database helper functions.
 */
var DBHelper = function () {
    function DBHelper() {
        _classCallCheck(this, DBHelper);
    }

    _createClass(DBHelper, null, [{
        key: 'createIndexedDB',


        /**
         * Returns indexedDB managed by Dexie
         * @param name
         * @static
         * @return {Dexie}
         */
        value: function createIndexedDB(name) {
            return new _dexie2.default(name);
        }

        /**
         * Creates indexedDB table
         * @param {Dexie} DB Database
         * @param {Object} stores Stores and object
         * @static
         * @return {Dexie.Version<Number>} database
         */

    }, {
        key: 'createIndexedStores',
        value: function createIndexedStores(DB, stores) {

            return DB.version(DBHelper.DATABASE_VERSION).stores(stores);
        }

        /**
         * Deletes an indexed database
         * @param {Dexie} DB
         * @static
         * @return {Promise<void>}
         */

    }, {
        key: 'deleteIndexedDB',
        value: function deleteIndexedDB(DB) {
            return DB.delete();
        }

        /**
         * Executes indexedDB settings and if set, Dexie.on watcher
         * @param {Dexie} DB
         * @static
         * @return {Promise<Dexie>}
         */

    }, {
        key: 'initIndexedDB',
        value: function initIndexedDB(DB) {
            return DB.open();
        }

        /**
         * Registers listener for an indexedDB event
         * @param {Dexie} DB
         * @param {String} type
         * @param {Function} fn
         * @static
         * @return {void}
         */

    }, {
        key: 'addIDBEventListener',
        value: function addIDBEventListener(DB, type, fn) {
            DB.on(type, fn);
        }

        /**
         * Executes function if indexedDB is not empty
         * @param {Dexie} DB
         * @static
         * @param {String} storeName
         */

    }, {
        key: 'ifIndexedDBEmpty',
        value: function ifIndexedDBEmpty(DB, storeName) {
            return new Promise(function (resolve, reject) {
                DBHelper.addIDBEventListener(DB, 'ready', function () {
                    return DB[storeName].count(function (count) {
                        if (count === 0) {
                            return resolve();
                        } else {
                            return reject('DB not empty');
                        }
                    });
                });
            });
        }

        /**
         * Executes an callback when having access to indexed table records
         * @param {Dexie} DB
         * @param {Function} callback
         * @static
         * @return {Dexie.Promise}
         */

    }, {
        key: 'indexedTableOpen',
        value: function indexedTableOpen(DB, callback) {
            return DB.transaction('rw', DBHelper.DATABASE_NAME, function () {
                return callback();
            });
        }

        /**
         * Fetch all restaurants.
         * @static
         * @return {Observable}
         */

    }, {
        key: 'fetchRestaurants',
        value: function fetchRestaurants() {
            return _AjaxObservable.AjaxObservable.create.getJSON(DBHelper.API_URL).mergeMap(function (x) {
                return _Observable.Observable.from(x);
            });
        }

        /**
         *
         * @param {Dexie} DB
         * @param {Array} query arguments for indexedDB query id/
         * @return {Promise<any>}
         */

    }, {
        key: 'entryExists',
        value: function entryExists(DB, query) {
            return new Promise(function (resolve, reject) {
                DB.transaction('rw', DBHelper.DATABASE_NAME, function () {
                    var _DB$DBHelper$DATABASE;

                    (_DB$DBHelper$DATABASE = DB[DBHelper.DATABASE_NAME]).get.apply(_DB$DBHelper$DATABASE, _toConsumableArray(query)).then(function (result) {
                        return resolve(result);
                    }).catch(function (err) {
                        reject(err);
                    });
                });
            });
        }

        /**
         * Checks if API have changed
         * @return {Promise<void>}
         */

    }, {
        key: 'needsUpdate',
        value: function needsUpdate() {
            return new Promise(function (resolve, reject) {
                var http = new XMLHttpRequest();
                http.open('HEAD', url);
                http.onreadystatechange = function () {
                    if (this.readyState === this.DONE) {
                        this.status !== 304 && this.status !== 404 && resolve();
                    } else {
                        reject();
                    }
                };
                http.send();
            });
        }

        /**
         * Fetch a restaurant by its ID.
         * @param {Number} id
         * @param {Function} callback
         * @static
         * @return {Subscription}
         */

    }, {
        key: 'fetchRestaurantById',
        value: function fetchRestaurantById(id, callback) {
            return _AjaxObservable.AjaxObservable.create.getJSON('' + DBHelper.API_URL + id).subscribe(function (restaurants) {
                callback(null, restaurants);
            }, function (error) {
                callback('Got error ' + error + ' fetching restaurant ID: {' + id + '} from remote', null);
            });
        }

        /**
         * Fetch restaurants by a cuisine type with proper error handling.
         * @param {Observable} restaurants$
         * @param {String} cuisine
         * @param {Function} callback
         * @static
         * @return {Subscription}
         */

    }, {
        key: 'fetchRestaurantByCuisine',
        value: function fetchRestaurantByCuisine(restaurants$, cuisine, callback) {
            return restaurants$.filter(function (r) {
                return r.cuisine_type === cuisine;
            }).subscribe(function (c) {
                return callback(null, c);
            }, function (error) {
                return callback(error, null);
            });
        }

        /**
         * Fetch restaurants by a neighborhood with proper error handling.
         * @param {Observable} restaurants$
         * @param {String} neighborhood
         * @param {Function} callback
         * @static
         * @return {Subscription}
         */

    }, {
        key: 'fetchRestaurantByNeighborhood',
        value: function fetchRestaurantByNeighborhood(restaurants$, neighborhood, callback) {
            return restaurants$.filter(function (r) {
                return r.neighborhood === neighborhood;
            }).subscribe(function (n) {
                return callback(null, n);
            }, function (error) {
                return callback(error, null);
            });
        }

        /**
         * Fetch restaurants by a cuisine and a neighborhood with proper error handling.
         * @param {Observable} restaurants$
         * @param {String} cuisine
         * @param {String} neighborhood
         * @static
         * @return {Observable}
         */

    }, {
        key: 'fetchRestaurantByCuisineAndNeighborhood',
        value: function fetchRestaurantByCuisineAndNeighborhood(restaurants$, cuisine, neighborhood) {
            return restaurants$.filter(function (r) {
                return (cuisine !== 'all' && r.cuisine_type === cuisine || cuisine === 'all') && (neighborhood !== 'all' && r.neighborhood === neighborhood || neighborhood === 'all');
            });
        }

        /**
         * Fetch all neighborhoods with proper error handling.
         * @param {Observable} restaurants$
         * @static
         * @return {Observable<*>}
         */

    }, {
        key: 'fetchNeighborhoods',
        value: function fetchNeighborhoods(restaurants$) {
            return restaurants$.map(function (r) {
                return r.neighborhood;
            }).distinct();
        }

        /**
         * Fetch all cuisines with proper error handling.
         * @param {Observable} restaurants$
         * @static
         * @return {Subscription}
         */

    }, {
        key: 'fetchCuisines',
        value: function fetchCuisines(restaurants$) {
            return restaurants$.map(function (r) {
                return r.cuisine_type;
            }).distinct();
        }

        /**
         * Restaurant page URL.
         * @param {Object} restaurant
         * @static
         * @return {String}
         */


        /**
         * Restaurant image URL.
         * @param {Object} restaurant
         * @static
         * @return {String}
         */

    }, {
        key: 'mapMarkerForRestaurant',


        /**
         * Map marker for a restaurant.
         * @param {Object} restaurant
         * @param {google.maps.Map} map
         * @static
         * @return {google.maps.Marker}
         */
        value: function mapMarkerForRestaurant(restaurant, map) {
            return new google.maps.Marker({
                position: restaurant.latlng,
                title: restaurant.name,
                url: DBHelper.urlForRestaurant(restaurant),
                map: map,
                animation: google.maps.Animation.DROP
            });
        }
    }, {
        key: 'API_URL',


        /**
         * Database URL.
         * @description restaurants.json file location on your server.
         * @static
         * @return {String}
         */
        get: function get() {
            return '/restaurants/';
        }

        /**
         * Database Name.
         * @description Indexed database name
         * @static
         * @return {String}
         */

    }, {
        key: 'DATABASE_NAME',
        get: function get() {
            return 'restaurants';
        }

        /**
         * Returns current database number set by developer
         * @static
         * @return {number}
         */

    }, {
        key: 'DATABASE_VERSION',
        get: function get() {
            return 1;
        }
    }]);

    return DBHelper;
}();

DBHelper.urlForRestaurant = function (restaurant) {
    return './review/' + restaurant.id;
};

DBHelper.imageUrlForRestaurant = function (restaurant) {
    return '/img/' + restaurant.photograph;
};

exports.default = DBHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"dexie":1,"rxjs/Observable":4,"rxjs/add/observable/from":11,"rxjs/add/observable/fromPromise":12,"rxjs/add/operator/distinct":13,"rxjs/add/operator/filter":14,"rxjs/add/operator/map":15,"rxjs/add/operator/mergeMap":16,"rxjs/observable/dom/AjaxObservable":24}],56:[function(require,module,exports){
"use strict";

var _main = require("./main");

var _main2 = _interopRequireDefault(_main);

var _restaurant_info = require("./restaurant_info");

var _restaurant_info2 = _interopRequireDefault(_restaurant_info);

var _dbhelper = require("./dbhelper");

var _dbhelper2 = _interopRequireDefault(_dbhelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function () {
  var neighborhoodsSelect = document.getElementById('neighborhoods-select');
  var cuisinesSelect = document.getElementById('cuisines-select');
  /**
   * Parses current route
   * @return {RegExpMatchArray | null | string[]}
   */
  var routeChecker = function routeChecker() {
    var patt = /([\w_.]+)/g;
    return location.pathname.match(patt) || ['/'];
  };
  /**
   *
   * @param {ServiceWorker} worker
   * @return {void}
   */
  var sw_update_ready = function sw_update_ready(worker) {
    if (confirm('Update is ready. Refresh now?')) {
      worker.postMessage({
        action: 'skipWaiting'
      });
    }
  };
  /**
   *
   * @param {ServiceWorker} worker
   */
  var track_installing = function track_installing(worker) {
    return worker.addEventListener('statechange', function () {
      if (worker.state === 'installed') {
        return sw_update_ready(worker);
      }
    });
  };
  /**
   * Registration of ServiceWorker
   * @return {*}
   */
  var initSW = function initSW() {
    if (navigator.serviceWorker) {
      navigator.serviceWorker.register('/sw.js').then(function (reg) {
        if (!navigator.serviceWorker.controller) {
          return;
        } else if (reg.installing) {
          console.log('Service worker installing');
          track_installing(reg.installing);
        } else if (reg.waiting) {
          console.log('Service worker installed');
        } else if (reg.active) {
          console.log("Service worker active at scope: " + reg.scope);
        }
        return reg.addEventListener('updatefound', function () {
          return track_installing(reg.installing);
        });
      }).catch(function (err) {
        return console.error('ServiceWorker registration failed with error: ' + err);
      });
    }
  };
  /**
   * Initialize Google map, called from HTML.
   * @param {Object} context
   * @param {String} type
   * @return {function}
   */
  var setInitMap = function setInitMap(context, type) {
    switch (type) {
      case '/':
        return self.initMap = function () {
          var loc = {
            lat: 40.722216,
            lng: -73.987501
          };
          context.setState({
            map: new google.maps.Map(document.getElementById('map'), {
              zoom: 12,
              center: loc,
              scrollwheel: false
            })
          });
          R.fetchNeighborhoods();
          R.fetchCuisines();
        };
      case 'review':
        return self.initMap = function () {
          return context.fetchRestaurantFromURL(function (error, restaurant) {
            if (error) {
              // Got an error!
              console.error(error);
            } else {
              context.setState({
                map: new google.maps.Map(document.getElementById('map'), {
                  zoom: 16,
                  center: restaurant.latlng,
                  scrollwheel: false
                })
              });
              context.fillBreadcrumb();
              _dbhelper2.default.mapMarkerForRestaurant(context.state.restaurant, context.state.map);
            }
          });
        };
    }
  };

  switch (routeChecker()[0]) {
    case '/':
      var _R = new _main2.default();
      window.R = _R;
      setInitMap(_R, '/');

      cuisinesSelect.addEventListener('change', function () {
        _R.updateRestaurants();
      });
      neighborhoodsSelect.addEventListener('change', function () {
        _R.updateRestaurants();
      });
      break;
    case 'review':
      var Rv = new _restaurant_info2.default();
      window.Rv = Rv;
      setInitMap(Rv, 'review');
      break;
  }

  initSW(); //init service worker
}).call(undefined); //ensure application runs in right context
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./dbhelper":55,"./main":57,"./restaurant_info":58}],57:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createResponsiveImg = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dbhelper = require('./dbhelper');

var _dbhelper2 = _interopRequireDefault(_dbhelper);

var _Observable = require('rxjs/Observable');

var _Subject = require('rxjs/Subject');

require('rxjs/add/operator/map');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @class Restaurant
 */
var Restaurant = function Restaurant() {
  var _this = this;

  _classCallCheck(this, Restaurant);

  this.state = {
    restaurants: null,
    neighborhoods: [],
    cuisines: [],
    map: null,
    markers: [],
    inexedDB: false
  };

  this.setState = function (patch) {
    return _this.state = _extends({}, _this.state, patch);
  };

  this.fetchNeighborhoods = function () {
    _this.state.neighborhoods = [];
    var fetchN = function fetchN(r) {
      _this.state.neighborhoods = [];
      return _dbhelper2.default.fetchNeighborhoods(r).subscribe(function (neighborhoods) {
        _this.state.neighborhoods.push(neighborhoods);
        _this.fillNeighborhoodsHTML(neighborhoods);
      }, function (error) {
        return console.error(error);
      });
    };

    if (_this.state.restaurants && _this.state.restaurants.length !== 0) {
      fetchN(_this.state.restaurants);
    } else {
      fetchN(_this.setRestaurants());
    }
  };

  this.fillNeighborhoodsHTML = function (neighborhood) {
    var select = document.getElementById('neighborhoods-select');

    var option = document.createElement('option');
    option.innerHTML = neighborhood;
    option.value = neighborhood;
    try {
      select.append(option);
    } catch (e) {
      select.innerHTML += option.outerHTML;
    }
    return option;
  };

  this.fetchCuisines = function () {
    _this.state.cuisines = [];
    _dbhelper2.default.fetchCuisines(_this.state.restaurants).subscribe(function (cuisine) {
      _this.state.cuisines.push(cuisine);
      _this.fillCuisinesHTML(cuisine);
    }, function (error) {
      return console.error(error);
    });
  };

  this.fillCuisinesHTML = function (cuisine) {
    var select = document.getElementById('cuisines-select');

    var option = document.createElement('option');
    option.innerHTML = cuisine;
    option.value = cuisine;
    try {
      select.append(option);
    } catch (e) {
      select.innerHTML += option.outerHTML;
    }
    return option;
  };

  this.setRestaurants = function () {
    _this.state.restaurants = new _Subject.Subject();
    var DB = _dbhelper2.default.createIndexedDB(_dbhelper2.default.DATABASE_NAME);
    _dbhelper2.default.createIndexedStores(DB, { restaurants: 'id++,name,neighborhood,cuisine_type' });
    _this.resetRestaurants();
    return _dbhelper2.default.fetchRestaurants().map(function (restaurant) {
      _this.fillRestaurantsHTML(restaurant);
      _this.state.restaurants.next(restaurant);
      DB[_dbhelper2.default.DATABASE_NAME].put(restaurant).then(function () {
        _this.state.inexedDB = true;
      }).catch(console.error);
      return restaurant;
    }, function (error) {
      return console.error(error);
    });
  };

  this.updateRestaurants = function () {
    var cSelect = document.getElementById('cuisines-select');
    var nSelect = document.getElementById('neighborhoods-select');

    var cIndex = cSelect.selectedIndex;
    var nIndex = nSelect.selectedIndex;

    var cuisine = cSelect[cIndex].value;
    var neighborhood = nSelect[nIndex].value;

    // Remove all restaurants
    _this.resetRestaurants();
    _dbhelper2.default.fetchRestaurantByCuisineAndNeighborhood(_dbhelper2.default.fetchRestaurants(), cuisine, neighborhood).subscribe(function (r) {
      console.log(r);
      _this.fillRestaurantsHTML(r);
    }, function (error) {
      return console.error(error);
    });
  };

  this.resetRestaurants = function () {
    var ul = document.getElementById('restaurants-list');
    ul.innerHTML = '';
    // Remove all map markers
    _this.state.markers = _this.state.markers ? _this.state.markers : [];
    _this.state.markers.forEach(function (m) {
      return m.setMap(null);
    });
  };

  this.fillRestaurantsHTML = function (restaurant) {
    var ul = document.getElementById('restaurants-list');

    try {
      ul.append(_this.createRestaurantHTML(restaurant));
    } catch (e) {
      ul.innerHTML += _this.createRestaurantHTML(restaurant).outerHTML; // support for MS Edge
    }

    _this.addMarkersToMap(restaurant);
  };

  this.createRestaurantHTML = function (restaurant) {
    var container = document.createElement('div');
    var randomId = 'n' + String(Math.random()).split('.')[1];
    container.innerHTML = ('<li role="banner" aria-labelledby="' + randomId + '">\n<div id="' + randomId + '">\n' + Restaurant.createResponsiveImg(_dbhelper2.default.imageUrlForRestaurant(restaurant), 'Image of ' + restaurant.name + ' restaurant') + '\n<h2 role="heading">' + restaurant.name + '</h2>\n<p>' + restaurant.neighborhood + '</p>\n<p>' + restaurant.address + '</p>\n</div>\n<a role="link" href="' + _dbhelper2.default.urlForRestaurant(restaurant) + '">View Details</a></li>').replace(/>\s+</, '><'); //just in case browser will render unwanted space
    return container.firstChild;
  };

  this.addMarkersToMap = function (restaurant) {
    var marker = _dbhelper2.default.mapMarkerForRestaurant(restaurant, _this.state.map);
    google.maps.event.addListener(marker, 'click', function () {
      window.location.href = marker.url;
    });
    _this.state.markers.push(marker);
  };
}
/**
 * Sets state of Restaurant class
 * @param {Object} patch - Patch object
 * @return {{restaurants: null, neighborhoods: Array, cuisines: Array, map: null, markers: Array, inexedDB: boolean}}
 */


/**
 * Fetch all neighborhoods and set their HTML.
 * @return {Subscription}
 */


/**
 * Set neighborhoods HTML.
 * @param {String} neighborhood
 * @return {HTMLOptionElement}
 */


/**
 * Fetch all cuisines and set their HTML.
 * @return {void}
 */


/**
 * Set cuisines HTML.
 * @param {String} cuisine
 * @return {HTMLOptionElement}
 */


/**
 * When fetched or update restaurants this sets state.restaurants to collection of restaurants
 * @return {Observable}
 */


/**
 * Update page and map for current restaurants.
 * @return {void}
 */


/**
 * Clear current restaurants, their HTML and remove their map markers.
 * @return {void}
 */


/**
 * Create all restaurants HTML and add them to the webpage.
 * @return {void}
 */


/**
 * Generates responsive image HTML
 * @param url {string}
 * @param alt {string}
 * @return {string}
 */


/**
 * Create restaurant HTML.
 * @param restaurant {Object}
 * @return {Node}
 */


/**
 * Add markers for current restaurants to the map.
 * @param {Object} restaurant
 * @return {Function}
 */
;

Restaurant.createResponsiveImg = function (url, alt) {
  var parsedURL = url.split('.');
  var urlWithoutExt = parsedURL[parsedURL.length - 1];
  return '<picture class="restaurant-img">\n  <source media="(max-width: 719px)"\n    srcset=".' + urlWithoutExt + '-100-1x.jpg 1x, .' + urlWithoutExt + '-100-2x.jpg 2x, .' + urlWithoutExt + '-100-3x.jpg 3x">\n  <source  media="(min-width: 720px)"\n    srcset=".' + url + '.jpg 1x">\n  <img class="restaurant-img" src=".' + url + '.jpg" alt="' + alt + '">\n</picture>';
};

exports.default = Restaurant;
var createResponsiveImg = exports.createResponsiveImg = Restaurant.createResponsiveImg;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./dbhelper":55,"rxjs/Observable":4,"rxjs/Subject":7,"rxjs/add/operator/map":15}],58:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dbhelper = require('./dbhelper');

var _dbhelper2 = _interopRequireDefault(_dbhelper);

var _main = require('./main');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Review = function Review() {
    var _this = this;

    _classCallCheck(this, Review);

    this.state = {
        restaurant: null,
        map: null
    };

    this.setState = function (obj) {
        return _this.state = _extends({}, _this.state, obj);
    };

    this.fetchRestaurantFromURL = function (callback) {
        if (_this.state.restaurant) {
            // restaurant already fetched!
            callback(null, _this.state.restaurant);
            return;
        }
        var id = _this.getParameterByName();
        if (!id) {
            // no id found in URL
            var error = 'No restaurant id in URL';
            callback(error, null);
        } else {
            _dbhelper2.default.fetchRestaurantById(id, function (error, restaurant) {
                _this.state.restaurant = restaurant;
                if (!restaurant) {
                    console.error(error);
                    return;
                }
                _this.fillRestaurantHTML();
                callback(null, restaurant);
            });
        }
    };

    this.fillRestaurantHTML = function () {
        var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.restaurant;

        var name = document.getElementById('restaurant-name');
        name.innerHTML = restaurant.name;

        var address = document.getElementById('restaurant-address');
        address.innerHTML = restaurant.address;

        var image = document.getElementById('restaurant-img');
        image.outerHTML = (0, _main.createResponsiveImg)(_dbhelper2.default.imageUrlForRestaurant(restaurant), 'Image of ' + restaurant.name + ' restaurant');
        var img = document.getElementsByClassName('restaurant-img')[1];
        img.id = 'restaurant-img';

        var cuisine = document.getElementById('restaurant-cuisine');
        cuisine.innerHTML = restaurant.cuisine_type;
        // fill operating hours
        if (restaurant.operating_hours) {
            _this.fillRestaurantHoursHTML();
        }
        // fill reviews
        _this.fillReviewsHTML();
    };

    this.fillRestaurantHoursHTML = function () {
        var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.restaurant.operating_hours;

        var hours = document.getElementById('restaurant-hours');
        for (var key in operatingHours) {
            var row = document.createElement('tr');

            var day = document.createElement('td');
            day.innerHTML = key;
            row.appendChild(day);

            var time = document.createElement('td');
            time.innerHTML = operatingHours[key];
            row.appendChild(time);

            hours.appendChild(row);
        }
    };

    this.fillReviewsHTML = function () {
        var reviews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.restaurant.reviews;

        var container = document.getElementById('reviews-container');
        var title = document.createElement('h3');
        title.innerHTML = 'Reviews';
        container.appendChild(title);

        if (!reviews) {
            var noReviews = document.createElement('p');
            noReviews.innerHTML = 'No reviews yet!';
            container.appendChild(noReviews);
            return;
        }
        var ul = document.getElementById('reviews-list');
        reviews.forEach(function (review) {
            ul.appendChild(_this.createReviewHTML(review));
        });
        container.appendChild(ul);
    };

    this.createReviewHTML = function (review) {
        var container = document.createElement('div');
        container.innerHTML = ('<li><p>' + review.name + '</p>\n<p>' + review.date + '</p>\n<p class="review-rating">Rating: ' + review.rating + '</p>\n<p>' + review.comments + '</p></li>').replace(/>\s+</, '><');

        return container.firstChild;
    };

    this.fillBreadcrumb = function () {
        var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.restaurant;

        var breadcrumb = document.getElementById('breadcrumb');
        var li = document.createElement('li');
        li.innerHTML = restaurant.name;
        breadcrumb.appendChild(li);
    };

    this.getParameterByName = function () {
        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.pathname;

        var results = url.split('/');
        if (!results) {
            return null;
        }
        if (!results[2]) {
            return '';
        }
        return results[2];
    };
}
/**
 * Get current restaurant from page URL.
 * @param callback {function}
 */


/**
 * Create restaurant HTML and add it to the webpage
 * @param restaurant {Object}
 */


/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 * @param operatingHours {Object}
 */


/**
 * Create all reviews HTML and add them to the webpage.
 * @param reviews {array}
 */


/**
 * Create review HTML and add it to the webpage.
 * @param review {Object}
 */


/**
 * Add restaurant name to the breadcrumb navigation menu
 * @param restaurant {Object}
 */


/**
 * Get a parameter by name from page URL.
 * @param url {String=}
 */
;

exports.default = Review;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./dbhelper":55,"./main":57}]},{},[56])